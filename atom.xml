<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Airshu&#39;s Blog</title>
  
  <subtitle>Hello World</subtitle>
  <link href="http://airshu.github.io/atom.xml" rel="self"/>
  
  <link href="http://airshu.github.io/"/>
  <updated>2024-03-09T09:31:38.330Z</updated>
  <id>http://airshu.github.io/</id>
  
  <author>
    <name>airshu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>集成到现有Android应用</title>
    <link href="http://airshu.github.io/wiki/JavaScript/ReactNative/%E9%9B%86%E6%88%90%E5%88%B0%E7%8E%B0%E6%9C%89Android%E5%BA%94%E7%94%A8/"/>
    <id>http://airshu.github.io/wiki/JavaScript/ReactNative/%E9%9B%86%E6%88%90%E5%88%B0%E7%8E%B0%E6%9C%89Android%E5%BA%94%E7%94%A8/</id>
    <published>2024-03-09T09:31:38.330Z</published>
    <updated>2024-03-09T09:31:38.330Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不同版本的RN可能配置不一样，这里使用0.62版本</p></blockquote><h2 id="1-创建一个空目录用于存放React-Native项目，然后在其中创建一个-x2F-android子目录，把现有的Android项目拷贝到该目录"><a href="#1-创建一个空目录用于存放React-Native项目，然后在其中创建一个-x2F-android子目录，把现有的Android项目拷贝到该目录" class="headerlink" title="1. 创建一个空目录用于存放React Native项目，然后在其中创建一个&#x2F;android子目录，把现有的Android项目拷贝到该目录"></a>1. 创建一个空目录用于存放React Native项目，然后在其中创建一个&#x2F;android子目录，把现有的Android项目拷贝到该目录</h2><h2 id="2-安装JavaScript依赖包"><a href="#2-安装JavaScript依赖包" class="headerlink" title="2. 安装JavaScript依赖包"></a>2. 安装JavaScript依赖包</h2><p>在项目根目录创建package.json空文件，填入以下内容；</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MyReactNativeApp&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yarn react-native start&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>然后运行：yarn add <a href="mailto:&#x72;&#101;&#97;&#99;&#116;&#45;&#110;&#x61;&#116;&#x69;&#118;&#101;&#64;&#48;&#x2e;&#54;&#50;&#46;&#x31;">&#x72;&#101;&#97;&#99;&#116;&#45;&#110;&#x61;&#116;&#x69;&#118;&#101;&#64;&#48;&#x2e;&#54;&#50;&#46;&#x31;</a>，如果不写版本号会默认安装最新版本的React Native，同时会出现类似以下的警告信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">warning &quot;react-native@0.52.2&quot; has unmet peer dependency &quot;react@16.2.0&quot;.</span><br></pre></td></tr></table></figure><p>只需要再次安装对应版本即可：yarn add <a href="mailto:&#x72;&#x65;&#97;&#x63;&#116;&#x40;&#49;&#54;&#46;&#50;&#46;&#48;">&#x72;&#x65;&#97;&#x63;&#116;&#x40;&#49;&#54;&#46;&#50;&#46;&#48;</a></p><p>这里其实也可以不用手动创建package.json文件，命令添加react-native后会自动生成这个文件。Android项目会依赖node_modules中react-native中的aar</p><h2 id="3-修改Android项目，添加React-Native"><a href="#3-修改Android项目，添加React-Native" class="headerlink" title="3. 修改Android项目，添加React Native"></a>3. 修改Android项目，添加React Native</h2><h3 id="3-1-根目录build-gradle文件配置仓库地址"><a href="#3-1-根目录build-gradle文件配置仓库地址" class="headerlink" title="3.1 根目录build.gradle文件配置仓库地址"></a>3.1 根目录build.gradle文件配置仓库地址</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> REACT_NATIVE_VERSION = <span class="keyword">new</span> <span class="keyword">File</span>([<span class="string">&#x27;node&#x27;</span>, <span class="string">&#x27;--print&#x27;</span>,<span class="string">&quot;JSON.parse(require(&#x27;fs&#x27;).readFileSync(require.resolve(&#x27;react-native/package.json&#x27;), &#x27;utf-8&#x27;)).version&quot;</span>].execute(<span class="keyword">null</span>, rootDir).text.trim())</span><br><span class="line"></span><br><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        maven &#123;</span><br><span class="line">            <span class="comment">// All of React Native (JS, Android binaries) is installed from npm</span></span><br><span class="line">            url <span class="string">&quot;$rootDir/../node_modules/react-native/android&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        maven &#123;</span><br><span class="line">            <span class="comment">// Android JSC is installed from npm</span></span><br><span class="line">            url(<span class="string">&quot;$rootDir/../node_modules/jsc-android/dist&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        ...   </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里会强制项目的版本号跟node_modules中的一致</span></span><br><span class="line">    <span class="keyword">configurations</span>.all &#123;</span><br><span class="line">        resolutionStrategy &#123;</span><br><span class="line">            <span class="comment">// Remove this override in 0.65+, as a proper fix is included in react-native itself.</span></span><br><span class="line">            force <span class="string">&quot;com.facebook.react:react-native:&quot;</span> + REACT_NATIVE_VERSION</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-配置依赖"><a href="#3-2-配置依赖" class="headerlink" title="3.2 配置依赖"></a>3.2 配置依赖</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="string">&quot;com.android.support:appcompat-v7:27.1.1&quot;</span></span><br><span class="line">    ...</span><br><span class="line">    implementation <span class="string">&quot;com.facebook.react:react-native:+&quot;</span> <span class="comment">// +表示使用本地的仓库依赖</span></span><br><span class="line">    implementation <span class="string">&quot;org.webkit:android-jsc:+&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：Android项目和RN项目要保持统一的依赖版本，有些文章说找不到库使用固定版本号也是一种方式，但建议统一版本号</p></blockquote><h3 id="3-3-启动原生模块的自动链接"><a href="#3-3-启动原生模块的自动链接" class="headerlink" title="3.3 启动原生模块的自动链接"></a>3.3 启动原生模块的自动链接</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//settings.gradle文件配置</span></span><br><span class="line">apply <span class="keyword">from</span>: <span class="keyword">file</span>(<span class="string">&quot;../node_modules/@react-native-community/cli-platform-android/native_modules.gradle&quot;</span>); applyNativeModulesSettingsGradle(settings)</span><br><span class="line"></span><br><span class="line"><span class="comment">//app/build.gradle中配置</span></span><br><span class="line">apply <span class="keyword">from</span>: <span class="keyword">file</span>(<span class="string">&quot;../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle&quot;</span>); applyNativeModulesAppBuildGradle(<span class="keyword">project</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-4-配置权限"><a href="#3-4-配置权限" class="headerlink" title="3.4 配置权限"></a>3.4 配置权限</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//AndroidManifest.xml配置</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">application标签添加android:networkSecurityConfig=&quot;@xml/network_security_config&quot;</span><br><span class="line"></span><br><span class="line">//开发者菜单配置</span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;com.facebook.react.devsupport.DevSettingsActivity&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//允许http接口（从 Android 9 (API level 28)开始，默认情况下明文传输（http 接口）是禁用的，只能访问 https 接口。这将阻止应用程序连接到Metro bundler）</span><br><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:usesCleartextTraffic</span>=<span class="string">&quot;true&quot;</span> <span class="attr">tools:targetApi</span>=<span class="string">&quot;28&quot;</span> &gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>network_security_config.xml文件内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">network-security-config</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">debug-overrides</span> <span class="attr">cleartextTrafficPermitted</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">trust-anchors</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">certificates</span> <span class="attr">src</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">certificates</span> <span class="attr">src</span>=<span class="string">&quot;system&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trust-anchors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">debug-overrides</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">base-config</span> <span class="attr">cleartextTrafficPermitted</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">network-security-config</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-代码集成"><a href="#4-代码集成" class="headerlink" title="4. 代码集成"></a>4. 代码集成</h2><h3 id="4-1-创建自定义ReactActivity"><a href="#4-1-创建自定义ReactActivity" class="headerlink" title="4.1 创建自定义ReactActivity"></a>4.1 创建自定义ReactActivity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqd.androidpractice.rn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.net.Uri;</span><br><span class="line"><span class="keyword">import</span> android.os.Build;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.provider.Settings;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.KeyEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.facebook.react.PackageList;</span><br><span class="line"><span class="keyword">import</span> com.facebook.react.ReactInstanceManager;</span><br><span class="line"><span class="keyword">import</span> com.facebook.react.ReactPackage;</span><br><span class="line"><span class="keyword">import</span> com.facebook.react.ReactRootView;</span><br><span class="line"><span class="keyword">import</span> com.facebook.react.common.LifecycleState;</span><br><span class="line"><span class="keyword">import</span> com.facebook.react.devsupport.RedBoxHandler;</span><br><span class="line"><span class="keyword">import</span> com.facebook.react.devsupport.interfaces.StackFrame;</span><br><span class="line"><span class="keyword">import</span> com.facebook.react.modules.core.DefaultHardwareBackBtnHandler;</span><br><span class="line"><span class="keyword">import</span> com.facebook.soloader.SoLoader;</span><br><span class="line"><span class="keyword">import</span> com.lqd.androidpractice.BuildConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyReactActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> <span class="keyword">implements</span> <span class="title class_">DefaultHardwareBackBtnHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ReactRootView mReactRootView;</span><br><span class="line">    <span class="keyword">private</span> ReactInstanceManager mReactInstanceManager;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">OVERLAY_PERMISSION_REQ_CODE</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        Log.w(<span class="string">&quot;MyReactActivity&quot;</span>, <span class="string">&quot;onCreate&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取权限</span></span><br><span class="line">        <span class="keyword">if</span>(Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!Settings.canDrawOverlays(<span class="built_in">this</span>)) &#123;</span><br><span class="line">                <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse(<span class="string">&quot;package:&quot;</span> + getPackageName()));</span><br><span class="line">                startActivityForResult(intent, OVERLAY_PERMISSION_REQ_CODE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        SoLoader.init(<span class="built_in">this</span>, <span class="literal">false</span>);</span><br><span class="line">        mReactRootView = <span class="keyword">new</span> <span class="title class_">ReactRootView</span>(<span class="built_in">this</span>);</span><br><span class="line">        List&lt;ReactPackage&gt; packages = <span class="keyword">new</span> <span class="title class_">PackageList</span>(getApplication()).getPackages();</span><br><span class="line"><span class="comment">//        packages.add(new MyReactNativePackage());</span></span><br><span class="line">        packages.add(<span class="keyword">new</span> <span class="title class_">IndexPackage</span>());<span class="comment">//自定义的Package</span></span><br><span class="line"></span><br><span class="line">        mReactInstanceManager = ReactInstanceManager.builder()</span><br><span class="line">                <span class="comment">//设置上下文</span></span><br><span class="line">                .setApplication(getApplication())</span><br><span class="line">                .setCurrentActivity(<span class="built_in">this</span>)</span><br><span class="line">                <span class="comment">//设置js产物的名字</span></span><br><span class="line">                .setBundleAssetName(<span class="string">&quot;index.android.bundle&quot;</span>)</span><br><span class="line">                <span class="comment">//JS bundle主入口的文件名，js文件的名字</span></span><br><span class="line">                .setJSMainModulePath(<span class="string">&quot;index&quot;</span>)</span><br><span class="line">                .addPackages(packages)<span class="comment">//注册自定义的Package</span></span><br><span class="line">                .setUseDeveloperSupport(BuildConfig.DEBUG)</span><br><span class="line">                <span class="comment">//设置创建时机</span></span><br><span class="line">                .setInitialLifecycleState(LifecycleState.RESUMED)</span><br><span class="line">                <span class="comment">//JS异常回调</span></span><br><span class="line">                .setRedBoxHandler(<span class="keyword">new</span> <span class="title class_">MyRedBoxHandler</span>())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里的名字与AppRegistry.registerComponent对应</span></span><br><span class="line">        mReactRootView.startReactApplication(mReactInstanceManager, <span class="string">&quot;MyReactNativeApp&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        setContentView(mReactRootView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onActivityResult</span><span class="params">(<span class="type">int</span> requestCode, <span class="type">int</span> resultCode, Intent data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(resultCode == OVERLAY_PERMISSION_REQ_CODE) &#123;</span><br><span class="line">            <span class="keyword">if</span>(Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!Settings.canDrawOverlays(<span class="built_in">this</span>)) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mReactInstanceManager.onActivityResult(<span class="built_in">this</span>, requestCode, resultCode, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onKeyUp</span><span class="params">(<span class="type">int</span> keyCode, KeyEvent event)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_MENU &amp;&amp; mReactInstanceManager != <span class="literal">null</span>) &#123;</span><br><span class="line">            mReactInstanceManager.showDevOptionsDialog();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.onKeyUp(keyCode, event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invokeDefaultOnBackPressed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onBackPressed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBackPressed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mReactInstanceManager != <span class="literal">null</span>) &#123;</span><br><span class="line">            mReactInstanceManager.onBackPressed();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.onBackPressed();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生命周期回调同步</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onPause</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onPause();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mReactInstanceManager != <span class="literal">null</span>) &#123;</span><br><span class="line">            mReactInstanceManager.onHostPause(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onResume</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onResume();</span><br><span class="line">        <span class="keyword">if</span> (mReactInstanceManager != <span class="literal">null</span>) &#123;</span><br><span class="line">            mReactInstanceManager.onHostResume(<span class="built_in">this</span>, <span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        <span class="keyword">if</span> (mReactInstanceManager != <span class="literal">null</span>) &#123;</span><br><span class="line">            mReactInstanceManager.onHostDestroy(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mReactRootView != <span class="literal">null</span>) &#123;</span><br><span class="line">            mReactRootView.unmountReactApplication();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异常信息的回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyRedBoxHandler</span> <span class="keyword">implements</span> <span class="title class_">RedBoxHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleRedbox</span><span class="params">(<span class="meta">@Nullable</span> String title, StackFrame[] stack, ErrorType errorType)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(StackFrame stackFrame : stack) &#123;</span><br><span class="line">            Log.w(<span class="string">&quot;MyReactActivity&quot;</span>, <span class="string">&quot;=====handleRedbox   &quot;</span> + stackFrame.getMethod() + <span class="string">&quot; &quot;</span> + stackFrame.getFileName() + <span class="string">&quot; &quot;</span> + stackFrame.getLine() + <span class="string">&quot; &quot;</span> + stackFrame.getColumn() + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//JS异常</span></span><br><span class="line">        Log.w(<span class="string">&quot;MyReactActivity&quot;</span>, <span class="string">&quot;&gt;&gt;handleRedbox   &quot;</span> + title + <span class="string">&quot;---------------- &quot;</span> + errorType + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isReportEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reportRedbox</span><span class="params">(Context context, String title, StackFrame[] stack, String sourceUrl, ReportCompletedListener reportCompletedListener)</span> &#123;</span><br><span class="line">        Log.w(<span class="string">&quot;MyReactActivity&quot;</span>, <span class="string">&quot;-----handleRedbox   &quot;</span> + title + <span class="string">&quot; sourceUrl:&quot;</span> + sourceUrl + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-创建自定义Package"><a href="#4-2-创建自定义Package" class="headerlink" title="4.2 创建自定义Package"></a>4.2 创建自定义Package</h3><p>IndexPackage.java文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.lqd.androidpractice.rn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.NonNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.facebook.react.ReactPackage;</span><br><span class="line"><span class="keyword">import</span> com.facebook.react.bridge.NativeModule;</span><br><span class="line"><span class="keyword">import</span> com.facebook.react.bridge.ReactApplicationContext;</span><br><span class="line"><span class="keyword">import</span> com.facebook.react.uimanager.ViewManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Package用于将原生模块和视图管理器添加到RN中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexPackage</span> <span class="keyword">implements</span> <span class="title class_">ReactPackage</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//返回原生模块列表</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;NativeModule&gt; <span class="title function_">createNativeModules</span><span class="params">(<span class="meta">@NonNull</span> ReactApplicationContext reactContext)</span> &#123;</span><br><span class="line">        List&lt;NativeModule&gt; modules = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        modules.add(<span class="keyword">new</span> <span class="title class_">IndexModule</span>(reactContext));</span><br><span class="line">        <span class="keyword">return</span> modules;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回包含原生视图管理器的列表</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;ViewManager&gt; <span class="title function_">createViewManagers</span><span class="params">(<span class="meta">@NonNull</span> ReactApplicationContext reactContext)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>IndexModule.java文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqd.androidpractice.rn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.NonNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.facebook.react.bridge.ReactApplicationContext;</span><br><span class="line"><span class="keyword">import</span> com.facebook.react.bridge.ReactContextBaseJavaModule;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexModule</span> <span class="keyword">extends</span> <span class="title class_">ReactContextBaseJavaModule</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IndexModule</span><span class="params">(<span class="meta">@NonNull</span> ReactApplicationContext reactContext)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(reactContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;<span class="comment">//跟index.js对应</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCatalystInstanceDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCatalystInstanceDestroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-3-创建index-js文件"><a href="#4-3-创建index-js文件" class="headerlink" title="4.3 创建index.js文件"></a>4.3 创建index.js文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    <span class="title class_">AppRegistry</span>,</span><br><span class="line">    <span class="title class_">Button</span>,</span><br><span class="line">    <span class="title class_">Style</span>,</span><br><span class="line">    <span class="title class_">Text</span>,</span><br><span class="line">    <span class="title class_">View</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="comment">//import ToastExample from &#x27;./ToastExample&#x27;;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloWorld</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Hello, World<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">AppRegistry</span>.<span class="title function_">registerComponent</span>(<span class="string">&#x27;MyReactNativeApp&#x27;</span>, <span class="function">() =&gt;</span> <span class="title class_">HelloWorld</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>React Native也封装了一个ReactActivity，直接继承它更方便</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RNActivity1</span> <span class="keyword">extends</span> <span class="title class_">ReactActivity</span> <span class="keyword">implements</span> <span class="title class_">PermissionAwareActivity</span>, DefaultHardwareBackBtnHandler &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String <span class="title function_">getMainComponentName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> ReactActivityDelegate <span class="title function_">createReactActivityDelegate</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ReactActivityDelegate</span>(<span class="built_in">this</span>, getMainComponentName()) &#123;</span><br><span class="line">            <span class="meta">@Nullable</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">getMainComponentName</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用这种方式Application需要实现ReactApplication，实现getReactNativeHost方法，将对应的Package进行注册</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LQDApplication</span> <span class="keyword">extends</span> <span class="title class_">Application</span> <span class="keyword">implements</span> <span class="title class_">ReactApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ReactNativeHost <span class="title function_">getReactNativeHost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ReactNativeHost</span>(<span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">getUseDeveloperSupport</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> List&lt;ReactPackage&gt; <span class="title function_">getPackages</span><span class="params">()</span> &#123;</span><br><span class="line">                List&lt;ReactPackage&gt; packages = <span class="keyword">new</span> <span class="title class_">PackageList</span>(getApplication()).getPackages();</span><br><span class="line">                packages.add(<span class="keyword">new</span> <span class="title class_">IndexPackage</span>());</span><br><span class="line">                packages.add(<span class="keyword">new</span> <span class="title class_">ImagePickerPackage</span>());</span><br><span class="line">                <span class="keyword">return</span> packages;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-4-编译bundle"><a href="#4-4-编译bundle" class="headerlink" title="4.4 编译bundle"></a>4.4 编译bundle</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npx react-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-运行Android端"><a href="#5-运行Android端" class="headerlink" title="5. 运行Android端"></a>5. 运行Android端</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">开发环境时调试</span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">1.先启动Metro服务器</span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">如果自定义端口，则需要在开发者菜单中配置对应的ip:port</span></span><br><span class="line">npm run start --verbose -- --port 8088 </span><br><span class="line"><span class="meta">#</span><span class="language-bash">或yarn start</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">2.运行程序</span></span><br><span class="line">yarn react-native run-android</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">3.打开开发者工具，配置ip:port</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">生产环境</span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">通过codepush进行热更新或者编译bundle到assets目录下</span></span><br></pre></td></tr></table></figure><h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><h3 id="找不到PackageList"><a href="#找不到PackageList" class="headerlink" title="找不到PackageList"></a>找不到PackageList</h3><p>这个文件是生成的，删除build文件夹，执行以下yarn react-native run-android</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://reactnative.cn/docs/integration-with-existing-apps">集成到现有原生应用</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;不同版本的RN可能配置不一样，这里使用0.62版本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-创建一个空目录用于存放React-Native项目，然后在其中创建一个-x2F-android子目录，把现有的Android项目拷贝到该目录</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://airshu.github.io/categories/JavaScript/"/>
    
    <category term="ReactNative" scheme="http://airshu.github.io/categories/JavaScript/ReactNative/"/>
    
    
    <category term="React Native" scheme="http://airshu.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>项目结构</title>
    <link href="http://airshu.github.io/wiki/JavaScript/ReactNative/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://airshu.github.io/wiki/JavaScript/ReactNative/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/</id>
    <published>2024-03-09T09:31:38.330Z</published>
    <updated>2024-03-09T09:31:38.330Z</updated>
    
    <content type="html"><![CDATA[<ul><li>android：#Android 项目</li><li>ios：</li><li>node_modules： 项目依赖</li><li>app.json： 描述app信息</li><li>index.js： 入口文件</li><li>package.json: 依赖信息和版本信息</li><li>metro.config.js:Metro打包器的配置文件，以配置 Metro 的行为，例如设置转换器（transformer）、指定资源扩展名、设置服务器端口等。</li><li>babel.config.js: Babel的配置文件。Babel 是一个 JavaScript 编译器，用于将 ES6+ 代码转换为向后兼容的 JavaScript 版本，以便在当前和旧版本的浏览器或其他环境中运行。</li><li>tsconfig.json：指定编译TypeScript代码所需的根文件和编译器选项，一个项目中可能会有多个tsconfig.json文件，用于不同的环境。tsc -p tsconfig_xxx.json指定不同的配置文件</li><li>jsconfig.json：定义JS项目的行为，主要改善编辑器的代码智能感知功能</li><li>jest.config.js：Jest的配置文件。Jest 是一个 JavaScript 测试框架，用于编写和运行测试。</li><li>.eslintrc.js或.eslintrc.json：ESLint的配置文件。ESLint 是一个用于识别和报告 ECMAScript&#x2F;JavaScript 代码中的模式的工具，以确保代码的一致性和避免错误。</li><li>.prettierrc.js或.prettierrc.json：Prettier的配置文件。Prettier 是一个代码格式化工具，用于格式化代码以确保代码的一致性。</li></ul><h2 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">/* Basic Options */</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es6&quot;</span><span class="punctuation">,</span>                          <span class="comment">/* 设置ECMAScript目标版本 Specify ECMAScript target version: &#x27;ES3&#x27; (default), &#x27;ES5&#x27;, &#x27;ES2015&#x27;, &#x27;ES2016&#x27;, &#x27;ES2017&#x27;,&#x27;ES2018&#x27; or &#x27;ESNEXT&#x27;. */</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span>                     <span class="comment">/* 指定生成哪个模块系统 Specify module code generation: &#x27;none&#x27;, &#x27;commonjs&#x27;, &#x27;amd&#x27;, &#x27;system&#x27;, &#x27;umd&#x27;, &#x27;es2015&#x27;, or &#x27;ESNext&#x27;. */</span></span><br><span class="line">    <span class="comment">// &quot;lib&quot;: [],                             /* Specify library files to be included in the compilation. */</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span>                       <span class="comment">/* Allow javascript files to be compiled. */</span></span><br><span class="line">    <span class="comment">// &quot;checkJs&quot;: true,                       /* Report errors in .js files. */</span></span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react&quot;</span><span class="punctuation">,</span>                           <span class="comment">/* Specify JSX code generation: &#x27;preserve&#x27;, &#x27;react-native&#x27;, or &#x27;react&#x27;. */</span></span><br><span class="line">    <span class="comment">// &quot;declaration&quot;: true,                   /* Generates corresponding &#x27;.d.ts&#x27; file. */</span></span><br><span class="line">    <span class="comment">// &quot;declarationMap&quot;: true,                /* Generates a sourcemap for each corresponding &#x27;.d.ts&#x27; file. */</span></span><br><span class="line">    <span class="comment">// &quot;sourceMap&quot;: true,                     /* Generates corresponding &#x27;.map&#x27; file. */</span></span><br><span class="line">    <span class="comment">// &quot;outFile&quot;: &quot;./&quot;,                       /* Concatenate and emit output to single file. */</span></span><br><span class="line">    <span class="comment">// &quot;outDir&quot;: &quot;./&quot;,                        /* Redirect output structure to the directory. */</span></span><br><span class="line">    <span class="comment">// &quot;rootDir&quot;: &quot;./&quot;,                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */</span></span><br><span class="line">    <span class="comment">// &quot;composite&quot;: true,                     /* Enable project compilation */</span></span><br><span class="line">    <span class="comment">// &quot;removeComments&quot;: true,                /* Do not emit comments to output. */</span></span><br><span class="line">    <span class="comment">// &quot;noEmit&quot;: true,                        /* Do not emit outputs. */</span></span><br><span class="line">    <span class="comment">// &quot;importHelpers&quot;: true,                 /* Import emit helpers from &#x27;tslib&#x27;. */</span></span><br><span class="line">    <span class="comment">// &quot;downlevelIteration&quot;: true,            /* Provide full support for iterables in &#x27;for-of&#x27;, spread, and destructuring when targeting &#x27;ES5&#x27; or &#x27;ES3&#x27;. */</span></span><br><span class="line">    <span class="comment">// &quot;isolatedModules&quot;: true,               /* Transpile each file as a separate module (similar to &#x27;ts.transpileModule&#x27;). */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Strict Type-Checking Options */</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span>                           <span class="comment">/* 严格类型检查选项 Enable all strict type-checking options. */</span></span><br><span class="line">    <span class="attr">&quot;noImplicitAny&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span>                 <span class="comment">/* Raise error on expressions and declarations with an implied &#x27;any&#x27; type. */</span></span><br><span class="line">    <span class="comment">// &quot;strictNullChecks&quot;: true,              /* Enable strict null checks. */</span></span><br><span class="line">    <span class="comment">// &quot;strictFunctionTypes&quot;: true,           /* Enable strict checking of function types. */</span></span><br><span class="line">    <span class="comment">// &quot;strictBindCallApply&quot;: true,           /* Enable strict &#x27;bind&#x27;, &#x27;call&#x27;, and &#x27;apply&#x27; methods on functions. */</span></span><br><span class="line">    <span class="comment">// &quot;strictPropertyInitialization&quot;: true,  /* Enable strict checking of property initialization in classes. */</span></span><br><span class="line">    <span class="comment">// &quot;noImplicitThis&quot;: true,                /* Raise error on &#x27;this&#x27; expressions with an implied &#x27;any&#x27; type. */</span></span><br><span class="line">    <span class="comment">// &quot;alwaysStrict&quot;: true,                  /* Parse in strict mode and emit &quot;use strict&quot; for each source file. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Additional Checks */</span></span><br><span class="line">    <span class="comment">// &quot;noUnusedLocals&quot;: true,                /* Report errors on unused locals. */</span></span><br><span class="line">    <span class="comment">// &quot;noUnusedParameters&quot;: true,            /* Report errors on unused parameters. */</span></span><br><span class="line">    <span class="comment">// &quot;noImplicitReturns&quot;: true,             /* Report error when not all code paths in function return a value. */</span></span><br><span class="line">    <span class="comment">// &quot;noFallthroughCasesInSwitch&quot;: true,    /* Report errors for fallthrough cases in switch statement. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Module Resolution Options */</span></span><br><span class="line">    <span class="comment">// &quot;moduleResolution&quot;: &quot;node&quot;,            /* Specify module resolution strategy: &#x27;node&#x27; (Node.js) or &#x27;classic&#x27; (TypeScript pre-1.6). */</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span>                       <span class="comment">/* Base directory to resolve non-absolute module names. */</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>             <span class="comment">/* 设置模块名到文件路径的映射  */</span></span><br><span class="line">      <span class="attr">&quot;@app&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@app/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@common&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;module_xxx/lib&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@common/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;module_xxx/lib/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span>                           <span class="comment">/* A series of entries which re-map imports to lookup locations relative to the &#x27;baseUrl&#x27;. */</span></span><br><span class="line">    <span class="comment">// &quot;rootDirs&quot;: [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */</span></span><br><span class="line">    <span class="comment">// &quot;typeRoots&quot;: [],                       /* List of folders to include type definitions from. */</span></span><br><span class="line">    <span class="comment">// &quot;types&quot;: [],                           /* Type declaration files to be included in compilation. */</span></span><br><span class="line">    <span class="attr">&quot;allowSyntheticDefaultImports&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span>  <span class="comment">/* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span>                   <span class="comment">/* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies &#x27;allowSyntheticDefaultImports&#x27;. */</span></span><br><span class="line">    <span class="comment">// &quot;preserveSymlinks&quot;: true,              /* Do not resolve the real path of symlinks. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Source Map Options */</span></span><br><span class="line">    <span class="comment">// &quot;sourceRoot&quot;: &quot;&quot;,                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */</span></span><br><span class="line">    <span class="comment">// &quot;mapRoot&quot;: &quot;&quot;,                         /* Specify the location where debugger should locate map files instead of generated locations. */</span></span><br><span class="line">    <span class="comment">// &quot;inlineSourceMap&quot;: true,               /* Emit a single file with source maps instead of having a separate file. */</span></span><br><span class="line">    <span class="comment">// &quot;inlineSources&quot;: true,                 /* Emit the source alongside the sourcemaps within a single file; requires &#x27;--inlineSourceMap&#x27; or &#x27;--sourceMap&#x27; to be set. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Experimental Options */</span></span><br><span class="line">    <span class="comment">// &quot;experimentalDecorators&quot;: true,        /* Enables experimental support for ES7 decorators. */</span></span><br><span class="line">    <span class="comment">// &quot;emitDecoratorMetadata&quot;: true,         /* Enables experimental support for emitting type metadata for decorators. */</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;es2015&quot;</span><span class="punctuation">,</span> <span class="string">&quot;es2017&quot;</span><span class="punctuation">,</span> <span class="string">&quot;es2018.promise&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;node_modules&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="jsconfig-json"><a href="#jsconfig-json" class="headerlink" title="jsconfig.json"></a>jsconfig.json</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">/* 控制编译过程 */</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es6&quot;</span><span class="punctuation">,</span> <span class="comment">/* 指定ECMAScript目标版本 */</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span> <span class="comment">/* 指定生成哪个模块系统 */</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noImplicitAny&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;allowSyntheticDefaultImports&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">/* 允许从没有默认导出的模块进行默认导入。这不影响代码输出，只是类型检查。 */</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">/* 启用CommonJS和ES模块之间的互操作性。这个选项会隐含地设置 allowSyntheticDefaultImports 为 true。 */</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-native&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@app&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@app/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./*&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="comment">/* 指定哪些文件被包含在项目中 */</span></span><br><span class="line">    <span class="string">&quot;src/**/*&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="comment">/* 排除哪些文件 */</span></span><br><span class="line">    <span class="string">&quot;node_modules&quot;</span><span class="punctuation">,</span> <span class="string">&quot;babel.config.js&quot;</span><span class="punctuation">,</span> <span class="string">&quot;metro.config.js&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="babel-config-js"><a href="#babel-config-js" class="headerlink" title="babel.config.js"></a>babel.config.js</h2><p>用于将ES6+代码转换为向后兼容的JS版本，在 babel.config.js 文件中，你可以指定一系列的插件和预设，以控制 Babel 的转换过程。例如，你可以使用 @babel&#x2F;preset-env 预设来自动转换 ES6+ 代码，或者使用 @babel&#x2F;plugin-transform-runtime 插件来自动优化你的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function"><span class="params">api</span> =&gt;</span> &#123;</span><br><span class="line">  api.<span class="property">cache</span>.<span class="title function_">forever</span>()</span><br><span class="line">  <span class="keyword">const</span> plugins = [</span><br><span class="line">    [<span class="string">&quot;module-resolver&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">root</span>: [<span class="string">&quot;.&quot;</span>],</span><br><span class="line">      <span class="attr">extensions</span>: [<span class="string">&#x27;.ios.js&#x27;</span>, <span class="string">&#x27;.android.js&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.tsx&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>],</span><br><span class="line">      <span class="attr">alias</span>: &#123;</span><br><span class="line">        <span class="string">&quot;@app&quot;</span>: [<span class="string">&quot;./&quot;</span>],</span><br><span class="line">        <span class="string">&quot;@app/*&quot;</span>: [<span class="string">&quot;./*&quot;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>, <span class="string">&#x27;module:metro-react-native-babel-preset&#x27;</span>], <span class="comment">//指定定义好的插件集合</span></span><br><span class="line">    <span class="attr">plugins</span>: plugins <span class="comment">//指定一组插件</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="metro-config-js"><a href="#metro-config-js" class="headerlink" title="metro.config.js"></a>metro.config.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">resolver</span>: &#123; <span class="comment">//</span></span><br><span class="line">    <span class="attr">assetExts</span>: [<span class="string">&#x27;bmp&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>, <span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;jpeg&#x27;</span>, <span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;svg&#x27;</span>], <span class="comment">//指定应该被视为资源的文件扩展名</span></span><br><span class="line">    <span class="attr">sourceExts</span>: [<span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;json&#x27;</span>, <span class="string">&#x27;ts&#x27;</span>, <span class="string">&#x27;tsx&#x27;</span>, <span class="string">&#x27;jsx&#x27;</span>], <span class="comment">//指定应该被视为源代码的文件扩展名</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8081</span>, <span class="comment">//配置服务端口</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watchFolders</span>: [<span class="string">&#x27;/path/to/folder&#x27;</span>], <span class="comment">//监视额外的文件夹</span></span><br><span class="line">  <span class="attr">transformer</span>: &#123; <span class="comment">//指定转换器</span></span><br><span class="line">    <span class="attr">getTransformOptions</span>: <span class="keyword">async</span> () =&gt; (&#123;</span><br><span class="line">      <span class="attr">transform</span>: &#123;</span><br><span class="line">        <span class="attr">experimentalImportSupport</span>: <span class="literal">false</span>, <span class="comment">//禁用实验性的import支持</span></span><br><span class="line">        <span class="attr">inlineRequires</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;android：#Android 项目&lt;/li&gt;
&lt;li&gt;ios：&lt;/li&gt;
&lt;li&gt;node_modules： 项目依赖&lt;/li&gt;
&lt;li&gt;app.json： 描述app信息&lt;/li&gt;
&lt;li&gt;index.js： 入口文件&lt;/li&gt;
&lt;li&gt;package.j</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://airshu.github.io/categories/JavaScript/"/>
    
    <category term="ReactNative" scheme="http://airshu.github.io/categories/JavaScript/ReactNative/"/>
    
    
    <category term="React Native" scheme="http://airshu.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>Git使用笔记</title>
    <link href="http://airshu.github.io/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/Git/Git%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://airshu.github.io/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/Git/Git%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-09T09:31:38.330Z</published>
    <updated>2024-03-09T09:31:38.330Z</updated>
    
    <content type="html"><![CDATA[<br><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>Working Space&#x2F;Working Directory：工作区&#x2F;工作目录，平时存放项目代码的地方</li><li>Index&#x2F;Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li><li>Local Repository：本地仓库</li><li>Stash：用于保存工作区的临时状态，方便后续恢复</li><li>Remote Repository：远程仓库</li></ul><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">git init   #  输出 Initialized empty Git repository in .git/    建立空仓库</span><br><span class="line">git add .  #添加到仓库  把所有修改提交到暂存区(Stage)</span><br><span class="line">git commit -m &quot;提交注释&quot; #提交到仓库    把暂存区的所有修改提交到分支</span><br><span class="line">git push remote_branch local_branch #将本地库提交到远程库</span><br><span class="line">git status #查看修改状态</span><br><span class="line"></span><br><span class="line">git log #显示从最近到最远的提交日志</span><br><span class="line">git log -2： #查看最近几条记录</span><br><span class="line"></span><br><span class="line">git clone git@github.com:xxx/gitskills.git #克隆仓库</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">checkout 检查工作目录代码与本地仓库中的代码的差异</span></span><br><span class="line">git checkout -b dev #创建并切换分支，相当于下面的两句</span><br><span class="line">git branch experimental     #创建分支</span><br><span class="line">git checkout experimental #切换到分支</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git fetch -u origin master #拉取远程仓库名为origin的master分支代码到本地仓库，并不修改本地工作目录的代码，如果要修改，则进行git merge变更合并</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">merge 将远程仓库的变更，更新到本地工作目录中</span></span><br><span class="line">git merge 分支名 #合并分支到当前分支上</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">git pull相当于git fetch + git merge</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">git pull --rebase 相当于 git fetch + git rebase</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">remote 用于管理远程仓库</span></span><br><span class="line">git remote -v #查看现有的远程仓库</span><br><span class="line"><span class="meta">#</span><span class="language-bash">添加一个远程仓库</span></span><br><span class="line">git remote add &lt;仓库名字&gt; &lt;仓库的URL&gt;</span><br><span class="line">git remote add pb git://github.com/paulboone/ticgit.git #添加一个远程仓库 并用pb命名。</span><br><span class="line">git remote rm paul #删除远程仓库</span><br><span class="line">git remote rename pb paul #重名远程仓库 本地也会跟着修改</span><br><span class="line">git remote set-url origin xxx.git # 修改远程仓库</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">git push -u &lt;远程仓库名字&gt; &lt;远程仓库的某一分支名字&gt;</span></span><br><span class="line">git push -u test mater  #将本地仓库的变更推送远程仓库的master分支</span><br><span class="line">git push origin 标签名 #推送标签到远程仓库</span><br><span class="line">git push origin --tags #推送所有标签到远程仓库</span><br><span class="line">git push origin :refs/tags/标签名 #从远程仓库中删除标签</span><br><span class="line">git push origin --delete &lt;branchname&gt;     #删除远程分支</span><br><span class="line">git push origin :&lt;branchName&gt;     #删除远程分支</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">暂存操作：</span></span><br><span class="line">git stash 暂存当前修改</span><br><span class="line">git stash apply 恢复最近的一次暂存</span><br><span class="line">git stash pop 恢复暂存并删除暂存记录</span><br><span class="line">git stash list 查看暂存列表</span><br><span class="line">git stash drop 暂存名(例：stash@&#123;0&#125;) 移除某次暂存</span><br><span class="line">git stash clear 清除暂存</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">回退操作：</span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">Git服务有一个叫HEAD的版本指针，当用户申请还原数据时，其实就是将HEAD指针指向到某个特定的提交版本。</span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">git reset 通过把分支记录回退几个提交记录来实现撤销改动。你可以将这想象成“改写历史”。git reset 向上移动分支，原来指向的提交记录就跟从来没有提交过一样。在reset后， C2 所做的变更还在，但是处于未加入暂存区状态。</span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">虽然在你的本地分支中使用 git reset 很方便，但是这种“改写历史”的方法对大家一起使用的远程分支是无效的哦！</span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">为了撤销更改并分享给别人，我们需要使用 git revert。新提交记录 C2<span class="string">&#x27; 引入了更改 —— 这些更改刚好是用来撤销 C2 这个提交的。也就是说 C2&#x27;</span> 的状态与 C1 是相同的。</span></span><br><span class="line"></span><br><span class="line">git reset --hard HEAD^ #回退到上一个版本</span><br><span class="line">git reset --hard ahdhs1(commit_id) #回退到某个版本，撤销git commit，撤销git add，删除编辑器改动代码</span><br><span class="line">git reset --soft (commit id) #撤销git commit，不撤销git add，保留编辑器改动代码</span><br><span class="line">git reset --mixed (commit id) #撤销git commit，撤销git add，保留编辑器改动代码</span><br><span class="line">git checkout -- file  #撤销修改的文件(如果文件加入到了暂存区，则回退到暂存区的，如果文件加入到了版本库，则还原至加入版本库之后的状态)</span><br><span class="line">git reset HEAD file #撤回暂存区的文件修改到工作区</span><br><span class="line">git revert HEAD</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">标签操作：</span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">tag的作用是方便用户回滚操作，只需要记住tag的名字就能迅速回滚</span></span><br><span class="line">git tag #列出所有标签列表，可以按照标签进行checkout</span><br><span class="line">git tag 标签名 #添加标签(默认对当前版本)</span><br><span class="line">git tag 标签名 commit_id #对某一提交记录打标签</span><br><span class="line"></span><br><span class="line">git tag -a 标签名 -m &#x27;描述&#x27; #创建新标签并增加备注</span><br><span class="line">git show 标签名 #查看标签信息</span><br><span class="line">git tag -d 标签名 #删除本地标签</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">git <span class="built_in">rm</span>提交删除文件的变更到暂存区</span></span><br><span class="line"></span><br><span class="line">git diff test.txt 本地工作目录中到文件与本地仓库中的文件对比</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">时光机，查看提交记录</span></span><br><span class="line">git reflog </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">取消xxx的修改内容</span></span><br><span class="line">git restore xxx</span><br></pre></td></tr></table></figure><h3 id="Git分支管理"><a href="#Git分支管理" class="headerlink" title="Git分支管理"></a>Git分支管理</h3><p>master分支一般用于发布新版本，dev分支用于开发，每个人从dev分支创建自己的个人分支，开发完合并到dev分支，最后合并到master分支。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git branch   查看所有已存在的分支</span><br><span class="line">git branch -a 查看远程分支</span><br><span class="line">git branch -v 查看所有分支的最后一次操作</span><br><span class="line">git branch -vv 查看当前分支</span><br><span class="line">git brabch -b 分支名 origin/分支名 //创建远程分支到本地</span><br><span class="line">git branch --merged //查看别的分支和当前分支合并过的分支</span><br><span class="line">git branch --no-merged //查看未与当前分支合并的分支</span><br><span class="line">git branch -d xxx 删除本地分支</span><br><span class="line">git branch -D crazy-idea 强制删除分支</span><br><span class="line"></span><br><span class="line">git merge 功能1   #合并功能1分支到当前分支</span><br><span class="line">git branch -d 功能1   # 删除功能1分支（当前不能在功能1分支、删除的是本地分支）</span><br></pre></td></tr></table></figure><br><h3 id="gitignore文件"><a href="#gitignore文件" class="headerlink" title="gitignore文件"></a>gitignore文件</h3><p>用来存储不需要进行版本管理的文件</p><h3 id="文件匹配规则"><a href="#文件匹配规则" class="headerlink" title="文件匹配规则"></a>文件匹配规则</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*.log  # 表示忽略项目中所有以.log结尾的文件</span><br><span class="line">123?.log  # 忽略所有以123加任意一个字符，且以.log结尾的文件</span><br><span class="line">/error.log  # 忽略根目录下的error.log文件</span><br><span class="line">**/java/  # 忽略所有java目录下的所有文件</span><br><span class="line">!/error.log  # 表示在前面的匹配规则中，被忽略了的文件，你不想它被忽略，那么就可以在文件前面加叹号</span><br></pre></td></tr></table></figure><h2 id="拉取体积很大的仓库"><a href="#拉取体积很大的仓库" class="headerlink" title="拉取体积很大的仓库"></a>拉取体积很大的仓库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">git clone --depth 1 仓库地址</span><br><span class="line">git fetch --unshallow</span><br><span class="line"></span><br><span class="line">#以上方式只有主分支</span><br><span class="line"></span><br><span class="line">#拉取所有分支</span><br><span class="line">git fetch -all</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#拉取某一个分支</span><br><span class="line">git branch -a</span><br><span class="line">git remote set-branches origin &#x27;远程分支名称’</span><br><span class="line">git fetch --depth 1 origin 远程分支名称</span><br><span class="line">git checkout ‘远程分支名称’</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><h2 id="仓库之间的迁移"><a href="#仓库之间的迁移" class="headerlink" title="仓库之间的迁移"></a>仓库之间的迁移</h2><h3 id="整个仓库迁移"><a href="#整个仓库迁移" class="headerlink" title="整个仓库迁移"></a>整个仓库迁移</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone --bare 旧仓库地址</span><br><span class="line">git push --mirror 新仓库地址</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="迁移一个分支"><a href="#迁移一个分支" class="headerlink" title="迁移一个分支"></a>迁移一个分支</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add 本地分支 新仓库地址  //关联远程分支</span><br><span class="line">git push 远程分支 本地分支    //提交分支</span><br></pre></td></tr></table></figure><h2 id="SourceTree"><a href="#SourceTree" class="headerlink" title="SourceTree"></a>SourceTree</h2><h3 id="Could-not-read-from-remote-repository解决办法"><a href="#Could-not-read-from-remote-repository解决办法" class="headerlink" title="Could not read from remote repository解决办法"></a>Could not read from remote repository解决办法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line"><span class="meta"># </span><span class="language-bash">确认将公钥添加到服务器</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">验证</span></span><br><span class="line">ssh -T git@github.com</span><br><span class="line">ssh-add id-rsa</span><br></pre></td></tr></table></figure><h2 id="Sourcetree使用"><a href="#Sourcetree使用" class="headerlink" title="Sourcetree使用"></a>Sourcetree使用</h2><h3 id="Permission-denied错误"><a href="#Permission-denied错误" class="headerlink" title="Permission denied错误"></a>Permission denied错误</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git@github.com: Permission denied (publickey).</span><br><span class="line"></span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line"></span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure><p>Mac每次重启之后就无法在Sourcetree连接服务器了，原因是私钥没有添加到钥匙链中，需要执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">ssh-add参数</span></span><br><span class="line">-D：删除ssh-agent中的所有密钥.</span><br><span class="line">-d：从ssh-agent中的删除密钥</span><br><span class="line">-e pkcs11：删除PKCS#11共享库pkcs1提供的钥匙。</span><br><span class="line">-s pkcs11：添加PKCS#11共享库pkcs1提供的钥匙。</span><br><span class="line">-L：显示ssh-agent中的公钥</span><br><span class="line">-l：显示ssh-agent中的密钥</span><br><span class="line">-t life：对加载的密钥设置超时时间，超时ssh-agent将自动卸载密钥</span><br><span class="line">-X：对ssh-agent进行解锁</span><br><span class="line">-x：对ssh-agent进行加锁</span><br><span class="line"></span><br><span class="line">ssh-add -K !/.ssh/id_rsa</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">查看ssh-agent中的密钥</span></span><br><span class="line">ssh-add -l</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="移动HEAD"><a href="#移动HEAD" class="headerlink" title="移动HEAD"></a>移动HEAD</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 切换到指定id</span><br><span class="line">git checkout commit_id</span><br><span class="line"># 指定提交</span><br><span class="line">git branch -f branch_name HEAD~1</span><br><span class="line"># 上一个提交</span><br><span class="line">git branch -f branch_name HEAD^ </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;br&gt;


&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Working Space&amp;#x2F;Working Directory：工作区&amp;#x2F;工作目</summary>
      
    
    
    
    <category term="技术开发" scheme="http://airshu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="Git" scheme="http://airshu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/Git/"/>
    
    
    <category term="Git" scheme="http://airshu.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>package.json说明</title>
    <link href="http://airshu.github.io/wiki/JavaScript/ReactNative/package.json/"/>
    <id>http://airshu.github.io/wiki/JavaScript/ReactNative/package.json/</id>
    <published>2024-03-09T09:31:38.329Z</published>
    <updated>2024-03-09T09:31:38.329Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;app_name&quot;</span><span class="punctuation">,</span><span class="comment">//应用名</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.1.1&quot;</span><span class="punctuation">,</span><span class="comment">//版本，用于展示</span></span><br><span class="line">    <span class="attr">&quot;versionCode&quot;</span><span class="punctuation">:</span> <span class="number">99</span><span class="punctuation">,</span><span class="comment">//版本号</span></span><br><span class="line">    <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">//常用的命令封装</span></span><br><span class="line">        <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;clear&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;publish&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;android&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ios&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;engines&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;repository&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bugs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;homepage&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="comment">//项目的依赖</span></span><br><span class="line">        <span class="attr">&quot;react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;18.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;react-native&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.71.7&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;resolutions&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span> <span class="comment">/* 强制依赖， 只在yarn中有效，npm不支持此字段 */</span></span><br><span class="line">        <span class="attr">&quot;@types/react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^17&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="comment">//开发的时候依赖</span></span><br><span class="line"></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://airshu.github.io/categories/JavaScript/"/>
    
    <category term="ReactNative" scheme="http://airshu.github.io/categories/JavaScript/ReactNative/"/>
    
    
    <category term="React Native" scheme="http://airshu.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>基础知识</title>
    <link href="http://airshu.github.io/wiki/JavaScript/ReactNative/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://airshu.github.io/wiki/JavaScript/ReactNative/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2024-03-09T09:31:38.329Z</published>
    <updated>2024-03-09T09:31:38.329Z</updated>
    
    <content type="html"><![CDATA[<p>facebook先开源了React，然后基于React，开源了可以在App上用的React Native。先了解一下React<a href="http://www.ruanyifeng.com/blog/2015/03/react.html">React 入门实例教程</a></p><p>React是一个JavaScript库，用于简单的创建用户界面；React Native则可以用于手机Android、iOS应用。</p><p>开发React需要引入：</p><ul><li>react.js：核心库</li><li>react-dom.js：与DOM相关</li><li>browser.min.js：将JSX转为JavaScript语法</li></ul><h2 id="原生组件和核心组件"><a href="#原生组件和核心组件" class="headerlink" title="原生组件和核心组件"></a>原生组件和核心组件</h2><p>React Native允许用户为Android和iOS构建自己的Native Components（原生组件），RN自己也包括一组基本的，随时可用的原生组件（核心组件）</p><p><strong>核心组件</strong></p><ul><li>View</li><li>Text</li><li>Image</li><li>ScrollView</li><li>TextInput</li></ul><h3 id="函数式组件与Class组件"><a href="#函数式组件与Class组件" class="headerlink" title="函数式组件与Class组件"></a>函数式组件与Class组件</h3><p>优先使用函数式组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">HelloWorldApp</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">flex:</span> <span class="attr">1</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">justifyContent:</span> &#x27;<span class="attr">center</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">alignItems:</span> &#x27;<span class="attr">center</span>&#x27;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloWorldApp</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">flex:</span> <span class="attr">1</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">justifyContent:</span> &quot;<span class="attr">center</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">alignItems:</span> &quot;<span class="attr">center</span>&quot;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h2><p><img src="/wiki/JavaScript/ReactNative/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/component-lifecycle.jpg"></p><ul><li>mounting:已插入真实DOM</li><li>updating:正在被重新渲染</li><li>unmounting:已移出真实DOM</li></ul><p>React为每个状态提供了两种处理函数，will函数载进入状态之前调用，did函数在进入状态之后调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">componentWillMount</span>()</span><br><span class="line"><span class="title function_">componentDidMount</span>()</span><br><span class="line"><span class="title function_">componentWillUpdate</span>(object nextProps, object nextState)</span><br><span class="line"><span class="title function_">componentDidUpdate</span>(object prevProps, object prevState)</span><br><span class="line"><span class="title function_">componentWillUnmount</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊状态的处理函数</span></span><br><span class="line"><span class="title function_">componentWillReceiveProps</span>(object nextProps)：已加载组件收到新的参数时调用</span><br><span class="line"><span class="title function_">shouldComponentUpdate</span>(object nextProps, object nextState)：组件判断是否重新渲染时调用</span><br></pre></td></tr></table></figure><h2 id="专有名词"><a href="#专有名词" class="headerlink" title="专有名词"></a>专有名词</h2><h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><p>JSX 仅仅只是 React.createElement(component, props, …children) 函数的语法糖.</p><p><a href="https://zh-hans.legacy.reactjs.org/docs/jsx-in-depth.html#gatsby-focus-wrapper">https://zh-hans.legacy.reactjs.org/docs/jsx-in-depth.html#gatsby-focus-wrapper</a></p><p><img src="/wiki/JavaScript/ReactNative/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/framework.png"></p><ul><li><p>React：纯JS框架，用 JS 实现了 Virtual Dom, 实现了数据驱动编程的模式, 而且 React 还提出了独特的 JSX 语法, 实现了在 JS 就可以写 HTML 和 CSS 代码, 配合虚拟 DOM 就实现了基于 MVC 的前端框架</p></li><li><p>Babel:Babel 是一个高度可配置的编译器，它允许我们使用较新的 JavaScript 语言功能（以及扩展，如 JSX），将“向下”编译为更广泛的引擎支持的较旧版本的 JavaScript</p></li><li><p>React Native：JavaScript Core + React.js + Bridges</p></li><li><p>JavaScriptCore：JS引擎，用来解释和执行JavaScript代码。在React Native中，负责bundle产出的JS代码的解析和执行</p></li><li><p>JS Engine：React Native需要一个JS运行环境，RN会把应用的JS代码编译成一个JS文件（x.x.bundle），RN框架的目标就是解释运行这个JS脚本文件，如果是Native扩展的API，则直接通过bridge调用Native方法，最基础的比如绘制UI界面，映射Virtual DOM到真实的UI组件中。</p></li><li><p>Hermes Engine：新一代JavaScript引擎，相对于JavaScriptCore和V8引擎，各方面性能显著提升。</p></li><li><p>Bridge：</p><ul><li>RCTRootView：</li><li>RCTBridge：<ul><li>加载和初始化专用类, 用于前期 JS 的初始化和原生代码的加载</li><li>负责加载各个 Bridge 模块供 JS 调用</li><li>找到并注册实现了 RCTBridgeModule protocol 的类</li><li>创建持有 RCTBatchedBridge</li></ul></li><li>RCTBatchedBridge：负责 Native 和 JS 之间的相互调用, 也就是信息通信</li><li>RCTJavaScriptLoader：实现远程代码的核心, 热更新, 开发环境代码加载. 静态 jsbundle 加载</li><li>RCTContextExecutor：封装了 JS 和 Native 代码的互相调用逻辑</li><li>RCTModuleData：加载管理所有与 JS 交互的原生代码, 把交互代码封装成 JS 模块</li><li>RCTModuleMethod：<ul><li>记录所有原生代码的导出函数地址, 同时生成对应的字符串映射到改函数地址</li><li>翻译所有 J2N call</li></ul></li><li>MessageQueue：</li></ul></li><li><p>metro：facebook官方推出的打包工具，构建代码和资源</p></li><li><p>JSI：JavaScript Interface，JSI 是一个轻量级的通用的 API 框架，可以应用于任意的 JavaScript virtual machine</p></li><li><p>fabric：UI Manager新名称，整个框架中新UI层</p></li><li><p>codepush：用于热更新</p></li></ul><p><img src="/wiki/JavaScript/ReactNative/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/framework1.webp"></p><ul><li>JS Thread：读取和编译所有JavaScript代码</li><li>UI Thread：原生渲染和调用</li><li>Shadow Thread：通过Yoga引擎计算布局，将结果发送给Native UI</li></ul><h2 id="常用的API"><a href="#常用的API" class="headerlink" title="常用的API"></a>常用的API</h2><ul><li>ReactContext：继承于ContextWrapper，是React Native应用的上下文，管理着CatalystInstance以及三大线程（UIThread、NativeModulesThread、JSThread）<ul><li>ReactApplicationContext: ReactContext的子类，提供RN应用的上下文</li><li>管理原生模块和视图</li><li>包含一个CatalystInstance，负责JS的执行</li><li>用于在JS和原生代码之间的事件传递</li></ul></li><li>ReactInstanceManager：总的管理类，管理ReactPackage、ReactContext、ReactRootView，同时还可以设置JavaScript引擎<ul><li>控制生命周期</li><li>创建和销毁ReactContext</li><li>加载React应用，可以从服务器、本地文件、assets中加载JS bundle</li><li>负责原生模块和视图，负责处理Android的生命周期事件</li></ul></li><li>ReactRootView：React Native渲染的原生容器，继承于FrameLayout<ul><li>承载React应用的UI，所有React组件都会在这个View中渲染</li><li>启动React应用，通过调用startReactApplication方法启动一个RN应用</li><li>处理Android的触摸事件，将其转换为React事件</li></ul></li><li>CatalystInstance：代表JS执行环境。Java层、C++层、JavaScript层通信的总管理类，管理着Java层、JavaScript层Module映射表与回调，是三端通信的桥梁。实现类为CatalystInstanceImpl，支持向JavaScript注入全局变量、动态加载脚本文件、获取NativeModules &amp; JSModules<ul><li>runJSBundle：执行JS代码</li><li>包含一个NativeModuleRegistry，用于管理RN的原生模块。当JS调用一个原生模块方法时，CatalystInstance会将这个调用转发给对应的原生模块</li><li>callFunction：调用JS函数</li></ul></li><li>ReactBridge：通信桥，三端通信的桥梁<ul><li>执行JS代码</li><li>调用原生模块</li><li>调用JS函数</li><li>传递事件</li></ul></li><li>JavaScriptModule：JS Module，负责JavaScript到Java的映射调用格式生命，由CatalystInstance统一管理</li><li>NativeModule：Java Module，负责Java到JavaScript的映射调用格式声明，由CatalystInstance统一管理</li><li>JavaScriptModuleRegistry:JavaScriptModule注册表，负责管理与查找JavaScriptModule</li><li>JSCExecutor.cpp: 脚本引擎，封装了Webkit的JavaScriptCore</li><li>UIManager：处理UI的渲染，JavaScript层通过C++层把创建的View的请求发送给Java层的UIManagerModule</li><li>Android常用API：<ul><li>ReactPackage: 用于注册<strong>原生模块</strong>和<strong>视图管理器</strong>。注册到ReactInstanceManager<ul><li>createNativeModules：返回一个原生模块列表，并将她们添加到NativeModuleRegistry</li><li>createViewManagers：返回视图管理器列表，RN会调用这个方法来获取你的视图管理器，并将它们添加到UIManagerModule</li><li>TurboReactPackage：允许原生模块在需要时才被初始化</li><li>MainReactPackage: 包含默认支持的package，对应modules文件夹，比如toast、storeage等等，可以直接在js端使用<ul><li>常用Modules：</li><li>AppearanceModule：</li><li>CameraRollManager：允许JS访问相机和摄像头</li><li>ClipboardModule：剪切板操作</li><li>DatePickerDialogModule：原生日期选择</li><li>DeviceInfoModule：设备信息</li><li>DialogModule：显示原生弹窗</li><li>NetworkingModule：网络访问</li><li>PermissionsModule：权限管理</li><li>ShareModule：系统分享</li><li>StatusBarModule：状态栏设置</li><li>AsyncStorageModule：存储键值对</li><li>AndroidInfoModule：获取Android的一些常量信息，比如厂商、版本信息等</li><li>ToastModule：原生toast</li></ul></li></ul></li><li>ReactContextBaseJavaModule: 一个package对应一个module，里面会实现native的方法给js用</li><li>ReactNativeHost：对js数据的包装，负责创建ReactInstanceManager，方便用户使用，一般要实现getPackages方法返回所有bundle<ul><li>getPackages：返回包含所有React包的列表</li><li>管理生命周期，在应用生命周期发生变化时通知ReactInstanceManager</li><li>getJSMainModuleName：返回JS主模块的名称，是NR的入口点。默认情况下，返回”index“，则意味着加载index.js的文件作为应用的入口点</li><li>getBundleAssetName：返回JS bundle的asset名称，默认情况下返回“index.android.bundle”</li><li>getUseDeveloperSupport：返回是否使用开发者支持，默认情况下返回true</li><li>getRedBoxHandler：返回RN应用中的红屏错误，可以重写这个方法进行监听</li><li>getJSBundleFile：返回JS bundle的文件路径，如果返回null，则会使用getBundleAssetName返回的asset文件</li></ul></li><li>ReactActivity：封装好的Activity，方便使用</li><li>ReactFragment：</li><li>ReactActivityDelegate：委托类，可以实现各种回调</li><li>ReactDelegate：ReactActivityDelegate的成员变量</li><li>ReactApplication：如果使用ReactActivity，则Application需要实现这个接口，将package进行注册</li></ul></li></ul><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li>npm</li><li>npx</li><li>yarn</li></ul><h2 id="ES6特性"><a href="#ES6特性" class="headerlink" title="ES6特性"></a>ES6特性</h2><p>class</p><p>module</p><p>export</p><p>import</p><p>Named imports and exports</p><p>Import from modules</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://juejin.cn/post/6916452544956858382">React Native 原理与实践</a></li><li><a href="https://github.com/sucese/react-native">https://github.com/sucese/react-native</a></li><li><a href="https://www.reactnative.express/">https://www.reactnative.express/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;facebook先开源了React，然后基于React，开源了可以在App上用的React Native。先了解一下React&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/03/react.html&quot;&gt;React 入门实例教程&lt;/</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://airshu.github.io/categories/JavaScript/"/>
    
    <category term="ReactNative" scheme="http://airshu.github.io/categories/JavaScript/ReactNative/"/>
    
    
    <category term="React Native" scheme="http://airshu.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>环境搭建</title>
    <link href="http://airshu.github.io/wiki/JavaScript/ReactNative/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://airshu.github.io/wiki/JavaScript/ReactNative/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2024-03-09T09:31:38.329Z</published>
    <updated>2024-03-09T09:31:38.329Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mac-环境搭建"><a href="#Mac-环境搭建" class="headerlink" title="Mac 环境搭建"></a>Mac 环境搭建</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">安装node</span></span><br><span class="line">brew install node</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">安装文件监控，方便开发</span></span><br><span class="line">brew install watchman</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">使用nrm工具切换淘宝源</span></span><br><span class="line">npx nrm use taobao</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">如果之后需要切换回官方源可使用</span></span><br><span class="line">npx nrm use npm</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">Yarn是Facebook提供的替代npm的工具，可以加速node模块的下载</span></span><br><span class="line">npm install -g yarn</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">安装java环境</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">安装Android开发环境</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">新建项目</span></span><br><span class="line">npx react-native init AwesomeProject</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">启动Metro</span></span><br><span class="line">npm start </span><br><span class="line">yarn start</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">运行Android端</span></span><br><span class="line">npm run android</span><br><span class="line">yarn android</span><br><span class="line">npm run ios</span><br><span class="line">yarn ios</span><br></pre></td></tr></table></figure><h2 id="端口配置"><a href="#端口配置" class="headerlink" title="端口配置"></a>端口配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">启动metro修改端口，建议使用这种方式</span></span><br><span class="line">npm run start --verbose -- --port 8082</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">默认会监听8081端口</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">配置环境变量指定端口，未验证是否有效</span></span><br><span class="line">export RCT_METRO_PORT=9091</span><br><span class="line">npx react-native start --port 9091</span><br></pre></td></tr></table></figure><h2 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h2><p>推荐使用nvm来做node多版本管理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">查看已安装的node版本</span></span><br><span class="line">nvm list</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">安装指定版本</span></span><br><span class="line">nvm install v12.18.3</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">卸载指定版本</span></span><br><span class="line">nvm uninstall v12.18.3</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">当前项目指定node版本</span></span><br><span class="line">nvm use v12.18.3</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">设置全局默认版本</span></span><br><span class="line">nvm alias default v12.18.3</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/crazycodeboy/RNStudyNotes">https://github.com/crazycodeboy/RNStudyNotes</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Mac-环境搭建&quot;&gt;&lt;a href=&quot;#Mac-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;Mac 环境搭建&quot;&gt;&lt;/a&gt;Mac 环境搭建&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://airshu.github.io/categories/JavaScript/"/>
    
    <category term="ReactNative" scheme="http://airshu.github.io/categories/JavaScript/ReactNative/"/>
    
    
    <category term="React Native" scheme="http://airshu.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>状态管理</title>
    <link href="http://airshu.github.io/wiki/JavaScript/ReactNative/%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
    <id>http://airshu.github.io/wiki/JavaScript/ReactNative/%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</id>
    <published>2024-03-09T09:31:38.329Z</published>
    <updated>2024-03-09T09:31:38.329Z</updated>
    
    
    
    
    <category term="JavaScript" scheme="http://airshu.github.io/categories/JavaScript/"/>
    
    <category term="ReactNative" scheme="http://airshu.github.io/categories/JavaScript/ReactNative/"/>
    
    
    <category term="React Native" scheme="http://airshu.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>RN常用的开源库</title>
    <link href="http://airshu.github.io/wiki/JavaScript/ReactNative/%E5%BC%80%E6%BA%90%E5%BA%93/RN%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BC%80%E6%BA%90%E5%BA%93/"/>
    <id>http://airshu.github.io/wiki/JavaScript/ReactNative/%E5%BC%80%E6%BA%90%E5%BA%93/RN%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BC%80%E6%BA%90%E5%BA%93/</id>
    <published>2024-03-09T09:31:38.329Z</published>
    <updated>2024-03-09T09:31:38.329Z</updated>
    
    <content type="html"><![CDATA[<h2 id="antd-mobile-rn"><a href="#antd-mobile-rn" class="headerlink" title="antd-mobile-rn"></a>antd-mobile-rn</h2><ul><li><a href="https://rn.mobile.ant.design/">https://rn.mobile.ant.design/</a></li></ul><p>antd-mobile-rn是一个基于React Native的UI组件库，由蚂蚁金服团队开发和维护。包含了许多常用的UI组件，如按钮、列表、输入框、导航栏、轮播图、对话框等。这些组件都遵循了Ant Design的设计规范，具有一致的视觉样式和交互行为。</p><h2 id="async-retry"><a href="#async-retry" class="headerlink" title="async-retry"></a>async-retry</h2><p>async-retry是一个用于在异步操作失败时进行重试的JavaScript库。它提供了一个简单的API，你可以使用它来包装一个异步函数，当这个函数抛出错误时，async-retry会自动重试这个函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> retry = <span class="built_in">require</span>(<span class="string">&#x27;async-retry&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 这里是你的异步操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">retry</span>(fetchData, &#123;</span><br><span class="line">  <span class="attr">retries</span>: <span class="number">5</span>,  <span class="comment">// 重试次数</span></span><br><span class="line">  <span class="attr">factor</span>: <span class="number">2</span>,  <span class="comment">// 每次重试之间的时间间隔将乘以这个因子</span></span><br><span class="line">  <span class="attr">minTimeout</span>: <span class="number">1000</span>,  <span class="comment">// 两次重试之间的最小时间间隔</span></span><br><span class="line">  <span class="attr">maxTimeout</span>: <span class="title class_">Infinity</span>,  <span class="comment">// 两次重试之间的最大时间间隔</span></span><br><span class="line">  <span class="attr">onRetry</span>: <span class="function"><span class="params">error</span> =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(error) &#125;  <span class="comment">// 在每次重试前调用</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><ul><li><a href="https://www.axios-http.cn/docs/intro">https://www.axios-http.cn/docs/intro</a></li></ul><p>网络请求库</p><h2 id="babel-jest"><a href="#babel-jest" class="headerlink" title="babel-jest"></a>babel-jest</h2><p>babel-jest是一个Jest插件，用于使用Babel转换你的JavaScript代码。当你在Jest测试中使用ES6或其他需要转换的JavaScript语法时，你需要使用babel-jest。</p><h2 id="Jest"><a href="#Jest" class="headerlink" title="Jest"></a>Jest</h2><ul><li><a href="https://jestjs.io/">https://jestjs.io/</a></li></ul><p>Jest是一个流行的JavaScript测试框架，由Facebook开发并开源。它被设计为提供完整的测试解决方案，包括单元测试、集成测试和快照测试。</p><h2 id="Metro"><a href="#Metro" class="headerlink" title="Metro"></a>Metro</h2><ul><li><a href="https://facebook.github.io/metro/">https://facebook.github.io/metro/</a></li></ul><p>Metro是Facebook开发的一个JavaScript模块打包器，用于React Native应用。它负责将你的JavaScript代码和依赖项打包成一个单一的文件，这个文件可以在React Native应用中运行。</p><p>Metro的主要功能包括：</p><ul><li><p>代码转换：Metro使用Babel将你的JavaScript代码转换为可以在React Native环境中运行的代码。</p></li><li><p>模块打包：Metro将你的所有JavaScript模块打包成一个单一的bundle文件。</p></li><li><p>资源管理：Metro可以处理图片和其他静态资源，将它们包含在bundle中。</p></li><li><p>热更新：Metro支持热更新，这意味着你可以在不重新打包整个应用的情况下，更新你的JavaScript代码。</p></li><li><p>源码映射：Metro可以生成源码映射，这对于调试和错误跟踪非常有用。</p></li></ul><h2 id="react-hook-form"><a href="#react-hook-form" class="headerlink" title="react-hook-form"></a>react-hook-form</h2><ul><li><a href="https://react-hook-form.com/">https://react-hook-form.com/</a></li></ul><p>react-hook-form是一个用于在React应用中处理表单的库。它使用React的钩子（Hooks）API，提供了一种简单、高效的方式来验证和收集表单数据。</p><h2 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h2><p>状态管理框架</p><h2 id="rematch"><a href="#rematch" class="headerlink" title="rematch"></a>rematch</h2><p>Rematch是一个基于Redux的状态管理库，它提供了一种更简单的方式来使用Redux。它有以下插件：</p><ul><li><p>@rematch&#x2F;core：它提供了Rematch的主要功能，包括定义models、创建store等。</p></li><li><p>@rematch&#x2F;select：它提供了一种简单的方式来创建和使用selectors。Selectors可以帮助你从store中选择和计算派生数据。</p></li><li><p>@rematch&#x2F;loading：它自动跟踪你的异步action的加载状态。这可以帮助你在UI中显示加载指示器。</p></li><li><p>@rematch&#x2F;updated：它提供了一种方式来跟踪你的state的更新状态。</p></li><li><p>@rematch&#x2F;persist：它提供了一种方式来持久化和恢复你的state。这可以帮助你在页面刷新或重新加载时保持用户的状态。</p></li><li><p>@rematch&#x2F;immer：它让你可以在reducers中使用Immer库来更简单地处理不可变状态。</p></li></ul><h2 id="react-native"><a href="#react-native" class="headerlink" title="react-native"></a>react-native</h2><ul><li><a href="https://reactnative.dev/">https://reactnative.dev/</a></li></ul><p>React Native是一个由Facebook开发的开源框架，用于构建跨平台的移动应用。它允许你使用JavaScript和React来编写本地移动应用，而无需学习Swift或Java。</p><h3 id="react-native-code-push"><a href="#react-native-code-push" class="headerlink" title="react-native-code-push"></a>react-native-code-push</h3><p>react-native-code-push是一个用于React Native应用的开源库，它允许开发者通过Microsoft的CodePush服务直接向用户的设备推送代码更新。</p><h3 id="react-native-fast-image"><a href="#react-native-fast-image" class="headerlink" title="react-native-fast-image"></a>react-native-fast-image</h3><p>它提供了比React Native内置的Image组件更高效的图片加载。</p><h3 id="react-native-get-random-values"><a href="#react-native-get-random-values" class="headerlink" title="react-native-get-random-values"></a>react-native-get-random-values</h3><p>它提供了一个实现了Web Crypto API的getRandomValues方法。这个方法可以生成一个包含随机数的类型化数组。在Web浏览器中，getRandomValues方法是Web Crypto API的一部分，用于生成加密安全的随机数。但在React Native中，Web Crypto API并不可用，因此我们需要react-native-get-random-values这个库来提供类似的功能。</p><h3 id="react-native-gesture-handler"><a href="#react-native-gesture-handler" class="headerlink" title="react-native-gesture-handler"></a>react-native-gesture-handler</h3><p>它提供了一种在JavaScript中处理触摸手势的方式。这个库的目标是提供一个更强大、更灵活的手势系统，以替代React Native内置的手势系统。</p><h3 id="react-native-highlight-words"><a href="#react-native-highlight-words" class="headerlink" title="react-native-highlight-words"></a>react-native-highlight-words</h3><p>它可以在文本中高亮显示指定的单词或短语。</p><h3 id="react-native-drag-sort"><a href="#react-native-drag-sort" class="headerlink" title="react-native-drag-sort"></a>react-native-drag-sort</h3><p>提供了一个可以拖动排序的列表组件</p><h3 id="react-native-image-crop-picker"><a href="#react-native-image-crop-picker" class="headerlink" title="react-native-image-crop-picker"></a>react-native-image-crop-picker</h3><p>图片的选择和裁剪</p><h3 id="react-native-linear-gradient"><a href="#react-native-linear-gradient" class="headerlink" title="react-native-linear-gradient"></a>react-native-linear-gradient</h3><p>线性渐变背景的功能</p><h3 id="react-native-modal"><a href="#react-native-modal" class="headerlink" title="react-native-modal"></a>react-native-modal</h3><p>模态窗口组件</p><h3 id="react-native-ratings"><a href="#react-native-ratings" class="headerlink" title="react-native-ratings"></a>react-native-ratings</h3><p>评分组件</p><h3 id="react-native-reanimated"><a href="#react-native-reanimated" class="headerlink" title="react-native-reanimated"></a>react-native-reanimated</h3><p>提供了一个更强大和灵活的方式来创建动画，有以下特点：</p><ul><li><p>性能优化：react-native-reanimated在原生线程上执行动画，避免了JavaScript线程的阻塞，从而提高了动画的性能。</p></li><li><p>灵活的API：react-native-reanimated提供了一套低级API，你可以使用这些API来创建复杂的动画和交互。</p></li><li><p>与手势库集成：react-native-reanimated可以与react-native-gesture-handler库集成，使你可以创建与手势交互的动画。</p></li></ul><h3 id="react-native-safe-area-context"><a href="#react-native-safe-area-context" class="headerlink" title="react-native-safe-area-context"></a>react-native-safe-area-context</h3><p>提供一个安全区域的上下文，可以帮助你避免在设备的刘海、圆角、虚拟家庭指示器等特殊区域内放置内容。</p><h3 id="react-native-safe-area-view"><a href="#react-native-safe-area-view" class="headerlink" title="react-native-safe-area-view"></a>react-native-safe-area-view</h3><p>视图组件，可以帮助你的应用适应设备的安全区域。</p><h3 id="react-native-screens"><a href="#react-native-screens" class="headerlink" title="react-native-screens"></a>react-native-screens</h3><p>提供原生的屏幕组件</p><h3 id="react-native-size-matters"><a href="#react-native-size-matters" class="headerlink" title="react-native-size-matters"></a>react-native-size-matters</h3><p>提供一个简单的API，可以帮助你在不同的设备上适配不同的尺寸。</p><h3 id="react-native-sound"><a href="#react-native-sound" class="headerlink" title="react-native-sound"></a>react-native-sound</h3><h3 id="react-native-svg"><a href="#react-native-svg" class="headerlink" title="react-native-svg"></a>react-native-svg</h3><h3 id="react-native-swiper"><a href="#react-native-swiper" class="headerlink" title="react-native-swiper"></a>react-native-swiper</h3><p>轮播图组件</p><h3 id="react-native-video"><a href="#react-native-video" class="headerlink" title="react-native-video"></a>react-native-video</h3><h3 id="react-native-view-shot"><a href="#react-native-view-shot" class="headerlink" title="react-native-view-shot"></a>react-native-view-shot</h3><p>可以捕获某个视图的截图</p><h3 id="react-native-vector-icons"><a href="#react-native-vector-icons" class="headerlink" title="react-native-vector-icons"></a>react-native-vector-icons</h3><p>使用矢量图标</p><h3 id="react-native-collapsible"><a href="#react-native-collapsible" class="headerlink" title="react-native-collapsible"></a>react-native-collapsible</h3><p>可折叠组件</p><h3 id="react-navigation"><a href="#react-navigation" class="headerlink" title="react-navigation"></a>react-navigation</h3><p>导航组件</p><h3 id="react-navigation-transitions"><a href="#react-navigation-transitions" class="headerlink" title="react-navigation-transitions"></a>react-navigation-transitions</h3><p>自定义屏幕之间的转场动画</p><h2 id="rne"><a href="#rne" class="headerlink" title="rne"></a>rne</h2><p>React Native Elements是一个用于React Native应用的UI组件库，它提供了一套丰富的UI组件，包括按钮、图标、输入框、列表、卡片、轮播图等。这些组件都遵循了Material Design的设计规范，具有一致的视觉样式和交互行为。</p><h3 id="rneui-x2F-base"><a href="#rneui-x2F-base" class="headerlink" title="@rneui&#x2F;base"></a>@rneui&#x2F;base</h3><h3 id="rneui-x2F-envinfo"><a href="#rneui-x2F-envinfo" class="headerlink" title="@rneui&#x2F;envinfo"></a>@rneui&#x2F;envinfo</h3><h3 id="rneui-x2F-themed"><a href="#rneui-x2F-themed" class="headerlink" title="#rneui&#x2F;themed"></a>#rneui&#x2F;themed</h3><h3 id="rneui-x2F-layout"><a href="#rneui-x2F-layout" class="headerlink" title="@rneui&#x2F;layout"></a>@rneui&#x2F;layout</h3><h3 id="rneui-x2F-kit"><a href="#rneui-x2F-kit" class="headerlink" title="@rneui&#x2F;kit"></a>@rneui&#x2F;kit</h3><h3 id="rneui-x2F-template"><a href="#rneui-x2F-template" class="headerlink" title="#rneui&#x2F;template"></a>#rneui&#x2F;template</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;antd-mobile-rn&quot;&gt;&lt;a href=&quot;#antd-mobile-rn&quot; class=&quot;headerlink&quot; title=&quot;antd-mobile-rn&quot;&gt;&lt;/a&gt;antd-mobile-rn&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:/</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://airshu.github.io/categories/JavaScript/"/>
    
    <category term="ReactNative" scheme="http://airshu.github.io/categories/JavaScript/ReactNative/"/>
    
    <category term="开源库" scheme="http://airshu.github.io/categories/JavaScript/ReactNative/%E5%BC%80%E6%BA%90%E5%BA%93/"/>
    
    
    <category term="React Native" scheme="http://airshu.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>flutter Android端编译流程</title>
    <link href="http://airshu.github.io/wiki/Flutter/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/flutter%20Android%E7%AB%AF%E7%BC%96%E8%AF%91%E6%B5%81%E7%A8%8B/"/>
    <id>http://airshu.github.io/wiki/Flutter/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/flutter%20Android%E7%AB%AF%E7%BC%96%E8%AF%91%E6%B5%81%E7%A8%8B/</id>
    <published>2024-03-09T09:31:38.328Z</published>
    <updated>2024-03-09T09:31:38.328Z</updated>
    
    <content type="html"><![CDATA[<p>Android编译源码流程</p><p><code>settings.gradle</code>配置</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当前 app module</span></span><br><span class="line">include <span class="string">&#x27;:app&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="language-markdown">/<span class="strong">**</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">* 1、读取android/local.properties文件内容</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span> 2、获取flutter.sdk的值，也就是你本地flutter SDK安装目录</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">* 3、gradle 脚本常规操作 apply flutter SDK路径下/packages/flutter_tools/gradle/app_plugin_loader.gradle文件 </span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span>/</span></span></span></span><br><span class="line">def localPropertiesFile = <span class="keyword">new</span> File(rootProject.projectDir, <span class="string">&quot;local.properties&quot;</span>)</span><br><span class="line">def properties = <span class="keyword">new</span> Properties()</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> localPropertiesFile.exists()</span><br><span class="line">localPropertiesFile.withReader(<span class="string">&quot;UTF-8&quot;</span>) &#123; reader -&gt; properties.load(reader) &#125;</span><br><span class="line"></span><br><span class="line">def flutterSdkPath = properties.getProperty(<span class="string">&quot;flutter.sdk&quot;</span>)</span><br><span class="line"><span class="keyword">assert</span> flutterSdkPath != <span class="keyword">null</span>, <span class="string">&quot;flutter.sdk not set in local.properties&quot;</span></span><br><span class="line">apply from: <span class="string">&quot;<span class="subst">$flutterSdkPath</span>/packages/flutter_tools/gradle/app_plugin_loader.gradle&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看<code>app_plugin_loader.gradle</code>文件</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> groovy.json.JsonSlurper</span><br><span class="line"><span class="comment">//得到自己新建的 flutter 项目的根路径，因为已经被自己新建的 project apply，所以这里是项目根路径哦</span></span><br><span class="line">def flutterProjectRoot = rootProject.projectDir.parentFile</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取自己项目根路径下的.flutter-plugins-dependencies json配置文件</span></span><br><span class="line"><span class="comment">// Note: if this logic is changed, also change the logic in module_plugin_loader.gradle.</span></span><br><span class="line">def pluginsFile = <span class="keyword">new</span> File(flutterProjectRoot, <span class="string">&#x27;.flutter-plugins-dependencies&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> (!pluginsFile.exists()) &#123;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="language-markdown">/<span class="strong">**</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">* 1、通过groovy的JsonSlurper解析json文件内容。</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span> 2、简单校验json内容字段的类型合法性。</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">* 3、把安卓平台依赖的Flutter plugins全部自动include进来</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span>/</span></span></span></span><br><span class="line">def object = <span class="keyword">new</span> JsonSlurper().parseText(pluginsFile.text)</span><br><span class="line"><span class="keyword">assert</span> object instanceof <span class="built_in">Map</span></span><br><span class="line"><span class="keyword">assert</span> object.plugins instanceof <span class="built_in">Map</span></span><br><span class="line"><span class="keyword">assert</span> object.plugins.android instanceof <span class="built_in">List</span></span><br><span class="line"><span class="comment">// Includes the Flutter plugins that support the Android platform.</span></span><br><span class="line">object.plugins.android.each &#123; androidPlugin -&gt;</span><br><span class="line">  <span class="keyword">assert</span> androidPlugin.name instanceof <span class="built_in">String</span></span><br><span class="line">  <span class="keyword">assert</span> androidPlugin.path instanceof <span class="built_in">String</span></span><br><span class="line">  def pluginDirectory = <span class="keyword">new</span> File(androidPlugin.path, <span class="string">&#x27;android&#x27;</span>)</span><br><span class="line">  <span class="keyword">assert</span> pluginDirectory.exists()</span><br><span class="line">  include <span class="string">&quot;:<span class="subst">$&#123;androidPlugin.name&#125;</span>&quot;</span></span><br><span class="line">  project(<span class="string">&quot;:<span class="subst">$&#123;androidPlugin.name&#125;</span>&quot;</span>).projectDir = pluginDirectory</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们在flutter项目中配置不同的plugin、package，会在项目根目录生成<code>.flutter-plugins-dependencies</code>，<code>app_plugin_loader.gradle</code>会将其中的Android部分库添加进来，用Android Studio打开android文件夹，会自动加载这些库。</p><p>在android文件夹下的<code>build.gradle</code>中:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//......省略无关紧要的常见配置</span><br><span class="line">// 看到了吧，他将所有 android 依赖的构建产物挪到了根目录下的 build 中，所有产物都在那儿</span><br><span class="line">rootProject.buildDir = &#x27;../build&#x27;</span><br><span class="line">subprojects &#123;</span><br><span class="line">    project.buildDir = &quot;$&#123;rootProject.buildDir&#125;/$&#123;project.name&#125;&quot;</span><br><span class="line">    project.evaluationDependsOn(&#x27;:app&#x27;) //运行其他配置之前，先运行app依赖</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后看app模块下的<code>build.gradle</code></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、读取local.properties配置信息。</span></span><br><span class="line"><span class="comment"> * 2、获取flutter.sdk路径。</span></span><br><span class="line"><span class="comment"> * 3、获取flutter.versionCode值，此值在编译时自动从pubspec.yaml中读取赋值，所以修改版本号请修改yaml。</span></span><br><span class="line"><span class="comment"> * 4、获取flutter.versionName值，此值在编译时自动从pubspec.yaml中读取赋值，所以修改版本号请修改yaml。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">def</span> localProperties = <span class="keyword">new</span> Properties()</span><br><span class="line"><span class="keyword">def</span> localPropertiesFile = rootProject.file(<span class="string">&#x27;local.properties&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> (localPropertiesFile.exists()) &#123;</span><br><span class="line">    localPropertiesFile.withReader(<span class="string">&#x27;UTF-8&#x27;</span>) &#123; reader -&gt;</span><br><span class="line">        localProperties.load(reader)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> flutterRoot = localProperties.getProperty(<span class="string">&#x27;flutter.sdk&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> (flutterRoot == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> GradleException(<span class="string">&quot;Flutter SDK not found. Define location with flutter.sdk in the local.properties file.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> flutterVersionCode = localProperties.getProperty(<span class="string">&#x27;flutter.versionCode&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> (flutterVersionCode == <span class="literal">null</span>) &#123;</span><br><span class="line">    flutterVersionCode = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> flutterVersionName = localProperties.getProperty(<span class="string">&#x27;flutter.versionName&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> (flutterVersionName == <span class="literal">null</span>) &#123;</span><br><span class="line">    flutterVersionName = <span class="string">&#x27;1.0&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//常规操作，不解释</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;kotlin-android&#x27;</span></span><br><span class="line"><span class="comment">//重点1：apply 了 flutter SDK 下面的packages/flutter_tools/gradle/flutter.gradle脚本文件</span></span><br><span class="line">apply <span class="attr">from:</span> <span class="string">&quot;$flutterRoot/packages/flutter_tools/gradle/flutter.gradle&quot;</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    sourceSets &#123;</span><br><span class="line">        main.java.srcDirs += <span class="string">&#x27;src/main/kotlin&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">&quot;cn.yan.f1&quot;</span></span><br><span class="line">        minSdkVersion <span class="number">21</span></span><br><span class="line">        targetSdkVersion <span class="number">30</span></span><br><span class="line">        versionCode flutterVersionCode.toInteger()<span class="comment">//赋值为yaml中读取的值</span></span><br><span class="line">        versionName flutterVersionName<span class="comment">//赋值为yaml中读取的值</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//......省略常规操作，不解释</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重点2：一个拓展配置，指定source路径为当前的两级父级，也就是项目根目录</span></span><br><span class="line">flutter &#123;</span><br><span class="line">    source <span class="string">&#x27;../..&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//......省略常规操作，不解释</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看看重点1<code>flutter.gradle</code>文件，它实际上运行了<code>flutter.groovy</code>这个文件</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//......省略一堆import头文件</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 常规脚本配置：脚本依赖仓库及依赖的 AGP 版本</span></span><br><span class="line"><span class="comment"> * 如果你自己没有全局配国内maven镜像，修改这里repositories也可以。</span></span><br><span class="line"><span class="comment"> * 如果你项目对于AGP这个版本不兼容，自己修改这里然后兼容也可以。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">&#x27;com.android.tools.build:gradle:4.1.0&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//java8编译配置</span></span><br><span class="line">android &#123;</span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        sourceCompatibility <span class="number">1.8</span></span><br><span class="line">        targetCompatibility <span class="number">1.8</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//又 apply 了一个插件，只是这个插件源码直接定义在下方</span></span><br><span class="line">apply <span class="attr">plugin:</span> FlutterPlugin</span><br><span class="line"></span><br><span class="line"><span class="comment">//FlutterPlugin插件实现源码，参考标准插件写法一样，基本语法不解释，这里重点看逻辑。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FlutterPlugin</span> <span class="keyword">implements</span> <span class="title class_">Plugin</span>&lt;Project&gt; &#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line"><span class="comment">//重点入口！！！！！！</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> apply(Project project) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.project = project</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、配置maven仓库地址，环境变量有配置FLUTTER_STORAGE_BASE_URL就优先用，没就缺省</span></span><br><span class="line">        String hostedRepository = System.env.FLUTTER_STORAGE_BASE_URL ?: DEFAULT_MAVEN_HOST</span><br><span class="line">        String repository = useLocalEngine()</span><br><span class="line">            ? project.property(<span class="string">&#x27;local-engine-repo&#x27;</span>)</span><br><span class="line">            : <span class="string">&quot;$hostedRepository/download.flutter.io&quot;</span></span><br><span class="line">        project.rootProject.allprojects &#123;</span><br><span class="line">            repositories &#123;</span><br><span class="line">                maven &#123;</span><br><span class="line">                    url repository</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//2、创建app模块中配置的flutter&#123; source: &#x27;../../&#x27;&#125;闭包extensions</span></span><br><span class="line">        project.extensions.create(<span class="string">&quot;flutter&quot;</span>, FlutterExtension)</span><br><span class="line">        <span class="comment">//3、添加flutter构建相关的各种task</span></span><br><span class="line">        <span class="variable language_">this</span>.addFlutterTasks(project)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、判断编译命令flutter build apk --split-per-abi是否添加--split-per-abi参数，有的话就拆分成多个abi包。</span></span><br><span class="line">        <span class="keyword">if</span> (shouldSplitPerAbi()) &#123;</span><br><span class="line">            project.android &#123;</span><br><span class="line">                splits &#123;</span><br><span class="line">                    abi &#123;</span><br><span class="line">                        <span class="comment">// Enables building multiple APKs per ABI.</span></span><br><span class="line">                        enable <span class="literal">true</span></span><br><span class="line">                        <span class="comment">// Resets the list of ABIs that Gradle should create APKs for to none.</span></span><br><span class="line">                        reset()</span><br><span class="line">                        <span class="comment">// Specifies that we do not want to also generate a universal APK that includes all ABIs.</span></span><br><span class="line">                        universalApk <span class="literal">false</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//5、判断编译命令是否添加deferred-component-names参数，有就配置android dynamicFeatures bundle特性。</span></span><br><span class="line">        <span class="keyword">if</span> (project.hasProperty(<span class="string">&#x27;deferred-component-names&#x27;</span>)) &#123;</span><br><span class="line">            String[] componentNames = project.property(<span class="string">&#x27;deferred-component-names&#x27;</span>).split(<span class="string">&#x27;,&#x27;</span>).collect &#123;<span class="string">&quot;:$&#123;it&#125;&quot;</span>&#125;</span><br><span class="line">            project.android &#123;</span><br><span class="line">                dynamicFeatures = componentNames</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6、判断编译命令是否添加--target-platform=xxxABI参数，没有就用缺省，有就看这个ABI是否flutter支持的，支持就配置，否则抛出异常。</span></span><br><span class="line">        getTargetPlatforms().each &#123; targetArch -&gt;</span><br><span class="line">            String abiValue = PLATFORM_ARCH_MAP[targetArch]</span><br><span class="line">            project.android &#123;</span><br><span class="line">                <span class="keyword">if</span> (shouldSplitPerAbi()) &#123;</span><br><span class="line">                    splits &#123;</span><br><span class="line">                        abi &#123;</span><br><span class="line">                            include abiValue</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//7、通过属性配置获取flutter.sdk，或者通过环境变量FLUTTER_ROOT获取，都没有就抛出环境异常。</span></span><br><span class="line">        String flutterRootPath = resolveProperty(<span class="string">&quot;flutter.sdk&quot;</span>, System.env.FLUTTER_ROOT)</span><br><span class="line">        <span class="keyword">if</span> (flutterRootPath == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> GradleException(<span class="string">&quot;Flutter SDK not found. Define location with flutter.sdk in the local.properties file or with a FLUTTER_ROOT environment variable.&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        flutterRoot = project.file(flutterRootPath)</span><br><span class="line">        <span class="keyword">if</span> (!flutterRoot.isDirectory()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> GradleException(<span class="string">&quot;flutter.sdk must point to the Flutter SDK directory&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//8、获取Flutter Engine的版本号，如果通过local-engine-repo参数使用本地自己编译的Engine则版本为+，否则读取SDK目录下bin\internal\engine.version文件值，一串类似MD5的值。</span></span><br><span class="line">        engineVersion = useLocalEngine()</span><br><span class="line">            ? <span class="string">&quot;+&quot;</span> <span class="comment">// Match any version since there&#x27;s only one.</span></span><br><span class="line">            : <span class="string">&quot;1.0.0-&quot;</span> + Paths.get(flutterRoot.absolutePath, <span class="string">&quot;bin&quot;</span>, <span class="string">&quot;internal&quot;</span>, <span class="string">&quot;engine.version&quot;</span>).toFile().text.trim()</span><br><span class="line"><span class="comment">//9、依据平台获取对应flutter命令脚本，都位于SDK目录下bin\中，名字为flutter</span></span><br><span class="line">        String flutterExecutableName = Os.isFamily(Os.FAMILY_WINDOWS) ? <span class="string">&quot;flutter.bat&quot;</span> : <span class="string">&quot;flutter&quot;</span></span><br><span class="line">        flutterExecutable = Paths.get(flutterRoot.absolutePath, <span class="string">&quot;bin&quot;</span>, flutterExecutableName).toFile();</span><br><span class="line"><span class="comment">//10、获取flutter混淆配置清单，位于SDK路径下packages\flutter_tools\gradle\flutter_proguard_rules.pro。</span></span><br><span class="line"><span class="comment">//里面配置只有 -dontwarn io.flutter.plugin.** 和 -dontwarn android.**</span></span><br><span class="line">        String flutterProguardRules = Paths.get(flutterRoot.absolutePath, <span class="string">&quot;packages&quot;</span>, <span class="string">&quot;flutter_tools&quot;</span>,</span><br><span class="line">                <span class="string">&quot;gradle&quot;</span>, <span class="string">&quot;flutter_proguard_rules.pro&quot;</span>)</span><br><span class="line">        project.android.buildTypes &#123;</span><br><span class="line">            <span class="comment">//11、新增profile构建类型，在当前project下的android.buildTypes中进行配置</span></span><br><span class="line">            profile &#123;</span><br><span class="line">                initWith debug <span class="comment">//initWith操作复制所有debug里面的属性</span></span><br><span class="line">                <span class="keyword">if</span> (it.hasProperty(<span class="string">&quot;matchingFallbacks&quot;</span>)) &#123;</span><br><span class="line">                    matchingFallbacks = [<span class="string">&quot;debug&quot;</span>, <span class="string">&quot;release&quot;</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//......</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//......</span></span><br><span class="line">        <span class="comment">//12、给所有buildTypes添加依赖，addFlutterDependencies</span></span><br><span class="line">        project.android.buildTypes.all <span class="variable language_">this</span>.&amp;addFlutterDependencies</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//......</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//flutter&#123;&#125;闭包Extension定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FlutterExtension</span> &#123;</span><br><span class="line">    String source</span><br><span class="line">    String target</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来看看addFluterTasks方法，这是整个编译的重点：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">void</span> addFlutterTasks(Project project) &#123;</span><br><span class="line"><span class="comment">//gradle项目配置评估失败则返回，常规操作，忽略</span></span><br><span class="line">    <span class="keyword">if</span> (project.state.failure) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1、一堆属性获取与赋值操作</span></span><br><span class="line">    String[] fileSystemRootsValue = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span> (project.hasProperty(<span class="string">&#x27;filesystem-roots&#x27;</span>)) &#123;</span><br><span class="line">        fileSystemRootsValue = project.property(<span class="string">&#x27;filesystem-roots&#x27;</span>).split(<span class="string">&#x27;\\|&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    String fileSystemSchemeValue = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span> (project.hasProperty(<span class="string">&#x27;filesystem-scheme&#x27;</span>)) &#123;</span><br><span class="line">        fileSystemSchemeValue = project.property(<span class="string">&#x27;filesystem-scheme&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    Boolean trackWidgetCreationValue = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (project.hasProperty(<span class="string">&#x27;track-widget-creation&#x27;</span>)) &#123;</span><br><span class="line">        trackWidgetCreationValue = project.property(<span class="string">&#x27;track-widget-creation&#x27;</span>).toBoolean()</span><br><span class="line">    &#125;</span><br><span class="line">    String extraFrontEndOptionsValue = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span> (project.hasProperty(<span class="string">&#x27;extra-front-end-options&#x27;</span>)) &#123;</span><br><span class="line">        extraFrontEndOptionsValue = project.property(<span class="string">&#x27;extra-front-end-options&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    String extraGenSnapshotOptionsValue = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span> (project.hasProperty(<span class="string">&#x27;extra-gen-snapshot-options&#x27;</span>)) &#123;</span><br><span class="line">        extraGenSnapshotOptionsValue = project.property(<span class="string">&#x27;extra-gen-snapshot-options&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    String splitDebugInfoValue = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span> (project.hasProperty(<span class="string">&#x27;split-debug-info&#x27;</span>)) &#123;</span><br><span class="line">        splitDebugInfoValue = project.property(<span class="string">&#x27;split-debug-info&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    Boolean dartObfuscationValue = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (project.hasProperty(<span class="string">&#x27;dart-obfuscation&#x27;</span>)) &#123;</span><br><span class="line">        dartObfuscationValue = project.property(<span class="string">&#x27;dart-obfuscation&#x27;</span>).toBoolean();</span><br><span class="line">    &#125;</span><br><span class="line">    Boolean treeShakeIconsOptionsValue = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (project.hasProperty(<span class="string">&#x27;tree-shake-icons&#x27;</span>)) &#123;</span><br><span class="line">        treeShakeIconsOptionsValue = project.property(<span class="string">&#x27;tree-shake-icons&#x27;</span>).toBoolean()</span><br><span class="line">    &#125;</span><br><span class="line">    String dartDefinesValue = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span> (project.hasProperty(<span class="string">&#x27;dart-defines&#x27;</span>)) &#123;</span><br><span class="line">        dartDefinesValue = project.property(<span class="string">&#x27;dart-defines&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    String bundleSkSLPathValue;</span><br><span class="line">    <span class="keyword">if</span> (project.hasProperty(<span class="string">&#x27;bundle-sksl-path&#x27;</span>)) &#123;</span><br><span class="line">        bundleSkSLPathValue = project.property(<span class="string">&#x27;bundle-sksl-path&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    String performanceMeasurementFileValue;</span><br><span class="line">    <span class="keyword">if</span> (project.hasProperty(<span class="string">&#x27;performance-measurement-file&#x27;</span>)) &#123;</span><br><span class="line">        performanceMeasurementFileValue = project.property(<span class="string">&#x27;performance-measurement-file&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    String codeSizeDirectoryValue;</span><br><span class="line">    <span class="keyword">if</span> (project.hasProperty(<span class="string">&#x27;code-size-directory&#x27;</span>)) &#123;</span><br><span class="line">        codeSizeDirectoryValue = project.property(<span class="string">&#x27;code-size-directory&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    Boolean deferredComponentsValue = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (project.hasProperty(<span class="string">&#x27;deferred-components&#x27;</span>)) &#123;</span><br><span class="line">        deferredComponentsValue = project.property(<span class="string">&#x27;deferred-components&#x27;</span>).toBoolean()</span><br><span class="line">    &#125;</span><br><span class="line">    Boolean validateDeferredComponentsValue = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (project.hasProperty(<span class="string">&#x27;validate-deferred-components&#x27;</span>)) &#123;</span><br><span class="line">        validateDeferredComponentsValue = project.property(<span class="string">&#x27;validate-deferred-components&#x27;</span>).toBoolean()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">def</span> targetPlatforms = getTargetPlatforms()</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到，addFlutterTasks 方法的第一部分比较简单，基本都是从 Project 中读取各自配置属性供后续步骤使用。所以我们接着继续看 addFlutterTasks 这个方法步骤 1 之后的部分</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">void</span> addFlutterTasks(Project project) &#123;</span><br><span class="line">    <span class="comment">//一堆属性获取与赋值操作</span></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">    <span class="comment">//1、定义 addFlutterDeps 箭头函数，参数variant为标准构建对应的构建类型</span></span><br><span class="line">    <span class="keyword">def</span> addFlutterDeps = &#123; variant -&gt;</span><br><span class="line">        <span class="keyword">if</span> (shouldSplitPerAbi()) &#123;</span><br><span class="line">        <span class="comment">//2、常规操作：如果是构建多个变体apk模式就处理vc问题</span></span><br><span class="line">            variant.outputs.each &#123; output -&gt;</span><br><span class="line">                <span class="comment">//由于GP商店不允许同一个应用的多个APK全都具有相同的版本信息，因此在上传到Play商店之前，您需要确保每个APK都有自己唯一的versionCode，这里就是做这个事情的。</span></span><br><span class="line">                <span class="comment">//具体可以看官方文档 https://developer.android.com/studio/build/configure-apk-splits</span></span><br><span class="line">                <span class="keyword">def</span> abiVersionCode = ABI_VERSION.get(output.getFilter(OutputFile.ABI))</span><br><span class="line">                <span class="keyword">if</span> (abiVersionCode != <span class="literal">null</span>) &#123;</span><br><span class="line">                    output.versionCodeOverride =</span><br><span class="line">                        abiVersionCode * <span class="number">1000</span> + variant.versionCode</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3、获取编译类型，variantBuildMode值为debug、profile、release之一</span></span><br><span class="line">        String variantBuildMode = buildModeFor(variant.buildType)</span><br><span class="line">        <span class="comment">//4、依据参数生成一个task名字，譬如这里的compileFlutterBuildDebug、compileFlutterBuildProfile、compileFlutterBuildRelease</span></span><br><span class="line">        String taskName = toCammelCase([<span class="string">&quot;compile&quot;</span>, FLUTTER_BUILD_PREFIX, variant.name])</span><br><span class="line">        <span class="comment">//5、给当前project创建compileFlutterBuildDebug、compileFlutterBuildProfile、compileFlutterBuildRelease Task</span></span><br><span class="line">        <span class="comment">//实现为FlutterTask，主要用来编译Flutter代码，这个task稍后单独分析</span></span><br><span class="line">        FlutterTask compileTask = project.tasks.create(<span class="attr">name:</span> taskName, <span class="attr">type:</span> FlutterTask) &#123;</span><br><span class="line">        <span class="comment">//各种task属性赋值操作，基本都来自上面的属性获取或者匹配分析</span></span><br><span class="line">            flutterRoot <span class="variable language_">this</span>.flutterRoot</span><br><span class="line">            flutterExecutable <span class="variable language_">this</span>.flutterExecutable</span><br><span class="line">            buildMode variantBuildMode</span><br><span class="line">            localEngine <span class="variable language_">this</span>.localEngine</span><br><span class="line">            localEngineSrcPath <span class="variable language_">this</span>.localEngineSrcPath</span><br><span class="line">            <span class="comment">//默认dart入口lib/main.dart、可以通过target属性自定义指向</span></span><br><span class="line">            targetPath getFlutterTarget()</span><br><span class="line">            verbose isVerbose()</span><br><span class="line">            fastStart isFastStart()</span><br><span class="line">            fileSystemRoots fileSystemRootsValue</span><br><span class="line">            fileSystemScheme fileSystemSchemeValue</span><br><span class="line">            trackWidgetCreation trackWidgetCreationValue</span><br><span class="line">            targetPlatformValues = targetPlatforms</span><br><span class="line">            sourceDir getFlutterSourceDirectory()</span><br><span class="line">            <span class="comment">//学到一个小技能，原来中间API是AndroidProject.FD_INTERMEDIATES，这也是flutter中间产物目录</span></span><br><span class="line">            intermediateDir project.file(<span class="string">&quot;$&#123;project.buildDir&#125;/$&#123;AndroidProject.FD_INTERMEDIATES&#125;/flutter/$&#123;variant.name&#125;/&quot;</span>)</span><br><span class="line">            extraFrontEndOptions extraFrontEndOptionsValue</span><br><span class="line">            extraGenSnapshotOptions extraGenSnapshotOptionsValue</span><br><span class="line">            splitDebugInfo splitDebugInfoValue</span><br><span class="line">            treeShakeIcons treeShakeIconsOptionsValue</span><br><span class="line">            dartObfuscation dartObfuscationValue</span><br><span class="line">            dartDefines dartDefinesValue</span><br><span class="line">            bundleSkSLPath bundleSkSLPathValue</span><br><span class="line">            performanceMeasurementFile performanceMeasurementFileValue</span><br><span class="line">            codeSizeDirectory codeSizeDirectoryValue</span><br><span class="line">            deferredComponents deferredComponentsValue</span><br><span class="line">            validateDeferredComponents validateDeferredComponentsValue</span><br><span class="line">            <span class="comment">//最后做一波权限相关处理</span></span><br><span class="line">            doLast &#123;</span><br><span class="line">                project.exec &#123;</span><br><span class="line">                    <span class="keyword">if</span> (Os.isFamily(Os.FAMILY_WINDOWS)) &#123;</span><br><span class="line">                        commandLine(<span class="string">&#x27;cmd&#x27;</span>, <span class="string">&#x27;/c&#x27;</span>, <span class="string">&quot;attrib -r $&#123;assetsDirectory&#125;/* /s&quot;</span>)</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        commandLine(<span class="string">&#x27;chmod&#x27;</span>, <span class="string">&#x27;-R&#x27;</span>, <span class="string">&#x27;u+w&#x27;</span>, assetsDirectory)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//项目构建中间产物的文件，也就是根目录下build/intermediates/flutter/debug/libs.jar文件</span></span><br><span class="line">        File libJar = project.file(<span class="string">&quot;$&#123;project.buildDir&#125;/$&#123;AndroidProject.FD_INTERMEDIATES&#125;/flutter/$&#123;variant.name&#125;/libs.jar&quot;</span>)</span><br><span class="line">        <span class="comment">//6、创建packLibsFlutterBuildProfile、packLibsFlutterBuildDebug、packLibsFlutterBuildRelease任务，主要是产物的复制挪位置操作，Jar 类型的 task</span></span><br><span class="line">        <span class="comment">//作用就是把build/intermediates/flutter/debug/下依据abi生成的app.so通过jar命令打包成build/intermediates/flutter/debug/libs.jar</span></span><br><span class="line">        Task packFlutterAppAotTask = project.tasks.create(<span class="attr">name:</span> <span class="string">&quot;packLibs$&#123;FLUTTER_BUILD_PREFIX&#125;$&#123;variant.name.capitalize()&#125;&quot;</span>, <span class="attr">type:</span> Jar) &#123;</span><br><span class="line">        <span class="comment">//目标路径为build/intermediates/flutter/debug目录</span></span><br><span class="line">            destinationDir libJar.parentFile</span><br><span class="line">            <span class="comment">//文件名为libs.jar</span></span><br><span class="line">            archiveName libJar.name</span><br><span class="line">            <span class="comment">//依赖前面步骤5定义的compileFlutterBuildDebug，也就是说，这个task基本作用是产物处理</span></span><br><span class="line">            dependsOn compileTask</span><br><span class="line">            <span class="comment">//targetPlatforms取值为android-arm、android-arm64、android-x86、android-x64</span></span><br><span class="line">            targetPlatforms.each &#123; targetPlatform -&gt;</span><br><span class="line">            <span class="comment">//abi取值为armeabi-v7a、arm64-v8a、x86、x86_64</span></span><br><span class="line">                String abi = PLATFORM_ARCH_MAP[targetPlatform]</span><br><span class="line">                <span class="comment">//数据来源来自步骤5的compileFlutterBuildDebug任务中间产物目录</span></span><br><span class="line">                <span class="comment">//即把build/intermediates/flutter/debug/下依据abi生成的app.so通过jar命令打包成一个build/intermediates/flutter/debug/libs.jar文件</span></span><br><span class="line">                from(<span class="string">&quot;$&#123;compileTask.intermediateDir&#125;/$&#123;abi&#125;&quot;</span>) &#123;</span><br><span class="line">                    include <span class="string">&quot;*.so&quot;</span></span><br><span class="line">                    <span class="comment">// Move `app.so` to `lib/&lt;abi&gt;/libapp.so`</span></span><br><span class="line">                    rename &#123; String filename -&gt;</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">&quot;lib/$&#123;abi&#125;/lib$&#123;filename&#125;&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//前面有介绍过addApiDependencies作用，把 packFlutterAppAotTask 产物加到依赖项里面参与编译</span></span><br><span class="line">        <span class="comment">//类似implementation files(&#x27;libs.jar&#x27;)，然后里面的so会在项目执行标准mergeDebugNativeLibs task时打包进标准lib目录</span></span><br><span class="line">        addApiDependencies(project, variant.name, project.files &#123;</span><br><span class="line">            packFlutterAppAotTask</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 当构建有is-plugin属性时则编译aar</span></span><br><span class="line">        <span class="type">boolean</span> isBuildingAar = project.hasProperty(<span class="string">&#x27;is-plugin&#x27;</span>)</span><br><span class="line">        <span class="comment">//7、当是Flutter Module方式，即Flutter以aar作为已存在native安卓项目依赖时才有这些:flutter:模块依赖，否则没有这些task</span></span><br><span class="line">        <span class="comment">//可以参见新建的FlutterModule中.android/include_flutter.groovy中gradle.project(&quot;:flutter&quot;).projectDir实现</span></span><br><span class="line">        Task packageAssets = project.tasks.findByPath(<span class="string">&quot;:flutter:package$&#123;variant.name.capitalize()&#125;Assets&quot;</span>)</span><br><span class="line">        Task cleanPackageAssets = project.tasks.findByPath(<span class="string">&quot;:flutter:cleanPackage$&#123;variant.name.capitalize()&#125;Assets&quot;</span>)</span><br><span class="line">        <span class="comment">//判断是否为FlutterModule依赖</span></span><br><span class="line">        <span class="type">boolean</span> isUsedAsSubproject = packageAssets &amp;&amp; cleanPackageAssets &amp;&amp; !isBuildingAar</span><br><span class="line">        <span class="comment">//8、新建copyFlutterAssetsDebug task，目的就是copy产物，也就是assets归档</span></span><br><span class="line">        <span class="comment">//常规merge中间产物类似，不再过多解释，就是把步骤5 task产物的assets目录在mergeAssets时复制到主包中间产物目录</span></span><br><span class="line">        Task copyFlutterAssetsTask = project.tasks.create(</span><br><span class="line">            <span class="symbol">name:</span> <span class="string">&quot;copyFlutterAssets$&#123;variant.name.capitalize()&#125;&quot;</span>,</span><br><span class="line">            <span class="symbol">type:</span> Copy,</span><br><span class="line">        ) &#123;</span><br><span class="line">            dependsOn compileTask</span><br><span class="line">            with compileTask.assets</span><br><span class="line">            <span class="keyword">if</span> (isUsedAsSubproject) &#123;</span><br><span class="line">                dependsOn packageAssets</span><br><span class="line">                dependsOn cleanPackageAssets</span><br><span class="line">                into packageAssets.outputDir</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// `variant.mergeAssets` will be removed at the end of 2019.</span></span><br><span class="line">            <span class="keyword">def</span> mergeAssets = variant.hasProperty(<span class="string">&quot;mergeAssetsProvider&quot;</span>) ?</span><br><span class="line">                variant.mergeAssetsProvider.get() : variant.mergeAssets</span><br><span class="line">            dependsOn mergeAssets</span><br><span class="line">            dependsOn <span class="string">&quot;clean$&#123;mergeAssets.name.capitalize()&#125;&quot;</span></span><br><span class="line">            mergeAssets.mustRunAfter(<span class="string">&quot;clean$&#123;mergeAssets.name.capitalize()&#125;&quot;</span>)</span><br><span class="line">            into mergeAssets.outputDir</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!isUsedAsSubproject) &#123;</span><br><span class="line">            <span class="keyword">def</span> variantOutput = variant.outputs.first()</span><br><span class="line">            <span class="keyword">def</span> processResources = variantOutput.hasProperty(<span class="string">&quot;processResourcesProvider&quot;</span>) ?</span><br><span class="line">                variantOutput.processResourcesProvider.get() : variantOutput.processResources</span><br><span class="line">            processResources.dependsOn(copyFlutterAssetsTask)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> copyFlutterAssetsTask</span><br><span class="line">    &#125; <span class="comment">// end def addFlutterDeps</span></span><br><span class="line">......</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上大部分代码只是为了执行以下脚本时准备配置参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">flutter assemble --no-version-check \</span><br><span class="line">--depfile build/app/intermediates/flutter/release/flutter_build.d \</span><br><span class="line">--output build/app/intermediates/flutter/release/ \</span><br><span class="line">-dTargetFile=lib/main.dart \</span><br><span class="line">-dTargetPlatform=android \</span><br><span class="line">-dBuildMode=release \</span><br><span class="line">-dDartObfuscation=true \</span><br><span class="line">android_aot_bundle_release_android-arm \</span><br><span class="line">android_aot_bundle_release_android-arm64 \</span><br><span class="line">android_aot_bundle_release_android-x86 \</span><br><span class="line">android_aot_bundle_release_android-x64</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Flutter-SDK下bin-x2F-flutter编译命令分析"><a href="#Flutter-SDK下bin-x2F-flutter编译命令分析" class="headerlink" title="Flutter SDK下bin&#x2F;flutter编译命令分析"></a>Flutter SDK下bin&#x2F;flutter编译命令分析</h2><p>flutter脚本如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">!/usr/bin/env bash</span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">1、该命令之后出现的代码，一旦出现了返回值非零，整个脚本就会立即退出，那么就可以避免一些脚本的危险操作。</span></span><br><span class="line">set -e</span><br><span class="line"><span class="meta">#</span><span class="language-bash">2、清空CDPATH变量值</span></span><br><span class="line">unset CDPATH</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">在Mac上，<span class="built_in">readlink</span> -f不起作用，因此follow_links一次遍历一个链接的路径，然后遍历<span class="built_in">cd</span>进入链接目的地并找出它。</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">返回的文件系统路径必须是Dart的URI解析器可用的格式，因为Dart命令行工具将其参数视为文件URI，而不是文件名。</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">例如，多个连续的斜杠应该减少为一个斜杠，因为双斜杠表示URI的authority。</span></span><br><span class="line">function follow_links() (</span><br><span class="line">  cd -P &quot;$(dirname -- &quot;$1&quot;)&quot;</span><br><span class="line">  file=&quot;$PWD/$(basename -- &quot;$1&quot;)&quot;</span><br><span class="line">  while [[ -h &quot;$file&quot; ]]; do</span><br><span class="line">    cd -P &quot;$(dirname -- &quot;$file&quot;)&quot;</span><br><span class="line">    file=&quot;$(readlink -- &quot;$file&quot;)&quot;</span><br><span class="line">    cd -P &quot;$(dirname -- &quot;$file&quot;)&quot;</span><br><span class="line">    file=&quot;$PWD/$(basename -- &quot;$file&quot;)&quot;</span><br><span class="line">  done</span><br><span class="line">  echo &quot;$file&quot;</span><br><span class="line">)</span><br><span class="line"><span class="meta"># </span><span class="language-bash">这个变量的值就是Flutter SDK根目录下的bin/flutter</span></span><br><span class="line">PROG_NAME=&quot;$(follow_links &quot;$&#123;BASH_SOURCE[0]&#125;&quot;)&quot;</span><br><span class="line">BIN_DIR=&quot;$(cd &quot;$&#123;PROG_NAME%/*&#125;&quot; ; pwd -P)&quot;</span><br><span class="line">OS=&quot;$(uname -s)&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">平台兼容</span></span><br><span class="line">if [[ $OS =~ MINGW.* || $OS =~ CYGWIN.* ]]; then</span><br><span class="line">  exec &quot;$&#123;BIN_DIR&#125;/flutter.bat&quot; &quot;$@&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">3、<span class="built_in">source</span>导入这个shell脚本后执行其内部的shared::execute方法</span></span><br><span class="line">source &quot;$BIN_DIR/internal/shared.sh&quot;</span><br><span class="line">shared::execute &quot;$@&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关注<code>shared.sh</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">......</span></span><br><span class="line">function shared::execute() &#123;</span><br><span class="line"><span class="meta">  #</span><span class="language-bash">1、默认FLUTTER_ROOT值为FlutterSDK根路径</span></span><br><span class="line">  export FLUTTER_ROOT=&quot;$(cd &quot;$&#123;BIN_DIR&#125;/..&quot; ; pwd -P)&quot;</span><br><span class="line"><span class="meta">  #</span><span class="language-bash">2、如果存在就先执行bootstrap脚本，默认SDK下面是没有这个文件的，我猜是预留给我们自定义初始化挂载用的。</span></span><br><span class="line">  BOOTSTRAP_PATH=&quot;$FLUTTER_ROOT/bin/internal/bootstrap.sh&quot;</span><br><span class="line">  if [ -f &quot;$BOOTSTRAP_PATH&quot; ]; then</span><br><span class="line">    source &quot;$BOOTSTRAP_PATH&quot;</span><br><span class="line">  fi</span><br><span class="line"><span class="meta">  #</span><span class="language-bash">3、一堆基于FlutterSDK路径的位置定义</span></span><br><span class="line">  FLUTTER_TOOLS_DIR=&quot;$FLUTTER_ROOT/packages/flutter_tools&quot;</span><br><span class="line">  SNAPSHOT_PATH=&quot;$FLUTTER_ROOT/bin/cache/flutter_tools.snapshot&quot;</span><br><span class="line">  STAMP_PATH=&quot;$FLUTTER_ROOT/bin/cache/flutter_tools.stamp&quot;</span><br><span class="line">  SCRIPT_PATH=&quot;$FLUTTER_TOOLS_DIR/bin/flutter_tools.dart&quot;</span><br><span class="line">  DART_SDK_PATH=&quot;$FLUTTER_ROOT/bin/cache/dart-sdk&quot;</span><br><span class="line"></span><br><span class="line">  DART=&quot;$DART_SDK_PATH/bin/dart&quot;</span><br><span class="line">  PUB=&quot;$DART_SDK_PATH/bin/pub&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">  #</span><span class="language-bash">4、路径文件平台兼容，常规操作，忽略</span></span><br><span class="line">  case &quot;$(uname -s)&quot; in</span><br><span class="line">    MINGW*)</span><br><span class="line">      DART=&quot;$DART.exe&quot;</span><br><span class="line">      PUB=&quot;$PUB.bat&quot;</span><br><span class="line">      ;;</span><br><span class="line">  esac</span><br><span class="line"><span class="meta">  #</span><span class="language-bash">5、测试运行脚本的账号是否为超级账号，是的话警告提示，Docker和CI环境不警告。</span></span><br><span class="line">  if [[ &quot;$EUID&quot; == &quot;0&quot; &amp;&amp; ! -f /.dockerenv &amp;&amp; &quot;$CI&quot; != &quot;true&quot; &amp;&amp; &quot;$BOT&quot; != &quot;true&quot; &amp;&amp; &quot;$CONTINUOUS_INTEGRATION&quot; != &quot;true&quot; ]]; then</span><br><span class="line">    &gt;&amp;2 echo &quot;   Woah! You appear to be trying to run flutter as root.&quot;</span><br><span class="line">    &gt;&amp;2 echo &quot;   We strongly recommend running the flutter tool without superuser privileges.&quot;</span><br><span class="line">    &gt;&amp;2 echo &quot;  /&quot;</span><br><span class="line">    &gt;&amp;2 echo &quot;📎&quot;</span><br><span class="line">  fi</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">  #</span><span class="language-bash">6、测试git命令行环境配置是否正常，不正常就抛出错误。</span></span><br><span class="line">  if ! hash git 2&gt;/dev/null; then</span><br><span class="line">    &gt;&amp;2 echo &quot;Error: Unable to find git in your PATH.&quot;</span><br><span class="line">    exit 1</span><br><span class="line">  fi</span><br><span class="line"><span class="meta">  #</span><span class="language-bash">7、FlutterSDK是否来自<span class="built_in">clone</span>等测试。</span></span><br><span class="line">  if [[ ! -e &quot;$FLUTTER_ROOT/.git&quot; ]]; then</span><br><span class="line">    &gt;&amp;2 echo &quot;Error: The Flutter directory is not a clone of the GitHub project.&quot;</span><br><span class="line">    &gt;&amp;2 echo &quot;       The flutter tool requires Git in order to operate properly;&quot;</span><br><span class="line">    &gt;&amp;2 echo &quot;       to install Flutter, see the instructions at:&quot;</span><br><span class="line">    &gt;&amp;2 echo &quot;       https://flutter.dev/get-started&quot;</span><br><span class="line">    exit 1</span><br><span class="line">  fi</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">  # </span><span class="language-bash">To debug the tool, you can uncomment the following lines to <span class="built_in">enable</span> checked</span></span><br><span class="line"><span class="meta">  # </span><span class="language-bash">mode and <span class="built_in">set</span> an observatory port:</span></span><br><span class="line"><span class="meta">  # </span><span class="language-bash">FLUTTER_TOOL_ARGS=<span class="string">&quot;--enable-asserts <span class="variable">$FLUTTER_TOOL_ARGS</span>&quot;</span></span></span><br><span class="line"><span class="meta">  # </span><span class="language-bash">FLUTTER_TOOL_ARGS=<span class="string">&quot;<span class="variable">$FLUTTER_TOOL_ARGS</span> --observe=65432&quot;</span></span></span><br><span class="line"><span class="meta">  #</span><span class="language-bash">7、日常编译遇到命令lock文件锁住问题就是他，本质该方法就是创建/bin/cache目录并维持锁状态等事情，不是我们关心的重点。</span></span><br><span class="line">  upgrade_flutter 7&lt; &quot;$PROG_NAME&quot;</span><br><span class="line"><span class="meta">  #</span><span class="language-bash">8、相关参数值，别问我怎么知道的，问就是自己在源码对应位置<span class="built_in">echo</span>输出打印的</span></span><br><span class="line"><span class="meta">  # </span><span class="language-bash">BIN_NAME=flutter、PROG_NAME=FLUTTER_SDK_DIR/bin/flutter</span></span><br><span class="line"><span class="meta">  # </span><span class="language-bash">DART=FLUTTER_SDK_DIR/bin/cache/dart-sdk/bin/dart</span></span><br><span class="line"><span class="meta">  # </span><span class="language-bash">FLUTTER_TOOLS_DIR=FLUTTER_SDK_DIR/packages/flutter_tools</span></span><br><span class="line"><span class="meta">  # </span><span class="language-bash">FLUTTER_TOOL_ARGS=空</span></span><br><span class="line"><span class="meta">  # </span><span class="language-bash">SNAPSHOT_PATH=FLUTTER_SDK_DIR/bin/cache/flutter_tools.snapshot</span></span><br><span class="line"><span class="meta">  # </span><span class="language-bash">@=build apk</span></span><br><span class="line">  BIN_NAME=&quot;$(basename &quot;$PROG_NAME&quot;)&quot;</span><br><span class="line">  case &quot;$BIN_NAME&quot; in</span><br><span class="line">    flutter*)</span><br><span class="line">      # FLUTTER_TOOL_ARGS aren&#x27;t quoted below, because it is meant to be</span><br><span class="line">      # considered as separate space-separated args.</span><br><span class="line">      &quot;$DART&quot; --disable-dart-dev --packages=&quot;$FLUTTER_TOOLS_DIR/.packages&quot; $FLUTTER_TOOL_ARGS &quot;$SNAPSHOT_PATH&quot; &quot;$@&quot;</span><br><span class="line">      ;;</span><br><span class="line">    dart*)</span><br><span class="line">      &quot;$DART&quot; &quot;$@&quot;</span><br><span class="line">      ;;</span><br><span class="line">    *)</span><br><span class="line">      &gt;&amp;2 echo &quot;Error! Executable name $BIN_NAME not recognized!&quot;</span><br><span class="line">      exit 1</span><br><span class="line">      ;;</span><br><span class="line">  esac</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到，由于 Flutter SDK 内部内置了 Dart，所以当配置环境变量后 flutter、dart 命令都可以使用了。而我们安装 Flutter SDK 后首先做的事情就是把 SDK 的 bin 目录配置到了环境变量，所以执行的 flutter build apk、flutter upgrade、flutter pub xxx 等命令本质都是走进了上面这些脚本，且 flutter 命令只是对 dart 命令的一个包装，所以执行flutter pub get其实等价于dart pub get。所以假设我们执行flutter build apk命令，本质走到上面脚本最终执行的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FLUTTER_SDK_DIR/bin/cache/dart-sdk/bin/dart \</span><br><span class="line">--disable-dart-dev --packages=FLUTTER_SDK_DIR/packages/flutter_tools/.packages \</span><br><span class="line">FLUTTER_SDK_DIR/bin/cache/flutter_tools.snapshot \</span><br><span class="line">build apk</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面命令行中 FLUTTER_SDK_DIR 代表的就是 Flutter SDK 的根目录，–packages可以理解成是一堆 SDK 相关依赖，FLUTTER_SDK_DIR&#x2F;bin&#x2F;cache&#x2F;flutter_tools.snapshot就是FLUTTER_SDK_DIR&#x2F;packages&#x2F;flutter_tools的编译产物。所以，上面其实通过 dart 命令执行flutter_tools.snapshot文件也就是等价于执行flutter_tools.dart的main()方法。因此上面命令继续简化大致如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">dart --disable-dart-dev --packages=xxx flutter_tools.dart build apk</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也就是说，我们执行的任何 flutter 命令，本质都是把参数传递到了FLUTTER_SDK_DIR&#x2F;packages&#x2F;flutter_tools&#x2F;bin&#x2F;flutter_tools.dart源码的 main 方法中</p><p>flutter_tools会执行flutter_tools&#x2F;lib文件夹中的代码，不同的参数对应commands中不同的文件，比如build对应lib&#x2F;src&#x2F;commands&#x2F;build.dart</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://yanbober.blog.csdn.net/article/details/118758871">Flutter Android 工程结构及应用层编译源码深入分析</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Android编译源码流程&lt;/p&gt;
&lt;p&gt;&lt;code&gt;settings.gradle&lt;/code&gt;配置&lt;/p&gt;
&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="Flutter" scheme="http://airshu.github.io/categories/Flutter/"/>
    
    <category term="源码分析" scheme="http://airshu.github.io/categories/Flutter/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Flutter" scheme="http://airshu.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>sentry_flutter</title>
    <link href="http://airshu.github.io/wiki/Flutter/%E5%BC%80%E6%BA%90%E5%BA%93/sentry_flutter/"/>
    <id>http://airshu.github.io/wiki/Flutter/%E5%BC%80%E6%BA%90%E5%BA%93/sentry_flutter/</id>
    <published>2024-03-09T09:31:38.327Z</published>
    <updated>2024-03-09T09:31:38.328Z</updated>
    
    <content type="html"><![CDATA[<p>Sentry是一款多平台支持的异常信息收集解决方案。sentry_flutter可以在Flutter项目中收集异常信息。</p><p><a href="https://docs.sentry.io/platforms/flutter/">https://docs.sentry.io/platforms/flutter/</a>可以查阅其Flutter项目的集成文档。</p><p><a href="https://pub.dev/packages/sentry_dart_plugin">sentry_dart_plugin</a>可以自动上传mapping.txt文件和debug的动态库，方便后续直接在sentry后台查看异常信息。</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><ol><li>pubspec.yaml配置，sentry_dart_plugin配置参数参考<a href="https://github.com/getsentry/sentry-dart-plugin/blob/main/README.md">https://github.com/getsentry/sentry-dart-plugin/blob/main/README.md</a></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">sentry_flutter:</span> <span class="string">^7.16.0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sentry:</span></span><br><span class="line">  <span class="attr">upload_debug_symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">upload_source_maps:</span> <span class="literal">false</span> <span class="comment"># flutter_web使用</span></span><br><span class="line">  <span class="attr">upload_sources:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">project:</span> <span class="string">...</span></span><br><span class="line">  <span class="attr">org:</span> <span class="string">...</span></span><br><span class="line">  <span class="attr">auth_token:</span> <span class="string">...</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">...</span></span><br><span class="line">  <span class="attr">wait_for_processing:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">log_level:</span> <span class="string">error</span> <span class="comment"># possible values: trace, debug, info, warn, error</span></span><br><span class="line">  <span class="attr">release:</span> <span class="string">...</span></span><br><span class="line">  <span class="attr">dist:</span> <span class="string">...</span></span><br><span class="line">  <span class="attr">web_build_path:</span> <span class="string">...</span></span><br><span class="line">  <span class="attr">commits:</span> <span class="string">auto</span></span><br><span class="line">  <span class="attr">ignore_missing:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol start="2"><li>代码中初始化相关配置</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/widgets.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:sentry_flutter/sentry_flutter.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Future&lt;<span class="keyword">void</span>&gt; main() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="comment">// sentry支持面包屑配置，可以在重要的场景添加相关信息</span></span><br><span class="line">  <span class="keyword">await</span> SentryFlutter.init(</span><br><span class="line">    (options) &#123;</span><br><span class="line">      options.dsn = <span class="string">&#x27;https://example@sentry.io/add-your-dsn-here&#x27;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// Init your App.</span></span><br><span class="line">    appRunner: () =&gt; runApp(MyApp()),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>打包脚本中配置上传mapping.txt文件和debug的动态库</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter packages pub run sentry_dart_plugin </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Sentry是一款多平台支持的异常信息收集解决方案。sentry_flutter可以在Flutter项目中收集异常信息。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.sentry.io/platforms/flutter/&quot;&gt;https://docs.sent</summary>
      
    
    
    
    <category term="Flutter" scheme="http://airshu.github.io/categories/Flutter/"/>
    
    <category term="开源库" scheme="http://airshu.github.io/categories/Flutter/%E5%BC%80%E6%BA%90%E5%BA%93/"/>
    
    
    <category term="Flutter" scheme="http://airshu.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>单元测试</title>
    <link href="http://airshu.github.io/wiki/Flutter/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>http://airshu.github.io/wiki/Flutter/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</id>
    <published>2024-03-09T09:31:38.326Z</published>
    <updated>2024-03-09T09:31:38.326Z</updated>
    
    <content type="html"><![CDATA[<p>单元测试的作用？</p><ul><li>保证代码质量，当一个方法在某个版本进行了调整，如果对应的单元测试无法通过，说明这个方法的改动有问题。单元测试中也能包含很多边界条件，甚至可以把测试用例的场景都包含，这样就相当于做了一遍测试的工作，而且可以复用检查，下次迭代时再运行一遍，说不定能发现新问题</li><li>单元测试阶段发现bug的处理时间相对后期测试发现反馈给研发，处理的时间要短很多，提高效率</li></ul><p>单元测试做的好不好，在于测试用例的有效性</p><p>测试的评价指标：</p><ul><li>通过率</li><li>覆盖率：覆盖足够多的代码，覆盖足够多的场景</li><li>有测试用例</li></ul><h2 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h2><ul><li>Code Review</li><li>静态代码扫描</li><li>单元测试用例编写：综合运用黑盒测试、白盒测试方法来进行测试用例设计</li></ul><h2 id="测试用例规范"><a href="#测试用例规范" class="headerlink" title="测试用例规范"></a>测试用例规范</h2><h2 id="单元测试的最佳实践"><a href="#单元测试的最佳实践" class="headerlink" title="单元测试的最佳实践"></a>单元测试的最佳实践</h2><ul><li>模块化代码：将代码分解为小的、可重复使用的模块，每个模块只负责一个特定的功能。这样可以更容易地针对单个模块编写测试用例。</li><li>避免依赖：代码中应避免使用全局变量、静态方法或其他硬编码的依赖项，因为这些会增加测试的复杂性。相反，应使用依赖注入或其他技术来模拟依赖项。</li></ul><h2 id="方法、函数的测试"><a href="#方法、函数的测试" class="headerlink" title="方法、函数的测试"></a>方法、函数的测试</h2><h2 id="测试网络请求"><a href="#测试网络请求" class="headerlink" title="测试网络请求"></a>测试网络请求</h2><h2 id="测试UI"><a href="#测试UI" class="headerlink" title="测试UI"></a>测试UI</h2><h2 id="测试Bloc"><a href="#测试Bloc" class="headerlink" title="测试Bloc"></a>测试Bloc</h2><h2 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h2><h2 id="Flutter如何进行单元测试"><a href="#Flutter如何进行单元测试" class="headerlink" title="Flutter如何进行单元测试"></a>Flutter如何进行单元测试</h2><ul><li>单元测试ー单元测试对单个函数、方法或类执行测试。我们使用单元测试来测试您想要测试的非常小的代码或函数。</li><li>widget 测试ー widget 测试(在其他 UI 框架中称为组件测试)测试单个 widget 。</li><li>集成测试ーー集成测试测试一个完整的应用程序或应用程序的很大一部分，这些应用程序将许多事情和测试结合在一起，比如创建一个流。</li></ul><h2 id="Flutter单元测试库"><a href="#Flutter单元测试库" class="headerlink" title="Flutter单元测试库"></a>Flutter单元测试库</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dev_dependencies:</span></span><br><span class="line">  <span class="attr">test:</span> <span class="comment"># 纯dart测试框架</span></span><br><span class="line">  <span class="attr">flutter_test:</span> <span class="comment"># 基于test的flutter测试框架</span></span><br><span class="line">    <span class="attr">sdk:</span> <span class="string">flutter</span></span><br><span class="line">  <span class="attr">flutter_driver:</span></span><br><span class="line">    <span class="attr">sdk:</span> <span class="string">flutter</span></span><br><span class="line">  <span class="attr">mockito:</span></span><br><span class="line">  <span class="attr">http_mock_adapter:</span>  </span><br><span class="line">  <span class="attr">bloc_test:</span></span><br><span class="line">  <span class="attr">test_api:</span> <span class="comment"># dart测试框架</span></span><br><span class="line">  <span class="attr">integration_test:</span> <span class="comment"># 集成测试</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure><h2 id="flutter-test"><a href="#flutter-test" class="headerlink" title="flutter_test"></a>flutter_test</h2><p>基于dart的test库，用于Flutter项目的测试库，跟其他语言类似，提供了一些测试的方法，如expect、group、test、testWidgets、setUp、tearDown等。</p><p><a href="https://api.flutter.dev/flutter/flutter_test/flutter_test-library.html">https://api.flutter.dev/flutter/flutter_test&#x2F;flutter_test-library.html</a></p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Skip</span>(<span class="string">&#x27;跳过当前测试用例&#x27;</span>)</span><br><span class="line"><span class="meta">@Timeout</span>(<span class="built_in">Duration</span>(seconds: <span class="number">10</span>)) <span class="comment">//设置超时时间</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_test/flutter_test.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line"></span><br><span class="line">  setUp(() &#123; <span class="comment">//在每个测试用例执行前执行</span></span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  tearDown(() &#123; <span class="comment">//在每个测试用例执行后执行</span></span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  test(<span class="string">&#x27;描述测试内容&#x27;</span>, () <span class="keyword">async</span> &#123; <span class="comment">//支持异步测试</span></span><br><span class="line">    expect(<span class="number">1</span>+<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  group(<span class="string">&#x27;描述分组&#x27;</span>, () &#123;</span><br><span class="line"></span><br><span class="line">    test(<span class="string">&#x27;描述测试内容&#x27;</span>, () <span class="keyword">async</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;, skip: <span class="string">&#x27;跳过当前分组&#x27;</span>,</span><br><span class="line">  timeout: Timeout(<span class="built_in">Duration</span>(seconds: <span class="number">10</span>)) <span class="comment">//设置超时时间</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a>方法介绍</h3><ul><li><p>expect：断言，判断是否符合预期</p></li><li><p>group：分组，可以把一些相关的测试用例放在一起</p></li><li><p>test：单个测试用例</p></li><li><p>testWidgets：测试UI</p><ul><li>pumpWidget()：创建并渲染widget</li><li>pump(): 触发widget重建，仅重建已更改的 widget</li><li>pumpAndSettle():在给定期间内不断重复调用 pump() 直到完成所有绘制帧，一般需要等到所有动画全部完成</li></ul></li><li><p>setUp：在每个测试用例执行前执行</p></li><li><p>tearDown：在每个测试用例执行后执行</p></li></ul><p><strong>交互类API</strong></p><ul><li>enterText(): 模拟输入</li><li>tap(): 模拟点击</li><li>drag(): 模拟拖拽</li><li>longPress():模拟长按</li><li>scrollUntilVisible(): 模拟滚动到可见位置</li><li>scrollIntoView(): 模拟滚动到可见位置</li><li>scroll(): 模拟滚动</li><li>fling(): 模拟拖拽</li><li>flingFrom(): 模拟拖拽</li><li>flingFromEdge(): 模拟拖拽</li><li>flingFromCenter(): 模拟拖拽</li></ul><p><strong>使用Finder定位Widget</strong></p><ul><li>text(String text): 查找特定文本的Text widget</li><li>byWidget(Widget widget, {bool skipOffstage &#x3D; true}): 通过widget查找widget</li><li>byKey(Key key): 通过key查找widget</li><li>byType(Type type): 通过类型查找widget</li><li>byWidget(Widget widget):</li><li>byElementType(Type type, { bool skipOffstage &#x3D; true }):</li></ul><p><strong>matchers</strong></p><ul><li><p>findsOneWidget： 找到一个widget</p></li><li><p>findsWidgets：找到一个或多个</p></li><li><p>findsNothing：没有找到</p></li><li><p>findsNWidgets：找到指定数量的widget</p></li><li><p>TestPointer：测试手势，按下、滑动、抬起等</p></li><li><p>TestTextInput：测试输入框</p></li><li><p>AutomatedTestWidgetsFlutterBinding：会模拟用户操作并控制应用程序的状态。它可以处理异步操作、动画和定时器等，以确保测试代码在正确的上下文中运行。通常与 flutter_driver 或其他自动化测试框架一起使用，用于执行集成测试或端到端测试</p></li><li><p>AnimationSheetBuilder：用于测试动画</p></li></ul><h2 id="mockito"><a href="#mockito" class="headerlink" title="mockito"></a>mockito</h2><ul><li><a href="https://pub.dev/packages/mockito">https://pub.dev/packages/mockito</a></li><li><a href="https://juejin.cn/post/7060884659508346893">文档中文翻译</a></li></ul><p>mockito库用来模拟数据。 使用Mockito产生的mock类，需要添加build_runner依赖。有以下主要用途：</p><ul><li>可通过标注或Fake的方式来生成mock类</li><li>可通过when().thenReturn()来模拟方法的返回值</li><li>可通过argThat()来模拟方法的参数</li><li>可通过verify()来验证方法的调用<ul><li>verifyInOrder可校验顺序</li><li>可通过verifyNoMoreInteractions()来验证没有更多的调用</li><li>可通过reset()来重置mock</li><li>可通过verifyZeroInteractions()来验证没有调用</li><li>可通过verifyNever()来验证没有调用</li><li>可通过verifyInOrder()来验证顺序</li><li>可通过verifyStream()来验证Stream</li><li>可通过verifyStreamEvent()来验证Stream的事件</li><li>called能校验调用次数</li><li>captured存储调用时的参数</li></ul></li></ul><h3 id="thenReturn、thenAnswer"><a href="#thenReturn、thenAnswer" class="headerlink" title="thenReturn、thenAnswer"></a>thenReturn、thenAnswer</h3><ul><li>thenReturn会返回Future或Stream，可能抛出ArgumentError</li><li>thenAnswer只会返回Future或Stream</li></ul><h2 id="http-mock-adapter"><a href="#http-mock-adapter" class="headerlink" title="http_mock_adapter"></a>http_mock_adapter</h2><h2 id="bloc-test"><a href="#bloc-test" class="headerlink" title="bloc_test"></a>bloc_test</h2><ul><li><a href="https://pub.dev/packages/bloc_test">https://pub.dev/packages/bloc_test</a></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">void</span> blocTest&lt;B <span class="keyword">extends</span> BlocBase&lt;State&gt;, State&gt;(</span><br><span class="line">  <span class="built_in">String</span> description, &#123; <span class="comment">//测试的描述</span></span><br><span class="line">  <span class="keyword">required</span> B <span class="built_in">Function</span>() build, <span class="comment">//创建bloc</span></span><br><span class="line">  FutureOr&lt;<span class="keyword">void</span>&gt; <span class="built_in">Function</span>()? setUp, <span class="comment">//在每个测试用例执行前执行</span></span><br><span class="line">  State <span class="built_in">Function</span>()? seed,</span><br><span class="line">  <span class="built_in">dynamic</span> <span class="built_in">Function</span>(B bloc)? act, <span class="comment">//执行的动作</span></span><br><span class="line">  <span class="built_in">Duration?</span> wait,</span><br><span class="line">  <span class="built_in">int</span> skip = <span class="number">0</span>,</span><br><span class="line">  <span class="built_in">dynamic</span> <span class="built_in">Function</span>()? expect, <span class="comment">//期望的结果</span></span><br><span class="line">  <span class="built_in">dynamic</span> <span class="built_in">Function</span>(B bloc)? verify,</span><br><span class="line">  <span class="built_in">dynamic</span> <span class="built_in">Function</span>()? errors,</span><br><span class="line">  FutureOr&lt;<span class="keyword">void</span>&gt; <span class="built_in">Function</span>()? tearDown, <span class="comment">//在每个测试用例执行后执行</span></span><br><span class="line">  <span class="built_in">dynamic</span> tags,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="flutter-driver"><a href="#flutter-driver" class="headerlink" title="flutter_driver"></a>flutter_driver</h2><p>集成测试框架</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://mp.weixin.qq.com/s/8JC_vaFOgiJPIH7yfbP25A">5个关键问题让单元测试的价值最大化</a></li><li><a href="https://flutter.cn/docs/cookbook/testing/unit/introduction">单元测试介绍</a></li><li><a href="https://mp.weixin.qq.com/s/Y75fSX92kysSmYrhEH6QFQ">如何写出有效的单元测试</a></li><li><a href="https://www.duidaima.com/Group/Topic/Flutter/10262">Flutter如何Mock MethodChannel进行单元测试</a></li><li><a href></a></li><li><a href></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;单元测试的作用？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保证代码质量，当一个方法在某个版本进行了调整，如果对应的单元测试无法通过，说明这个方法的改动有问题。单元测试中也能包含很多边界条件，甚至可以把测试用例的场景都包含，这样就相当于做了一遍测试的工作，而且可以复用检查，下次迭代时再运行</summary>
      
    
    
    
    <category term="Flutter" scheme="http://airshu.github.io/categories/Flutter/"/>
    
    <category term="单元测试" scheme="http://airshu.github.io/categories/Flutter/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="Flutter 单元测试" scheme="http://airshu.github.io/tags/Flutter-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Flutter项目良好的编码tips</title>
    <link href="http://airshu.github.io/wiki/Flutter/Flutter%E9%A1%B9%E7%9B%AE%E8%89%AF%E5%A5%BD%E7%9A%84%E7%BC%96%E7%A0%81tips/"/>
    <id>http://airshu.github.io/wiki/Flutter/Flutter%E9%A1%B9%E7%9B%AE%E8%89%AF%E5%A5%BD%E7%9A%84%E7%BC%96%E7%A0%81tips/</id>
    <published>2024-03-09T09:31:38.326Z</published>
    <updated>2024-03-09T09:31:38.326Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="./Flutter%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84">Flutter项目结构</a></li><li><a href="./Flutter%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83">代码规范</a></li><li><a href="./Flutter%E9%A1%B9%E7%9B%AE%E8%89%AF%E5%A5%BD%E7%9A%84%E7%BC%96%E7%A0%81tips">良好的编码tips</a></li></ul><p>首先，代码编写需要满足一定的规范，统一团队内的代码风格。参考<a href="./Flutter%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83">Flutter代码规范</a>。除此之外，为了提升质量，还可以设置以下规范和技巧</p><ul><li>如果明确视图不会发生变化，尽量使用StatelessWidget</li><li>如果变量明确不会改变，则使用final修饰</li><li>如果变量明确是常量，则使用const修饰</li><li>注意输入框类型，如果是数字或者邮箱则设置默认键盘类型</li><li>监听器的使用，注意不要在调用多次方法中使用（比如didChangeDependencies），记得不需要时移除监听</li><li>尽量不用print，使用封装的Log工具，设置合适的level。release版本统一去掉print</li><li>catch(e, s)的异常，上报详细信息用于分析具体原因</li><li>异步使用setState前需要判断mounted</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span>(mounted) &#123;</span><br><span class="line">    setState(()&#123;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>scrollcontroller要记得释放资源，一个controller只能对应一个list</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    controller?.dispose();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>按钮请求接口注意添加防重复点击</li><li>建议使用bloc等方式进行精细化刷新UI；处理业务逻辑时尽量控制刷新的最小粒度</li><li>尽量复用代码，继承base class、mixin，复用通用组件</li><li>代码健壮性：是否可能出现异常的代码有catch？能否保障在异常情况下流程还能顺利完成</li><li>可空语法的一些写法</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//对于获取List中的元素，为了安全建议使用</span></span><br><span class="line"><span class="built_in">List</span> list = [];</span><br><span class="line">User? item = list?.elementAtSafe(<span class="number">1</span>);  <span class="comment">//elementAtSafew为扩展函数，如果index对应的元素不存在则返回null，保证空安全</span></span><br><span class="line">User item = list?.elementAtSafe(<span class="number">1</span>) ?? User(); </span><br><span class="line"><span class="comment">//使用?语法，只有当其不为空时才执行后面的代码，elementAtSafe为扩展函数，如果index对应的元素不存在则返回null，保证空安全。第二个参数则设置在没有值的情况下返回一个默认值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//对于后端数据的解析</span></span><br><span class="line"><span class="built_in">Map</span> result = <span class="keyword">await</span> getxxx();</span><br><span class="line"><span class="built_in">double</span> points = (resutl[<span class="string">&#x27;name&#x27;</span>]? <span class="keyword">as</span> <span class="built_in">num?</span>)?.toDouble() ?? <span class="number">2.1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>注意代码分层，不要把UI和业务逻辑全部堆叠在一个文件中，使用状态管理框架，将业务逻辑和UI分离</p></li><li><p>dispose方法中注意会不会出现因为代码异常造成后面释放资源的代码不执行而造成内存泄漏</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;./Flutter%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84&quot;&gt;Flutter项目结构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;./Flutter%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8</summary>
      
    
    
    
    <category term="Flutter" scheme="http://airshu.github.io/categories/Flutter/"/>
    
    
    <category term="Flutter" scheme="http://airshu.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>pull_to_refresh</title>
    <link href="http://airshu.github.io/wiki/Flutter/%E5%BC%80%E6%BA%90%E5%BA%93/pull_to_refresh/"/>
    <id>http://airshu.github.io/wiki/Flutter/%E5%BC%80%E6%BA%90%E5%BA%93/pull_to_refresh/</id>
    <published>2024-03-09T09:31:38.326Z</published>
    <updated>2024-03-09T09:31:38.326Z</updated>
    
    <content type="html"><![CDATA[<p>上拉加载和下拉刷新的组件</p><h2 id="pull-to-refresh"><a href="#pull-to-refresh" class="headerlink" title="pull_to_refresh"></a>pull_to_refresh</h2><p><strong>特性</strong></p><ul><li>提供上拉加载和下拉刷新</li><li>几乎适合所有部件</li><li>提供全局设置默认指示器和属性</li><li>提供多种比较常用的指示器</li><li>支持Android和iOS默认滑动引擎,可限制越界距离,打造自定义弹性动画,速度,阻尼等。</li><li>支持水平和垂直刷新,同时支持翻转列表(四个方向)</li><li>提供多种刷新指示器风格:跟随,不跟随,位于背部,位于前部, 提供多种加载更多风格</li><li>提供二楼刷新,可实现类似淘宝二楼,微信二楼,携程二楼</li><li>允许关联指示器存放在Viewport外部,即朋友圈刷新效果</li></ul><p>通过自定义scroll_physics，监听滚动事件，下拉的过程中进行状态的切换。当完成数据请求后需要手动更新组件的状态。</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; items = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>];</span><br><span class="line">  RefreshController _refreshController =</span><br><span class="line">      RefreshController(initialRefresh: <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _onRefresh() <span class="keyword">async</span>&#123;</span><br><span class="line">    <span class="comment">// monitor network fetch</span></span><br><span class="line">    <span class="keyword">await</span> Future.delayed(<span class="built_in">Duration</span>(milliseconds: <span class="number">1000</span>));</span><br><span class="line">    <span class="comment">// if failed,use refreshFailed()</span></span><br><span class="line">    _refreshController.refreshCompleted();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _onLoading() <span class="keyword">async</span>&#123;</span><br><span class="line">    <span class="comment">// monitor network fetch</span></span><br><span class="line">    <span class="keyword">await</span> Future.delayed(<span class="built_in">Duration</span>(milliseconds: <span class="number">1000</span>));</span><br><span class="line">    <span class="comment">// if failed,use loadFailed(),if no data return,use LoadNodata()</span></span><br><span class="line">    items.add((items.length+<span class="number">1</span>).toString());</span><br><span class="line">    <span class="keyword">if</span>(mounted)</span><br><span class="line">    setState(() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">    _refreshController.loadComplete();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: SmartRefresher(</span><br><span class="line">        enablePullDown: <span class="keyword">true</span>,</span><br><span class="line">        enablePullUp: <span class="keyword">true</span>,</span><br><span class="line">        header: WaterDropHeader(),</span><br><span class="line">        footer: CustomFooter(</span><br><span class="line">          builder: (BuildContext context,LoadStatus mode)&#123;</span><br><span class="line">            Widget body ;</span><br><span class="line">            <span class="keyword">if</span>(mode==LoadStatus.idle)&#123;</span><br><span class="line">              body =  Text(<span class="string">&quot;pull up load&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mode==LoadStatus.loading)&#123;</span><br><span class="line">              body =  CupertinoActivityIndicator();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mode == LoadStatus.failed)&#123;</span><br><span class="line">              body = Text(<span class="string">&quot;Load Failed!Click retry!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mode == LoadStatus.canLoading)&#123;</span><br><span class="line">                body = Text(<span class="string">&quot;release to load more&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">              body = Text(<span class="string">&quot;No more Data&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Container(</span><br><span class="line">              height: <span class="number">55.0</span>,</span><br><span class="line">              child: Center(child:body),</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">        controller: _refreshController,</span><br><span class="line">        onRefresh: _onRefresh,</span><br><span class="line">        onLoading: _onLoading,</span><br><span class="line">        child: ListView.builder(</span><br><span class="line">          itemBuilder: (c, i) =&gt; Card(child: Center(child: Text(items[i]))),</span><br><span class="line">          itemExtent: <span class="number">100.0</span>,</span><br><span class="line">          itemCount: items.length,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局配置子树下的SmartRefresher,下面列举几个特别重要的属性</span></span><br><span class="line">RefreshConfiguration(</span><br><span class="line"> headerBuilder: () =&gt; WaterDropHeader(),        <span class="comment">// 配置默认头部指示器,假如你每个页面的头部指示器都一样的话,你需要设置这个</span></span><br><span class="line"> footerBuilder:  () =&gt; ClassicFooter(),        <span class="comment">// 配置默认底部指示器</span></span><br><span class="line"> headerTriggerDistance: <span class="number">80.0</span>,        <span class="comment">// 头部触发刷新的越界距离</span></span><br><span class="line"> springDescription:SpringDescription(stiffness: <span class="number">170</span>, damping: <span class="number">16</span>, mass: <span class="number">1.9</span>),         <span class="comment">// 自定义回弹动画,三个属性值意义请查询flutter api</span></span><br><span class="line"> maxOverScrollExtent :<span class="number">100</span>, <span class="comment">//头部最大可以拖动的范围,如果发生冲出视图范围区域,请设置这个属性</span></span><br><span class="line"> maxUnderScrollExtent:<span class="number">0</span>, <span class="comment">// 底部最大可以拖动的范围</span></span><br><span class="line"> enableScrollWhenRefreshCompleted: <span class="keyword">true</span>, <span class="comment">//这个属性不兼容PageView和TabBarView,如果你特别需要TabBarView左右滑动,你需要把它设置为true</span></span><br><span class="line"> enableLoadingWhenFailed : <span class="keyword">true</span>, <span class="comment">//在加载失败的状态下,用户仍然可以通过手势上拉来触发加载更多</span></span><br><span class="line"> hideFooterWhenNotFull: <span class="keyword">false</span>, <span class="comment">// Viewport不满一屏时,禁用上拉加载更多功能</span></span><br><span class="line"> enableBallisticLoad: <span class="keyword">true</span>, <span class="comment">// 可以通过惯性滑动触发加载更多</span></span><br><span class="line"> child: MaterialApp(</span><br><span class="line">    ........</span><br><span class="line"> )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="easy-refresh"><a href="#easy-refresh" class="headerlink" title="easy_refresh"></a>easy_refresh</h2><p>由于pull_to_refresh已经很久不更新了，新的Flutter SDK使用easy_refresh替代，支持Flutter SDK 3.x</p><p><strong>特性</strong></p><ul><li>支持所有的滚动组件</li><li>滚动物理作用域，精确匹配滚动组件</li><li>集成多个炫酷的 Header 和 Footer</li><li>支持自定义样式，实现各种动画效果</li><li>支持下拉刷新、上拉加载(可使用控制器触发和结束)</li><li>支持指示器位置设定，结合监听器也放置在任何位置</li><li>支持页面启动时刷新，并自定义视图</li><li>支持安全区域，不再有遮挡</li><li>自定义滚动参数，让列表具有不同的滚动反馈和惯性</li></ul><h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">EasyRefresh(</span><br><span class="line">  <span class="comment">//顶部指示器</span></span><br><span class="line">  header: Header(</span><br><span class="line">    position: IndicatorPosition.locator,</span><br><span class="line">  ),</span><br><span class="line">  footer: Footer(</span><br><span class="line">    position: IndicatorPosition.locator,</span><br><span class="line">  ),</span><br><span class="line">  <span class="comment">//刷新</span></span><br><span class="line">  onRefresh: () <span class="keyword">async</span> &#123;</span><br><span class="line">    ....</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//翻页</span></span><br><span class="line">  onLoad: () <span class="keyword">async</span> &#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">return</span> IndicatorResult.noMore;</span><br><span class="line">  &#125;,</span><br><span class="line">  child: CustomScrollView(</span><br><span class="line">    slivers: [</span><br><span class="line">      SliverAppBar(),</span><br><span class="line">      <span class="keyword">const</span> HeaderLocator.sliver(),</span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">const</span> FooterLocator.sliver(),</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/peng8350/flutter_pulltorefresh">https://github.com/peng8350/flutter_pulltorefresh</a></li><li><a href="https://pub.dev/packages/easy_refresh">https://pub.dev/packages/easy_refresh</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上拉加载和下拉刷新的组件&lt;/p&gt;
&lt;h2 id=&quot;pull-to-refresh&quot;&gt;&lt;a href=&quot;#pull-to-refresh&quot; class=&quot;headerlink&quot; title=&quot;pull_to_refresh&quot;&gt;&lt;/a&gt;pull_to_refresh&lt;/h2&gt;&lt;</summary>
      
    
    
    
    <category term="Flutter" scheme="http://airshu.github.io/categories/Flutter/"/>
    
    <category term="开源库" scheme="http://airshu.github.io/categories/Flutter/%E5%BC%80%E6%BA%90%E5%BA%93/"/>
    
    
    <category term="Flutter" scheme="http://airshu.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>form_bloc</title>
    <link href="http://airshu.github.io/wiki/Flutter/%E5%BC%80%E6%BA%90%E5%BA%93/form_bloc/"/>
    <id>http://airshu.github.io/wiki/Flutter/%E5%BC%80%E6%BA%90%E5%BA%93/form_bloc/</id>
    <published>2024-03-09T09:31:38.326Z</published>
    <updated>2024-03-09T09:31:38.326Z</updated>
    
    <content type="html"><![CDATA[<p>form_bloc是结合bloc的表单库，运用bloc的特性实现UI和逻辑的分离，使得表单的逻辑更加清晰，代码更加简洁。</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_form_bloc/flutter_form_bloc.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(<span class="keyword">const</span> App());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> App(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> MaterialApp(</span><br><span class="line">      debugShowCheckedModeBanner: <span class="keyword">false</span>,</span><br><span class="line">      home: LoginForm(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginFormBloc</span> <span class="keyword">extends</span> <span class="title">FormBloc</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 不同的表单项对应不同的FieldBloc</span></span><br><span class="line">  <span class="keyword">final</span> email = TextFieldBloc(</span><br><span class="line">    validators: [</span><br><span class="line">      FieldBlocValidators.<span class="keyword">required</span>,</span><br><span class="line">      FieldBlocValidators.email,</span><br><span class="line">    ],</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> password = TextFieldBloc(</span><br><span class="line">    validators: [</span><br><span class="line">      FieldBlocValidators.<span class="keyword">required</span>,</span><br><span class="line">    ],</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> showSuccessResponse = BooleanFieldBloc();</span><br><span class="line"></span><br><span class="line">  LoginFormBloc() &#123;</span><br><span class="line">    <span class="comment">//添加表单项</span></span><br><span class="line">    addFieldBlocs(</span><br><span class="line">      fieldBlocs: [</span><br><span class="line">        email,</span><br><span class="line">        password,</span><br><span class="line">        showSuccessResponse,</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown">表单提交方法</span></span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> onSubmitting() <span class="keyword">async</span> &#123;</span><br><span class="line">    debugPrint(email.value);</span><br><span class="line">    debugPrint(password.value);</span><br><span class="line">    debugPrint(showSuccessResponse.value.toString());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> Future&lt;<span class="keyword">void</span>&gt;.delayed(<span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提交进度变化</span></span><br><span class="line">    emitSubmitting(progress: <span class="number">0.2</span>);</span><br><span class="line">    <span class="keyword">await</span> Future&lt;<span class="keyword">void</span>&gt;.delayed(<span class="built_in">Duration</span>(milliseconds: <span class="number">400</span>));    </span><br><span class="line">    emitSubmitting(progress: <span class="number">0.6</span>);</span><br><span class="line">    <span class="keyword">await</span> Future&lt;<span class="keyword">void</span>&gt;.delayed(<span class="built_in">Duration</span>(milliseconds: <span class="number">400</span>));  </span><br><span class="line">    emitSubmitting(progress: <span class="number">1.0</span>);</span><br><span class="line">    <span class="comment">//取消提交</span></span><br><span class="line">    <span class="comment">//emitSubmissionCancelled();</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (showSuccessResponse.value) &#123;</span><br><span class="line">      emitSuccess(); <span class="comment">//提交成功，发送成功消息，触发UI更新</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      emitFailure(failureResponse: <span class="string">&#x27;This is an awesome error!&#x27;</span>); <span class="comment">//提交失败，发送失败消息，触发UI更新</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; close() &#123;</span><br><span class="line">    <span class="comment">// 释放所有表单项</span></span><br><span class="line">    email.close();</span><br><span class="line">    password.close();</span><br><span class="line">    showSuccessResponse.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> LoginForm(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> BlocProvider(</span><br><span class="line">      create: (context) =&gt; LoginFormBloc(),</span><br><span class="line">      child: Builder(</span><br><span class="line">        builder: (context) &#123;</span><br><span class="line">          <span class="keyword">final</span> loginFormBloc = context.read&lt;LoginFormBloc&gt;();</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> Scaffold(</span><br><span class="line">            resizeToAvoidBottomInset: <span class="keyword">false</span>,</span><br><span class="line">            appBar: AppBar(title: <span class="keyword">const</span> Text(<span class="string">&#x27;Login&#x27;</span>)),</span><br><span class="line">            body: FormBlocListener&lt;LoginFormBloc, <span class="built_in">String</span>, <span class="built_in">String</span>&gt;(</span><br><span class="line">              onSubmitting: (context, state) &#123;</span><br><span class="line">                LoadingDialog.<span class="keyword">show</span>(context);</span><br><span class="line">              &#125;,</span><br><span class="line">              onSubmissionFailed: (context, state) &#123;</span><br><span class="line">                LoadingDialog.<span class="keyword">hide</span>(context);</span><br><span class="line">              &#125;,</span><br><span class="line">              onSuccess: (context, state) &#123;</span><br><span class="line">                LoadingDialog.<span class="keyword">hide</span>(context);</span><br><span class="line"></span><br><span class="line">                Navigator.of(context).pushReplacement(</span><br><span class="line">                    MaterialPageRoute(builder: (_) =&gt; <span class="keyword">const</span> SuccessScreen()));</span><br><span class="line">              &#125;,</span><br><span class="line">              onFailure: (context, state) &#123;</span><br><span class="line">                LoadingDialog.<span class="keyword">hide</span>(context);</span><br><span class="line"></span><br><span class="line">                ScaffoldMessenger.of(context).showSnackBar(</span><br><span class="line">                    SnackBar(content: Text(state.failureResponse!)));</span><br><span class="line">              &#125;,</span><br><span class="line">              child: SingleChildScrollView(</span><br><span class="line">                physics: <span class="keyword">const</span> ClampingScrollPhysics(),</span><br><span class="line">                child: AutofillGroup(</span><br><span class="line">                  child: Column(</span><br><span class="line">                    children: &lt;Widget&gt;[</span><br><span class="line">                      TextFieldBlocBuilder(</span><br><span class="line">                        textFieldBloc: loginFormBloc.email,</span><br><span class="line">                        keyboardType: TextInputType.emailAddress,</span><br><span class="line">                        autofillHints: <span class="keyword">const</span> [</span><br><span class="line">                          AutofillHints.username,</span><br><span class="line">                        ],</span><br><span class="line">                        decoration: <span class="keyword">const</span> InputDecoration(</span><br><span class="line">                          labelText: <span class="string">&#x27;Email&#x27;</span>,</span><br><span class="line">                          prefixIcon: Icon(Icons.email),</span><br><span class="line">                        ),</span><br><span class="line">                      ),</span><br><span class="line">                      TextFieldBlocBuilder(</span><br><span class="line">                        textFieldBloc: loginFormBloc.password,</span><br><span class="line">                        suffixButton: SuffixButton.obscureText,</span><br><span class="line">                        autofillHints: <span class="keyword">const</span> [AutofillHints.password],</span><br><span class="line">                        decoration: <span class="keyword">const</span> InputDecoration(</span><br><span class="line">                          labelText: <span class="string">&#x27;Password&#x27;</span>,</span><br><span class="line">                          prefixIcon: Icon(Icons.lock),</span><br><span class="line">                        ),</span><br><span class="line">                      ),</span><br><span class="line">                      SizedBox(</span><br><span class="line">                        width: <span class="number">250</span>,</span><br><span class="line">                        child: CheckboxFieldBlocBuilder(</span><br><span class="line">                          booleanFieldBloc: loginFormBloc.showSuccessResponse,</span><br><span class="line">                          body: Container(</span><br><span class="line">                            alignment: Alignment.centerLeft,</span><br><span class="line">                            child: <span class="keyword">const</span> Text(<span class="string">&#x27;Show success response&#x27;</span>),</span><br><span class="line">                          ),</span><br><span class="line">                        ),</span><br><span class="line">                      ),</span><br><span class="line">                      ElevatedButton(</span><br><span class="line">                        onPressed: loginFormBloc.submit,</span><br><span class="line">                        child: <span class="keyword">const</span> Text(<span class="string">&#x27;LOGIN&#x27;</span>),</span><br><span class="line">                      ),</span><br><span class="line">                    ],</span><br><span class="line">                  ),</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoadingDialog</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">show</span>(BuildContext context, &#123;Key? key&#125;) =&gt; showDialog&lt;<span class="keyword">void</span>&gt;(</span><br><span class="line">        context: context,</span><br><span class="line">        useRootNavigator: <span class="keyword">false</span>,</span><br><span class="line">        barrierDismissible: <span class="keyword">false</span>,</span><br><span class="line">        builder: (_) =&gt; LoadingDialog(key: key),</span><br><span class="line">      ).then((_) =&gt; FocusScope.of(context).requestFocus(FocusNode()));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">hide</span>(BuildContext context) =&gt; Navigator.pop(context);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> LoadingDialog(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> WillPopScope(</span><br><span class="line">      onWillPop: () <span class="keyword">async</span> =&gt; <span class="keyword">false</span>,</span><br><span class="line">      child: Center(</span><br><span class="line">        child: Card(</span><br><span class="line">          child: Container(</span><br><span class="line">            width: <span class="number">80</span>,</span><br><span class="line">            height: <span class="number">80</span>,</span><br><span class="line">            padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">12.0</span>),</span><br><span class="line">            child: <span class="keyword">const</span> CircularProgressIndicator(),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuccessScreen</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> SuccessScreen(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            <span class="keyword">const</span> Icon(Icons.tag_faces, size: <span class="number">100</span>),</span><br><span class="line">            <span class="keyword">const</span> SizedBox(height: <span class="number">10</span>),</span><br><span class="line">            <span class="keyword">const</span> Text(</span><br><span class="line">              <span class="string">&#x27;Success&#x27;</span>,</span><br><span class="line">              style: TextStyle(fontSize: <span class="number">54</span>, color: Colors.black),</span><br><span class="line">              textAlign: TextAlign.center,</span><br><span class="line">            ),</span><br><span class="line">            <span class="keyword">const</span> SizedBox(height: <span class="number">10</span>),</span><br><span class="line">            ElevatedButton.icon(</span><br><span class="line">              onPressed: () =&gt; Navigator.of(context).pushReplacement(</span><br><span class="line">                  MaterialPageRoute(builder: (_) =&gt; <span class="keyword">const</span> LoginForm())),</span><br><span class="line">              icon: <span class="keyword">const</span> Icon(Icons.replay),</span><br><span class="line">              label: <span class="keyword">const</span> Text(<span class="string">&#x27;AGAIN&#x27;</span>),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="表单项类型"><a href="#表单项类型" class="headerlink" title="表单项类型"></a>表单项类型</h3><ul><li>SingleFieldBloc</li><li>TextFieldBloc</li><li>SelectFieldBloc</li><li>InputFieldBloc</li><li>MultiFieldBloc</li><li>BooleanFieldBloc</li><li>MultiSelectFieldBloc</li><li>GroupFieldBloc：一组表单项</li><li>ListFieldBloc</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">更新数据</span></span></span><br><span class="line"><span class="keyword">void</span> updateValue(Value value) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">监听数据变化</span></span></span><br><span class="line">StreamSubscription&lt;<span class="built_in">dynamic</span>&gt; onValueChanges&lt;R&gt;(&#123;</span><br><span class="line">    <span class="built_in">Duration</span> debounceTime = <span class="keyword">const</span> <span class="built_in">Duration</span>(),</span><br><span class="line">    <span class="keyword">void</span> <span class="built_in">Function</span>(State previous, State current)? onStart,</span><br><span class="line">    <span class="keyword">required</span> Stream&lt;R&gt; <span class="built_in">Function</span>(State previous, State current) onData,</span><br><span class="line">    <span class="keyword">void</span> <span class="built_in">Function</span>(State previous, State current, R result)? onFinish,</span><br><span class="line">  &#125;)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">手动校验表单项</span></span></span><br><span class="line">Future&lt;<span class="built_in">bool</span>&gt; validate() &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="FieldBloc的用法"><a href="#FieldBloc的用法" class="headerlink" title="FieldBloc的用法"></a>FieldBloc的用法</h3><p>表单的属性都通过FieldBloc来管理，比如是否必填、默认选项、校验规则等。</p><h3 id="FormBlocListener"><a href="#FormBlocListener" class="headerlink" title="FormBlocListener"></a>FormBlocListener</h3><p>FormBlocListener监听一个FormBloc的状态，并根据状态的变化来执行一些操作。它接受三个参数：一个FormBloc，一个在表单提交成功时执行的回调函数，和一个在表单提交失败时执行的回调函数。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">FormBlocListener&lt;MyFormBloc, <span class="built_in">String</span>, <span class="built_in">String</span>&gt;(</span><br><span class="line">  onSubmitting: (context, state) &#123;</span><br><span class="line">    <span class="comment">// Show a loading indicator</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onSuccess: (context, state) &#123;</span><br><span class="line">    <span class="comment">// Navigate to another screen</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onFailure: (context, state) &#123;</span><br><span class="line">    <span class="comment">// Show an error message</span></span><br><span class="line">  &#125;,</span><br><span class="line">  child: ...,</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="BlocBuilder"><a href="#BlocBuilder" class="headerlink" title="BlocBuilder"></a>BlocBuilder</h3><p>用于连接FieldBloc和任何Widget，有以下类型：</p><ul><li>TextFieldBlocBuilder</li><li>DropdownFieldBlocBuilder</li><li>RadioButtonGroupFieldBlocBuilder</li><li>CheckboxFieldBlocBuilder</li><li>SwitchFieldBlocBuilder</li><li>CheckboxGroupFieldBlocBuilder</li><li>DateTimeFieldBlocBuilder</li><li>TimeFieldBlocBuilder</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TextFieldBlocBuilder(</span><br><span class="line">  textFieldBloc: loginFormBloc.email,<span class="comment">//关联bloc</span></span><br><span class="line">  autofillHints: [AutofillHints.username,AutofillHints.email],</span><br><span class="line">  keyboardType: TextInputType.emailAddress,</span><br><span class="line">  decoration: InputDecoration(</span><br><span class="line">    labelText: <span class="string">&#x27;Email&#x27;</span>,</span><br><span class="line">    prefixIcon: Icon(Icons.email),</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><h3 id="展示表单项的错误提示"><a href="#展示表单项的错误提示" class="headerlink" title="展示表单项的错误提示"></a>展示表单项的错误提示</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">xxx.addFieldError(<span class="string">&#x27;That username is taken. Try another.&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="加载初始数据"><a href="#加载初始数据" class="headerlink" title="加载初始数据"></a>加载初始数据</h2><h3 id="1-FormBloc构造函数的isLoading设置为true"><a href="#1-FormBloc构造函数的isLoading设置为true" class="headerlink" title="1. FormBloc构造函数的isLoading设置为true"></a>1. FormBloc构造函数的isLoading设置为true</h3><h3 id="2-实现onLoading方法，使用updateInitialValue（updateItems）方法更新数据。完成数据赋值后，发送emitLoaded消息"><a href="#2-实现onLoading方法，使用updateInitialValue（updateItems）方法更新数据。完成数据赋值后，发送emitLoaded消息" class="headerlink" title="2. 实现onLoading方法，使用updateInitialValue（updateItems）方法更新数据。完成数据赋值后，发送emitLoaded消息"></a>2. 实现onLoading方法，使用updateInitialValue（updateItems）方法更新数据。完成数据赋值后，发送emitLoaded消息</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _throwException = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> onLoading() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> Future&lt;<span class="keyword">void</span>&gt;.delayed(<span class="built_in">Duration</span>(milliseconds: <span class="number">1500</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_throwException) &#123;</span><br><span class="line">      <span class="comment">// Simulate network error</span></span><br><span class="line">      <span class="keyword">throw</span> Exception(<span class="string">&#x27;Network request failed. Please try again later.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    text.updateInitialValue(<span class="string">&#x27;I am prefilled&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    select</span><br><span class="line">      ..updateItems([<span class="string">&#x27;Option A&#x27;</span>, <span class="string">&#x27;Option B&#x27;</span>, <span class="string">&#x27;Option C&#x27;</span>])</span><br><span class="line">      ..updateInitialValue(<span class="string">&#x27;Option B&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    emitLoaded();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    _throwException = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    emitLoadFailed();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-UI层处理"><a href="#3-UI层处理" class="headerlink" title="3. UI层处理"></a>3. UI层处理</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">child: BlocBuilder&lt;LoadingFormBloc, FormBlocState&gt;(</span><br><span class="line">  condition: (previous, current) &#123;</span><br><span class="line">    <span class="comment">//优化刷新频率</span></span><br><span class="line">    <span class="keyword">return</span> previous.runtimeType != current.runtimeType;</span><br><span class="line">  &#125;,</span><br><span class="line">  builder: (context, state) &#123;</span><br><span class="line">    <span class="comment">//根据不同状态显示不同的UI</span></span><br><span class="line">    <span class="keyword">if</span> (state <span class="keyword">is</span> FormBlocLoading) &#123;</span><br><span class="line">      <span class="keyword">return</span> LoadingWidget();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state <span class="keyword">is</span> FormBlocLoadFailed) &#123;</span><br><span class="line">      <span class="keyword">return</span> LoadFailedWidget();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> LoadedWidget();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">),</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="表单项关联校验"><a href="#表单项关联校验" class="headerlink" title="表单项关联校验"></a>表单项关联校验</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFormBloc</span> <span class="keyword">extends</span> <span class="title">FormBloc</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> password = TextFieldBloc(</span><br><span class="line">    validators: [FieldBlocValidators.<span class="keyword">required</span>],</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">final</span> confirmPassword = TextFieldBloc(</span><br><span class="line">    validators: [FieldBlocValidators.<span class="keyword">required</span>],</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Validator&lt;<span class="built_in">String</span>&gt; _confirmPassword(</span><br><span class="line">    TextFieldBloc passwordTextFieldBloc,</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">String</span> confirmPassword) &#123;</span><br><span class="line">      <span class="keyword">if</span> (confirmPassword == passwordTextFieldBloc.value) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;Must be equal to password&#x27;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  MyFormBloc() &#123;</span><br><span class="line">    addFieldBlocs(</span><br><span class="line">      fieldBlocs: [password, confirmPassword],</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    confirmPassword</span><br><span class="line">      ..addValidators([_confirmPassword(password)])</span><br><span class="line">      ..subscribeToFieldBlocs([password]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Or you can use built-in confirm password validator</span></span><br><span class="line">    <span class="comment">// confirmPassword</span></span><br><span class="line">    <span class="comment">//   ..addValidators([FieldBlocValidators.confirmPassword(password)])</span></span><br><span class="line">    <span class="comment">//   ..subscribeToFieldBlocs([password]);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="动态添加或删除表单项"><a href="#动态添加或删除表单项" class="headerlink" title="动态添加或删除表单项"></a>动态添加或删除表单项</h2><p>使用addFieldBlocs和removeFieldBlocs方法</p><h2 id="自定义表单项"><a href="#自定义表单项" class="headerlink" title="自定义表单项"></a>自定义表单项</h2><h3 id="1-自定义FieldBloc"><a href="#1-自定义FieldBloc" class="headerlink" title="1. 自定义FieldBloc"></a>1. 自定义FieldBloc</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomFieldBloc</span> <span class="keyword">extends</span> <span class="title">SingleFieldBloc</span>&lt;<span class="title">String</span>, <span class="title">String</span>, <span class="title">CustomState</span>&lt;<span class="title">T</span>&gt;, <span class="title">T</span>?&gt; </span>&#123;</span><br><span class="line">  CustomFieldBloc(&#123;</span><br><span class="line">    <span class="built_in">String?</span> initialValue,</span><br><span class="line">    <span class="keyword">required</span> <span class="built_in">String</span> <span class="built_in">Function</span>(<span class="built_in">String</span> value) validator,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(</span><br><span class="line">          initialValue: initialValue, <span class="comment">//初始值</span></span><br><span class="line">          validator: validator, <span class="comment">//校验器</span></span><br><span class="line">          asyncValidators: [], <span class="comment">//异步校验器</span></span><br><span class="line">          asyncValidatorDebounceTime: <span class="built_in">Duration</span>.zero, <span class="comment">//异步校验器的防抖时间</span></span><br><span class="line">          initialState: CustomState(),</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;CustomFieldBloc&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-自定义Widget，关联FieldBloc"><a href="#2-自定义Widget，关联FieldBloc" class="headerlink" title="2. 自定义Widget，关联FieldBloc"></a>2. 自定义Widget，关联FieldBloc</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomFieldBlocBuilder</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> CustomFieldBloc fieldBloc;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> CustomFieldBlocBuilder(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.fieldBloc,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> BlocBuilder&lt;CustomFieldBloc, CustomState&gt;(</span><br><span class="line">      bloc: fieldBloc,</span><br><span class="line">      builder: (context, state) &#123;</span><br><span class="line">        <span class="keyword">return</span> TextField(</span><br><span class="line">          onChanged: (value) &#123;</span><br><span class="line">            fieldBloc.updateValue(value);</span><br><span class="line">          &#125;,</span><br><span class="line">          decoration: InputDecoration(</span><br><span class="line">            labelText: <span class="string">&#x27;Custom&#x27;</span>,</span><br><span class="line">            errorText: state.error,</span><br><span class="line">          ),</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://pub.dev/packages/form_bloc">https://pub.dev/packages/form_bloc</a></li><li><a href="https://giancarlocode.github.io/form_bloc/#/">https://giancarlocode.github.io/form_bloc&#x2F;#&#x2F;</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;form_bloc是结合bloc的表单库，运用bloc的特性实现UI和逻辑的分离，使得表单的逻辑更加清晰，代码更加简洁。&lt;/p&gt;
&lt;h2 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/</summary>
      
    
    
    
    <category term="Flutter" scheme="http://airshu.github.io/categories/Flutter/"/>
    
    <category term="开源库" scheme="http://airshu.github.io/categories/Flutter/%E5%BC%80%E6%BA%90%E5%BA%93/"/>
    
    
    <category term="Flutter" scheme="http://airshu.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter项目Android端构建流程</title>
    <link href="http://airshu.github.io/wiki/Flutter/Android%E7%AB%AF/Flutter%E9%A1%B9%E7%9B%AEAndroid%E7%AB%AF%E6%9E%84%E5%BB%BA%E6%B5%81%E7%A8%8B/"/>
    <id>http://airshu.github.io/wiki/Flutter/Android%E7%AB%AF/Flutter%E9%A1%B9%E7%9B%AEAndroid%E7%AB%AF%E6%9E%84%E5%BB%BA%E6%B5%81%E7%A8%8B/</id>
    <published>2024-03-09T09:31:38.325Z</published>
    <updated>2024-03-09T09:31:38.326Z</updated>
    
    
    
    
    <category term="Flutter" scheme="http://airshu.github.io/categories/Flutter/"/>
    
    <category term="Android端" scheme="http://airshu.github.io/categories/Flutter/Android%E7%AB%AF/"/>
    
    
    <category term="Flutter" scheme="http://airshu.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>ReactiveX</title>
    <link href="http://airshu.github.io/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/%E6%9D%82%E9%A1%B9/ReactiveX/"/>
    <id>http://airshu.github.io/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/%E6%9D%82%E9%A1%B9/ReactiveX/</id>
    <published>2024-02-12T02:23:36.670Z</published>
    <updated>2024-02-12T02:23:36.670Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Observables"><a href="#Observables" class="headerlink" title="Observables"></a>Observables</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>ReactiveX是Reactive Extensions的缩写，一般简写为Rx，最初是LINQ的一个扩展，由微软的架构师Erik Meijer领导的团队开发，在2012年11月开源，Rx是一个编程模型，目标是提供一致的编程接口，帮助开发者更方便的处理异步数据流，Rx库支持大部分主流语<br>言。</p><p>使用这种方法的优点是，当你有一大堆的任务是不相互依赖，你就可以同时执行他们，而不是等待每一个类启动下一个前完成，这样你的整个任务包只需要花最长的任务时间。</p><p>在ReactiveX中，一个观察者(Observer)订阅一个可观察对象(Observable)。观察者对Observable发射的数据或数据序列作出响应。这种模式可以极大地简化并发操作，因为它创建了一个处于待命状态的观察者哨兵，在未来某个时刻响应Observable的通知，不需要阻塞等待Observable发射数据。</p><p><img src="/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/%E6%9D%82%E9%A1%B9/ReactiveX/rx_legend.png"></p><h4 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h4><p>在很多软件编程任务中，或多或少你都会期望你写的代码能按照编写的顺序，一次一个的顺序执行和完成。但是在ReactiveX中，很多指令可能是并行执行的，之后他们的执行结果才会被观察者捕获，顺序是不确定的。为达到这个目的，你定义一种获取和变换数据的机制，而不是调用一个方法。在这种机制下，存在一个可观察对象(Observable)，观察者(Observer)订阅(Subscribe)它，当数据就绪时，之前定义的机制就会分发数据给一直处于等待状态的观察者哨兵。</p><p>这种方法的优点是，如果你有大量的任务要处理，它们互相之间没有依赖关系。你可以同时开始执行它们，不用等待一个完成再开始下一个（用这种方式，你的整个任务队列能耗费的最长时间，不会超过任务里最耗时的那个）。</p><p>有很多术语可用于描述这种异步编程和设计模式，在本文里我们使用这些术语：一个观察者订阅一个可观察对象 (An observer subscribes to an Observable)。通过调用观察者的方法，Observable发射数据或通知给它的观察者。</p><p>在其它的文档和场景里，有时我们也将Observer叫做Subscriber、Watcher、Reactor。这个模型通常被称作Reactor模式。</p><h4 id="创建观察者"><a href="#创建观察者" class="headerlink" title="创建观察者"></a>创建观察者</h4><p>关于Observers的创建</p><p><strong>同步方式：</strong></p><ol><li>调用一个方法</li><li>用一个变量存储方法返回值</li><li>使用这个变量作为一个新的值做其他事情</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//写一个回调</span><br><span class="line">returnVal = someMethod(paramters);</span><br><span class="line">//做新的事情</span><br></pre></td></tr></table></figure><p><strong>异步方式：</strong></p><ol><li>定义一个方法，此方法是做一些事情并带有来之于异步调用的返回值；这个方法也是observer的一部分</li><li>定义异步调用自身作为一个Observable</li><li>通过订阅的方式连接observer到Observable</li><li>执行你的业务</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def myOnNext = &#123;it-&gt;do something useful with it&#125;;</span><br><span class="line">def myObservable = someOvservable(itsParamters);</span><br><span class="line">myObservable.subscribe(myOnNext);</span><br></pre></td></tr></table></figure><h4 id="onNext，onCompleted，onError回调"><a href="#onNext，onCompleted，onError回调" class="headerlink" title="onNext，onCompleted，onError回调"></a>onNext，onCompleted，onError回调</h4><ul><li>onNext：每当Observable广播数据时将会调用该方法，这个方法将会被作为Observable的一个广播项目参数被发送</li><li>onError：表示内部已经发生异常</li><li>onCompleted：成功调用onNext</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def myOnNext     = &#123; item -&gt; /* 任务执行 */ &#125;;</span><br><span class="line">def myError      = &#123; throwable -&gt; /* 失败时的响应 */ &#125;;</span><br><span class="line">def myComplete   = &#123; /* 成功后的响应 */ &#125;;</span><br><span class="line">def myObservable = someMethod(itsParameters);</span><br><span class="line">myObservable.subscribe(myOnNext, myError, myComplete);</span><br><span class="line">// 继续执行相应的业务逻辑</span><br></pre></td></tr></table></figure><h4 id="取消订阅（Ubsubscribing）"><a href="#取消订阅（Ubsubscribing）" class="headerlink" title="取消订阅（Ubsubscribing）"></a>取消订阅（Ubsubscribing）</h4><p>在一些ReactiveX实现中，有一个特殊的观察者接口Subscriber，它有一个unsubscribe方法。调用这个方法表示你不关心当前订阅的Observable了，因此Observable可以选择停止发射新的数据项（如果没有其它观察者订阅）。</p><p>取消订阅的结果会传递给这个Observable的操作符链，而且会导致这个链条上的每个环节都停止发射数据项。这些并不保证会立即发生，然而，对一个Observable来说，即使没有观察者了，它也可以在一个while循环中继续生成并尝试发射数据项。</p><h4 id="关于命名约定"><a href="#关于命名约定" class="headerlink" title="关于命名约定"></a>关于命名约定</h4><p>ReactiveX的每种特定语言的实现都有自己的命名偏好，虽然不同的实现之间有很多共同点，但并不存在一个统一的命名标准。</p><p>而且，在某些场景中，一些名字有不同的隐含意义，或者在某些语言看来比较怪异。</p><p>例如，有一个onEvent命名模式(onNext, onCompleted, onError)，在一些场景中，这些名字可能意味着事件处理器已经注册。然而在ReactiveX里，他们是事件处理器的名字。</p><h4 id="Observables的”热”和”冷”"><a href="#Observables的”热”和”冷”" class="headerlink" title="Observables的”热”和”冷”"></a>Observables的”热”和”冷”</h4><p>Observable什么时候开始发射数据序列？这取决于Observable的实现，一个”热”的Observable可能一创建完就开始发射数据，因此所有后续订阅它的观察者可能从序列中间的某个位置开始接受数据（有一些数据错过了）。一个”冷”的Observable会一直等待，直到有观察者订阅它才开始发射数据，因此这个观察者可以确保会收到整个数据序列。</p><p>在一些ReactiveX实现里，还存在一种被称作Connectable的Observable，不管有没有观察者订阅它，这种Observable都不会开始发射数据，除非Connect方法被调用。</p><h4 id="用操作符组合Ovservable"><a href="#用操作符组合Ovservable" class="headerlink" title="用操作符组合Ovservable"></a>用操作符组合Ovservable</h4><p><strong>创建新的Observables的操作符：</strong></p><ul><li>Create</li><li>Defer</li><li>Empty&#x2F;Never&#x2F;Throw</li><li>From</li><li>Interval</li><li>Just</li><li>Range</li><li>Repeat</li><li>Start</li><li>Timer</li></ul><p><strong>转换被一个Observable发送的项目的操作符</strong></p><ul><li>Buffer</li><li>FlatMap：进行一对多或多对多转换</li><li>GroupBy</li><li>Map:进行一对一转换</li><li>Scan</li><li>Window</li></ul><p><strong>过滤被Observable发送的项目的操作符</strong></p><ul><li>Debounce</li><li>Distinct</li><li>ElementAt</li><li>Filter</li><li>First</li><li>IgnoreElements</li><li>Last</li><li>Sample</li><li>Skip</li><li>SkipLast</li><li>Take</li><li>TakeLast</li></ul><p><strong>将多个Observable合并成单个Observable的操作符</strong></p><ul><li>And&#x2F;Then&#x2F;When</li><li>CombineLatest</li><li>Join</li><li>Merge</li><li>StartWith</li><li>Switch</li><li>Zip</li></ul><p><strong>错误处理操作符</strong></p><ul><li>Catch</li><li>Retry</li></ul><p><strong>实用工具操作符</strong></p><ul><li>Delay</li><li>Do</li><li>Materialize&#x2F;Dematerialize</li><li>ObserveOn</li><li>Serialize</li><li>Subscribe</li><li>SubscribeOn</li><li>TimeInterval</li><li>Timeout</li><li>Timestamp</li><li>Using</li></ul><p><strong>条件和布尔运算操作符</strong></p><ul><li>All</li><li>Amb</li><li>Contains</li><li>DefaultIfEmpty</li><li>SequenceEqual</li><li>SkipUntil</li><li>SkipWhile</li><li>TakeUntil</li><li>TakeWhile</li></ul><p><strong>算术和集合操作符</strong></p><ul><li>Average</li><li>Concat</li><li>Count</li><li>Max</li><li>Min</li><li>Reduce</li><li>Sum</li></ul><p><strong>转换操作符</strong></p><ul><li>To</li></ul><p><strong>可连接Obervable的操作符</strong></p><ul><li>Connect</li><li>Publish</li><li>RefCount</li><li>Replay</li></ul><h3 id="Single"><a href="#Single" class="headerlink" title="Single"></a>Single</h3><p>RxJava（以及它派生出来的RxGroovy和RxScala）中有一个名为Single的Observable变种。</p><p>Single类似于Observable，不同的是，它总是只发射一个值，或者一个错误通知，而不是发射一系列的值。</p><p>因此，不同于Observable需要三个方法onNext, onError, onCompleted，订阅Single只需要两个方法：</p><ul><li>onSuccess - Single发射单个的值到这个方法</li><li>onError - 如果无法发射需要的值，Single发射一个Throwable对象到这个方法</li></ul><p>Single只会调用这两个方法中的一个，而且只会调用一次，调用了任何一个方法之后，订阅关系终止。</p><h4 id="Single操作符"><a href="#Single操作符" class="headerlink" title="Single操作符"></a>Single操作符</h4><table><thead><tr><th>操作符</th><th>返回值</th><th>说明</th></tr></thead><tbody><tr><td>compose</td><td>Single</td><td>创建一个自定义的操作符</td></tr><tr><td>concat and concatWith</td><td>Observable</td><td>连接多个Single和Observable发射的数据</td></tr><tr><td>create</td><td>Single</td><td>调用观察者的create方法创建一个Single</td></tr><tr><td>error</td><td>Single</td><td>返回一个立即给订阅者发射错误通知的Single</td></tr><tr><td>flatMap</td><td>Single</td><td>返回一个Single，它发射对原Single的数据执行flatMap操作后的结果</td></tr><tr><td>flatMapObservable</td><td>Observable</td><td>返回一个Observable，它发射对原Single的数据执行flatMap操作后的结果</td></tr><tr><td>from</td><td>Single</td><td>将Future转换成Single</td></tr><tr><td>just</td><td>Single</td><td>返回一个发射一个指定值的Single</td></tr><tr><td>map</td><td>Single</td><td>返回一个Single，它发射对原Single的数据执行map操作后的结果</td></tr><tr><td>merge</td><td>Single</td><td>将一个Single(它发射的数据是另一个Single，假设为B)转换成另一个Single(它发射来自另一个Single(B)的数据)</td></tr><tr><td>merge and mergeWith</td><td>Observable</td><td>合并发射来自多个Single的数据</td></tr><tr><td>observeOn</td><td>Single</td><td>指示Single在指定的调度程序上调用订阅者的方法</td></tr><tr><td>onErrorReturn</td><td>Single</td><td>将一个发射错误通知的Single转换成一个发射指定数据项的Single</td></tr><tr><td>subscribeOn</td><td>Single</td><td>指示Single在指定的调度程序上执行操作</td></tr><tr><td>timeout</td><td>Single</td><td>它给原有的Single添加超时控制，如果超时了就发射一个错误通知</td></tr><tr><td>toSingle</td><td>Single</td><td>将一个发射单个值的Observable转换为一个Single</td></tr><tr><td>zip and zipWith</td><td>Single</td><td>将多个Single转换为一个，后者发射的数据是对前者应用一个函数后的结果</td></tr></tbody></table><h3 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h3><p>Subject可以看成是一个桥梁或者代理，在某些ReactiveX实现中（如RxJava），它同时充当了Observer和Observable的角色。因为它是一个Observer，它可以订阅一个或多个Observable；又因为它是一个Observable，它可以转发它收到(Observe)的数据，也可以发射新的数据。</p><p>由于一个Subject订阅一个Observable，它可以触发这个Observable开始发射数据（如果那个Observable是”冷”的–就是说，它等待有订阅才开始发射数据）。因此有这样的效果，Subject可以把原来那个”冷”的Observable变成”热”的。</p><h4 id="Subject种类"><a href="#Subject种类" class="headerlink" title="Subject种类"></a>Subject种类</h4><h5 id="AsyncSubject"><a href="#AsyncSubject" class="headerlink" title="AsyncSubject"></a>AsyncSubject</h5><h5 id="BehaviorSubject"><a href="#BehaviorSubject" class="headerlink" title="BehaviorSubject"></a>BehaviorSubject</h5><p>每一个新添加的监听，接收到的第一个数据都是上一个数据</p><h5 id="PublishSubject"><a href="#PublishSubject" class="headerlink" title="PublishSubject"></a>PublishSubject</h5><h5 id="ReplaySubject"><a href="#ReplaySubject" class="headerlink" title="ReplaySubject"></a>ReplaySubject</h5><p>监听能接收所有数据</p><h3 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h3><p>如果你想给Observable操作符链添加多线程功能，你可以指定操作符（或者特定的Observable）在特定的调度器(Scheduler)上执行。</p><p>某些ReactiveX的Observable操作符有一些变体，它们可以接受一个Scheduler参数。这个参数指定操作符将它们的部分或全部任务放在一个特定的调度器上执行。</p><p>默认情况下，可观察对象和观察者的订阅方法是在同一个线程中运行的。使用ObserveOn和SubscribeOn操作符，你可以让Observable在一个特定的调度器上执行，ObserveOn指示一个Observable在一个特定的调度器上调用观察者的onNext, onError和onCompleted方法，SubscribeOn更进一步，它指示Observable将全部的处理过程（包括发射数据和通知）放在特定的调度器上执行。</p><p><img src="/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/%E6%9D%82%E9%A1%B9/ReactiveX/rx_schedulers.png"></p><h4 id="RxJava示例"><a href="#RxJava示例" class="headerlink" title="RxJava示例"></a>RxJava示例</h4><h5 id="调度器的种类"><a href="#调度器的种类" class="headerlink" title="调度器的种类"></a>调度器的种类</h5><p>下表展示了RxJava中可用的调度器种类：</p><table><thead><tr><th>调度器类型</th><th>效果</th></tr></thead><tbody><tr><td>Schedulers.computation( )</td><td>用于计算任务，如事件循环或和回调处理，不要用于IO操作(IO操作请使用Schedulers.io())；默认线程数等于处理器的数量</td></tr><tr><td>Schedulers.from(executor)</td><td>使用指定的Executor作为调度器</td></tr><tr><td>Schedulers.immediate( )</td><td>在当前线程立即开始执行任务</td></tr><tr><td>Schedulers.io( )</td><td>用于IO密集型任务，如异步阻塞IO操作，这个调度器的线程池会根据需要增长；对于普通的计算任务，请使用Schedulers.computation()；Schedulers.io( )默认是一个CachedThreadScheduler，很像一个有线程缓存的新线程调度器</td></tr><tr><td>Schedulers.newThread( )</td><td>为每个任务创建一个新线程</td></tr><tr><td>Schedulers.trampoline( )</td><td>当其它排队的任务完成后，在当前线程排队开始执行</td></tr></tbody></table><h5 id="默认调度器"><a href="#默认调度器" class="headerlink" title="默认调度器"></a>默认调度器</h5><p>在RxJava中，某些Observable操作符的变体允许你设置用于操作执行的调度器，其它的则不在任何特定的调度器上执行，或者在一个指定的默认调度器上执行。下面的表格个列出了一些操作符的默认调度器：</p><table><thead><tr><th>操作符</th><th>调度器</th></tr></thead><tbody><tr><td>buffer(timespan)</td><td>computation</td></tr><tr><td>buffer(timespan, count)</td><td>computation</td></tr><tr><td>buffer(timespan, timeshift)</td><td>computation</td></tr><tr><td>debounce(timeout, unit)</td><td>computation</td></tr><tr><td>delay(delay, unit)</td><td>computation</td></tr><tr><td>delaySubscription(delay, unit)</td><td>computation</td></tr><tr><td>interval</td><td>computation</td></tr><tr><td>repeat</td><td>trampoline</td></tr><tr><td>replay(time, unit)</td><td>computation</td></tr><tr><td>replay(buffersize, time, unit)</td><td>computation</td></tr><tr><td>replay(selector, time, unit)</td><td>computation</td></tr><tr><td>replay(selector, buffersize, time, unit)</td><td>computation</td></tr><tr><td>retry</td><td>trampoline</td></tr><tr><td>sample(period, unit)</td><td>computation</td></tr><tr><td>skip(time, unit)</td><td>computation</td></tr><tr><td>skipLast(time, unit)</td><td>computation</td></tr><tr><td>take(time, unit)</td><td>computation</td></tr><tr><td>takeLast(time, unit)</td><td>computation</td></tr><tr><td>takeLast(count, time, unit)</td><td>computation</td></tr><tr><td>takeLastBuffer(time, unit)</td><td>computation</td></tr><tr><td>takeLastBuffer(count, time, unit)</td><td>computation</td></tr><tr><td>throttleFirst</td><td>computation</td></tr><tr><td>throttleLast</td><td>computation</td></tr><tr><td>throttleWithTimeout</td><td>computation</td></tr><tr><td>timeInterval</td><td>immediate</td></tr><tr><td>timeout(timeoutSelector)</td><td>immediate</td></tr><tr><td>timeout(firstTimeoutSelector, timeoutSelector)</td><td>immediate</td></tr><tr><td>timeout(timeoutSelector, other)</td><td>immediate</td></tr><tr><td>timeout(timeout, timeUnit)</td><td>computation</td></tr><tr><td>timeout(firstTimeoutSelector, timeoutSelector, other)</td><td>immediate</td></tr><tr><td>timeout(timeout, timeUnit, other)</td><td>computation</td></tr><tr><td>timer</td><td>computation</td></tr><tr><td>timestamp</td><td>immediate</td></tr><tr><td>window(timespan)</td><td>computation</td></tr><tr><td>window(timespan, count)</td><td>computation</td></tr><tr><td>window(timespan, timeshift)</td><td>computation</td></tr></tbody></table><h5 id="使用调度器"><a href="#使用调度器" class="headerlink" title="使用调度器"></a>使用调度器</h5><p>除了将这些调度器传递给RxJava的Observable操作符，你也可以用它们调度你自己的任务。下面的示例展示了Scheduler.Worker的用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">worker = Schedulers.newThread().createWorker();</span><br><span class="line">worker.schedule(<span class="keyword">new</span> <span class="title class_">Action0</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        yourWork();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// some time later...</span></span><br><span class="line">worker.unsubscribe();</span><br></pre></td></tr></table></figure><h5 id="递归调度器"><a href="#递归调度器" class="headerlink" title="递归调度器"></a>递归调度器</h5><p>要调度递归的方法调用，你可以使用schedule，然后再用schedule(this)，示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">worker = Schedulers.newThread().createWorker();</span><br><span class="line">worker.schedule(<span class="keyword">new</span> <span class="title class_">Action0</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        yourWork();</span><br><span class="line">        <span class="comment">// recurse until unsubscribed (schedule will do nothing if unsubscribed)</span></span><br><span class="line">        worker.schedule(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// some time later...</span></span><br><span class="line">worker.unsubscribe();</span><br></pre></td></tr></table></figure><h5 id="检查或设置取消订阅状态"><a href="#检查或设置取消订阅状态" class="headerlink" title="检查或设置取消订阅状态"></a>检查或设置取消订阅状态</h5><p>Worker类的对象实现了Subscription接口，使用它的isUnsubscribed和unsubscribe方法，所以你可以在订阅取消时停止任务，或者从正在调度的任务内部取消订阅，示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Worker</span> <span class="variable">worker</span> <span class="operator">=</span> Schedulers.newThread().createWorker();</span><br><span class="line"><span class="type">Subscription</span> <span class="variable">mySubscription</span> <span class="operator">=</span> worker.schedule(<span class="keyword">new</span> <span class="title class_">Action0</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(!worker.isUnsubscribed()) &#123;</span><br><span class="line">            status = yourWork();</span><br><span class="line">            <span class="keyword">if</span>(QUIT == status) &#123; worker.unsubscribe(); &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="延时和周期调度器"><a href="#延时和周期调度器" class="headerlink" title="延时和周期调度器"></a>延时和周期调度器</h5><p>你可以使用schedule(action,delayTime,timeUnit)在指定的调度器上延时执行你的任务，下面例子中的任务将在500毫秒之后开始执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">someScheduler.schedule(someAction, <span class="number">500</span>, TimeUnit.MILLISECONDS);</span><br></pre></td></tr></table></figure><p>使用另一个版本的schedule，schedulePeriodically(action,initialDelay,period,timeUnit)方法让你可以安排一个定期执行的任务，下面例子的任务将在500毫秒之后执行，然后每250毫秒执行一次：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">someScheduler.schedulePeriodically(someAction, <span class="number">500</span>, <span class="number">250</span>, TimeUnit.MILLISECONDS);</span><br></pre></td></tr></table></figure><h5 id="测试调度器"><a href="#测试调度器" class="headerlink" title="测试调度器"></a>测试调度器</h5><p>TestScheduler让你可以对调度器的时钟表现进行手动微调。这对依赖精确时间安排的任务的测试很有用处。这个调度器有三个额外的方法：</p><ul><li>advanceTimeTo(time,unit) 向前波动调度器的时钟到一个指定的时间点</li><li>advanceTimeBy(time,unit) 将调度器的时钟向前拨动一个指定的时间段</li><li>triggerActions( ) 开始执行任何计划中的但是未启动的任务，如果它们的计划时间等于或者早于调度器时钟的当前时间</li></ul><h3 id="Operators"><a href="#Operators" class="headerlink" title="Operators"></a>Operators</h3><h4 id="创建操作"><a href="#创建操作" class="headerlink" title="创建操作"></a>创建操作</h4><ul><li>just( ) — 将一个或多个对象转换成发射这个或这些对象的一个Observable</li><li>from( ) — 将一个Iterable, 一个Future, 或者一个数组转换成一个Observable</li><li>repeat( ) — 创建一个重复发射指定数据或数据序列的Observable</li><li>repeatWhen( ) — 创建一个重复发射指定数据或数据序列的Observable，它依赖于另一个Observable发射的数据</li><li>create( ) — 使用一个函数从头创建一个Observable</li><li>defer( ) — 只有当订阅者订阅才创建Observable；为每个订阅创建一个新的Observable</li><li>range( ) — 创建一个发射指定范围的整数序列的Observable</li><li>interval( ) — 创建一个按照给定的时间间隔发射整数序列的Observable</li><li>timer( ) — 创建一个在给定的延时之后发射单个数据的Observable</li><li>empty( ) — 创建一个什么都不做直接通知完成的Observable</li><li>error( ) — 创建一个什么都不做直接通知错误的Observable</li><li>never( ) — 创建一个不发射任何数据的Observable</li></ul><h4 id="变换操作"><a href="#变换操作" class="headerlink" title="变换操作"></a>变换操作</h4><ul><li>map( ) — 对序列的每一项都应用一个函数来变换Observable发射的数据序列</li><li>flatMap( ), concatMap( ), and flatMapIterable( ) — 将Observable发射的数据集合变换为Observables集合，然后将这些Observable发射的数据平坦化的放进一个单独的Observable</li><li>switchMap( ) — 将Observable发射的数据集合变换为Observables集合，然后只发射这些Observables最近发射的数据</li><li>scan( ) — 对Observable发射的每一项数据应用一个函数，然后按顺序依次发射每一个值</li><li>groupBy( ) — 将Observable分拆为Observable集合，将原始Observable发射的数据按Key分组，每一个Observable发射一组不同的数据</li><li>buffer( ) — 它定期从Observable收集数据到一个集合，然后把这些数据集合打包发射，而不是一次发射一个</li><li>window( ) — 定期将来自Observable的数据分拆成一些Observable窗口，然后发射这些窗口，而不是每次发射一项</li><li>cast( ) — 在发射之前强制将Observable发射的所有数据转换为指定类型</li></ul><h4 id="过滤操作"><a href="#过滤操作" class="headerlink" title="过滤操作"></a>过滤操作</h4><ul><li>filter( ) — 过滤数据</li><li>takeLast( ) — 只发射最后的N项数据</li><li>last( ) — 只发射最后的一项数据</li><li>lastOrDefault( ) — 只发射最后的一项数据，如果Observable为空就发射默认值</li><li>takeLastBuffer( ) — 将最后的N项数据当做单个数据发射</li><li>skip( ) — 跳过开始的N项数据</li><li>skipLast( ) — 跳过最后的N项数据</li><li>take( ) — 只发射开始的N项数据</li><li>first( ) and takeFirst( ) — 只发射第一项数据，或者满足某种条件的第一项数据</li><li>firstOrDefault( ) — 只发射第一项数据，如果Observable为空就发射默认值</li><li>elementAt( ) — 发射第N项数据</li><li>elementAtOrDefault( ) — 发射第N项数据，如果Observable数据少于N项就发射默认值</li><li>sample( ) or throttleLast( ) — 定期发射Observable最近的数据</li><li>throttleFirst( ) — 定期发射Observable发射的第一项数据</li><li>throttleWithTimeout( ) or debounce( ) — 只有当Observable在指定的时间后还没有发射数据时，才发射一个数据</li><li>timeout( ) — 如果在一个指定的时间段后还没发射数据，就发射一个异常</li><li>distinct( ) — 过滤掉重复数据</li><li>distinctUntilChanged( ) — 过滤掉连续重复的数据</li><li>ofType( ) — 只发射指定类型的数据</li><li>ignoreElements( ) — 丢弃所有的正常数据，只发射错误或完成通知</li></ul><h4 id="结合操作"><a href="#结合操作" class="headerlink" title="结合操作"></a>结合操作</h4><ul><li>startWith( ) — 在数据序列的开头增加一项数据</li><li>merge( ) — 将多个Observable合并为一个</li><li>mergeDelayError( ) — 合并多个Observables，让没有错误的Observable都完成后再发射错误通知</li><li>zip( ) — 使用一个函数组合多个Observable发射的数据集合，然后再发射这个结果</li><li>and( ), then( ), and when( ) — (rxjava-joins) 通过模式和计划组合多个Observables发射的数据集合</li><li>combineLatest( ) — 当两个Observables中的任何一个发射了一个数据时，通过一个指定的函数组合每个Observable发射的最新数据（一共两个数据），然后发射这个函数的结果</li><li>join( ) and groupJoin( ) — 无论何时，如果一个Observable发射了一个数据项，只要在另一个Observable发射的数据项定义的时间窗口内，就将两个Observable发射的数据合并发射</li><li>switchOnNext( ) — 将一个发射Observables的Observable转换成另一个Observable，后者发射这些Observables最近发射的数据</li></ul><h4 id="错误操作"><a href="#错误操作" class="headerlink" title="错误操作"></a>错误操作</h4><p>很多操作符可用于对Observable发射的onError通知做出响应或者从错误中恢复，例如，你可以：</p><ul><li>吞掉这个错误，切换到一个备用的Observable继续发射数据</li><li>吞掉这个错误然后发射默认值</li><li>吞掉这个错误并立即尝试重启这个Observable</li><li>吞掉这个错误，在一些回退间隔后重启这个Observable</li></ul><p>这是操作符列表：</p><ul><li>onErrorResumeNext( ) — 指示Observable在遇到错误时发射一个数据序列</li><li>onErrorReturn( ) — 指示Observable在遇到错误时发射一个特定的数据</li><li>onExceptionResumeNext( ) — instructs an Observable to continue emitting items after it encounters an exception (but not another variety of throwable)指示Observable遇到错误时继续发射数据</li><li>retry( ) — 指示Observable遇到错误时重试</li><li>retryWhen( ) — 指示Observable遇到错误时，将错误传递给另一个Observable来决定是否要重新给订阅这个Observable</li></ul><h4 id="辅助操作"><a href="#辅助操作" class="headerlink" title="辅助操作"></a>辅助操作</h4><ul><li>materialize( ) — 将Observable转换成一个通知列表convert an Observable into a list of Notifications</li><li>dematerialize( ) — 将上面的结果逆转回一个Observable</li><li>timestamp( ) — 给Observable发射的每个数据项添加一个时间戳</li><li>serialize( ) — 强制Observable按次序发射数据并且要求功能是完好的</li><li>cache( ) — 记住Observable发射的数据序列并发射相同的数据序列给后续的订阅者</li><li>observeOn( ) — 指定观察者观察Observable的调度器</li><li>subscribeOn( ) — 指定Observable执行任务的调度器</li><li>doOnEach( ) — 注册一个动作，对Observable发射的每个数据项使用</li><li>doOnCompleted( ) — 注册一个动作，对正常完成的Observable使用</li><li>doOnError( ) — 注册一个动作，对发生错误的Observable使用</li><li>doOnTerminate( ) — 注册一个动作，对完成的Observable使用，无论是否发生错误</li><li>doOnSubscribe( ) — 注册一个动作，在观察者订阅时使用</li><li>doOnUnsubscribe( ) — 注册一个动作，在观察者取消订阅时使用</li><li>finallyDo( ) — 注册一个动作，在Observable完成时使用</li><li>delay( ) — 延时发射Observable的结果</li><li>delaySubscription( ) — 延时处理订阅请求</li><li>timeInterval( ) — 定期发射数据</li><li>using( ) — 创建一个只在Observable生命周期存在的资源</li><li>single( ) — 强制返回单个数据，否则抛出异常</li><li>singleOrDefault( ) — 如果Observable完成时返回了单个数据，就返回它，否则返回默认数据</li><li>toFuture( ), toIterable( ), toList( ) — 将Observable转换为其它对象或数据结构</li></ul><h4 id="条件和布尔操作"><a href="#条件和布尔操作" class="headerlink" title="条件和布尔操作"></a>条件和布尔操作</h4><p><strong>条件操作符</strong></p><ul><li>amb( ) — 给定多个Observable，只让第一个发射数据的Observable发射全部数据</li><li>defaultIfEmpty( ) — 发射来自原始Observable的数据，如果原始Observable没有发射数据，就发射一个默认数据</li><li>(rxjava-computation-expressions) doWhile( ) — 发射原始Observable的数据序列，然后重复发射这个序列直到不满足这个条件为止</li><li>(rxjava-computation-expressions) ifThen( ) — 只有当某个条件为真时才发射原始Observable的数据序列，否则发射一个空的或默认的序列</li><li>skipUntil( ) — 丢弃原始Observable发射的数据，直到第二个Observable发射了一个数据，然后发射原始Observable的剩余数据</li><li>skipWhile( ) — 丢弃原始Observable发射的数据，直到一个特定的条件为假，然后发射原始Observable剩余的数据</li><li>(rxjava-computation-expressions) switchCase( ) — 基于一个计算结果，发射一个指定Observable的数据序列</li><li>takeUntil( ) — 发射来自原始Observable的数据，直到第二个Observable发射了一个数据或一个通知</li><li>takeWhile( ) and takeWhileWithIndex( ) — 发射原始Observable的数据，直到一个特定的条件为真，然后跳过剩余的数据</li></ul><p><strong>布尔操作符</strong></p><ul><li>all( ) — 判断是否所有的数据项都满足某个条件</li><li>contains( ) — 判断Observable是否会发射一个指定的值</li><li>exists( ) and isEmpty( ) — 判断Observable是否发射了一个值</li><li>sequenceEqual( ) — 判断两个Observables发射的序列是否相等</li></ul><h4 id="算数和聚合操作"><a href="#算数和聚合操作" class="headerlink" title="算数和聚合操作"></a>算数和聚合操作</h4><p><strong>rxjava-math 模块的操作符</strong></p><ul><li>averageInteger( ) — 求序列平均数并发射</li><li>averageLong( ) — 求序列平均数并发射</li><li>averageFloat( ) — 求序列平均数并发射</li><li>averageDouble( ) — 求序列平均数并发射</li><li>max( ) — 求序列最大值并发射</li><li>maxBy( ) — 求最大key对应的值并发射</li><li>min( ) — 求最小值并发射</li><li>minBy( ) — 求最小Key对应的值并发射</li><li>sumInteger( ) — 求和并发射</li><li>sumLong( ) — 求和并发射</li><li>sumFloat( ) — 求和并发射</li><li>sumDouble( ) — 求和并发射</li></ul><p><strong>其它聚合操作符</strong></p><ul><li>concat( ) — 顺序连接多个Observables</li><li>count( ) and countLong( ) — 计算数据项的个数并发射结果</li><li>reduce( ) — 对序列使用reduce()函数并发射最终的结果</li><li>collect( ) — 将原始Observable发射的数据放到一个单一的可变的数据结构中，然后返回一个发射这个数据结构的Observable</li><li>toList( ) — 收集原始Observable发射的所有数据到一个列表，然后返回这个列表</li><li>toSortedList( ) — 收集原始Observable发射的所有数据到一个有序列表，然后返回这个列表</li><li>toMap( ) — 将序列数据转换为一个Map，Map的key是根据一个函数计算的</li><li>toMultiMap( ) — 将序列数据转换为一个列表，同时也是一个Map，Map的key是根据一个函数计算的</li></ul><h4 id="异步操作"><a href="#异步操作" class="headerlink" title="异步操作"></a>异步操作</h4><p>下面的这些操作符属于单独的rxjava-async模块，它们用于将同步对象转换为Observable。</p><ul><li>start( ) — 创建一个Observable，它发射一个函数的返回值</li><li>toAsync( ) or asyncAction( ) or asyncFunc( ) — 将一个函数或者Action转换为已Observable，它执行这个函数并发射函数的返回值</li><li>startFuture( ) — 将一个返回Future的函数转换为一个Observable，它发射Future的返回值</li><li>deferFuture( ) — 将一个返回Observable的Future转换为一个Observable，但是并不尝试获取这个Future返回的Observable，直到有订阅者订阅它</li><li>forEachFuture( ) — 传递Subscriber方法给一个Subscriber，但是同时表现得像一个Future一样阻塞直到它完成</li><li>fromAction( ) — 将一个Action转换为Observable，当一个订阅者订阅时，它执行这个action并发射它的返回值</li><li>fromCallable( ) — 将一个Callable转换为Observable，当一个订阅者订阅时，它执行这个Callable并发射Callable的返回值，或者发射异常</li><li>fromRunnable( ) — convert a Runnable into an Observable that invokes the runable and emits its result when a Subscriber subscribes将一个Runnable转换为Observable，当一个订阅者订阅时，它执行这个Runnable并发射Runnable的返回值</li><li>runAsync( ) — 返回一个StoppableObservable，它发射某个Scheduler上指定的Action生成的多个actions</li></ul><h4 id="连接操作"><a href="#连接操作" class="headerlink" title="连接操作"></a>连接操作</h4><ul><li>ConnectableObservable.connect( ) — 指示一个可连接的Observable开始发射数据</li><li>Observable.publish( ) — 将一个Observable转换为一个可连接的Observable</li><li>Observable.replay( ) — 确保所有的订阅者看到相同的数据序列，即使它们在Observable开始发射数据之后才订阅</li><li>ConnectableObservable.refCount( ) — 让一个可连接的Observable表现得像一个普通的Observable</li></ul><h4 id="转换操作"><a href="#转换操作" class="headerlink" title="转换操作"></a>转换操作</h4><h4 id="阻塞操作"><a href="#阻塞操作" class="headerlink" title="阻塞操作"></a>阻塞操作</h4><p>要将普通的Observable 转换为 BlockingObservable，可以使用 Observable.toBlocking( )) 方法或者BlockingObservable.from( )) 方法。</p><ul><li>forEach( ) — 对Observable发射的每一项数据调用一个方法，会阻塞直到Observable完成</li><li>first( ) — 阻塞直到Observable发射了一个数据，然后返回第一项数据</li><li>firstOrDefault( ) — 阻塞直到Observable发射了一个数据或者终止，返回第一项数据，或者返回默认值</li><li>last( ) — 阻塞直到Observable终止，然后返回最后一项数据</li><li>lastOrDefault( ) — 阻塞直到Observable终止，然后返回最后一项的数据，或者返回默认值</li><li>mostRecent( ) — 返回一个总是返回Observable最近发射的数据的iterable</li><li>next( ) — 返回一个Iterable，会阻塞直到Observable发射了另一个值，然后返回那个值</li><li>latest( ) — 返回一个iterable，会阻塞直到或者除非Observable发射了一个iterable没有返回的值，然后返回这个值</li><li>single( ) — 如果Observable终止时只发射了一个值，返回那个值，否则抛出异常</li><li>singleOrDefault( ) — 如果Observable终止时只发射了一个值，返回那个值，否则否好默认值</li><li>toFuture( ) — 将Observable转换为一个Future</li><li>toIterable( ) — 将一个发射数据序列的Observable转换为一个Iterable</li><li>getIterator( ) — 将一个发射数据序列的Observable转换为一个Iterator</li></ul><h4 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h4><ul><li>byLine( ) — 将一个字符串的Observable转换为一个行序列的Observable，这个Observable将原来的序列当做流处理，然后按换行符分割</li><li>decode( ) — 将一个多字节的字符流转换为一个Observable，它按字符边界发射字节数组</li><li>encode( ) — 对一个发射字符串的Observable执行变换操作，变换后的Observable发射一个在原始字符串中表示多字节字符边界的字节数组</li><li>from( ) — 将一个字符流或者Reader转换为一个发射字节数组或者字符串的Observable</li><li>join( ) — 将一个发射字符串序列的Observable转换为一个发射单个字符串的Observable，后者用一个指定的字符串连接所有的字符串</li><li>split( ) — 将一个发射字符串的Observable转换为另一个发射字符串的Observable，后者使用一个指定的正则表达式边界分割前者发射的所有字符串</li><li>stringConcat( ) — 将一个发射字符串序列的Observable转换为一个发射单个字符串的Observable，后者连接前者发射的所有字符串</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="reactivex.io">reactivex.io</a></li><li><a href="https://github.com/ReactiveX">https://github.com/ReactiveX</a></li><li><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/topics/Getting-Started.html">https://mcxiaoke.gitbooks.io/rxdocs/content/topics/Getting-Started.html</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Observables&quot;&gt;&lt;a href=&quot;#Observables&quot; class=&quot;headerlink&quot; title=&quot;Observables&quot;&gt;&lt;/a&gt;Observables&lt;/h3&gt;&lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;head</summary>
      
    
    
    
    <category term="技术开发" scheme="http://airshu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="杂项" scheme="http://airshu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="Rx" scheme="http://airshu.github.io/tags/Rx/"/>
    
  </entry>
  
  <entry>
    <title>flutter_bloc</title>
    <link href="http://airshu.github.io/wiki/Flutter/%E5%BC%80%E6%BA%90%E5%BA%93/flutter_bloc/"/>
    <id>http://airshu.github.io/wiki/Flutter/%E5%BC%80%E6%BA%90%E5%BA%93/flutter_bloc/</id>
    <published>2024-02-12T02:23:36.669Z</published>
    <updated>2024-02-12T02:23:36.669Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>核心概念：将UI和数据分离，数据使用Event、Bloc（Cubit）、State来进行单项流转。</p><p><img src="/wiki/Flutter/%E5%BC%80%E6%BA%90%E5%BA%93/flutter_bloc/1.webp"></p><ol><li>通过BlocProvider提供Bloc供不同地方使用</li><li>使用BlocBuilder监听Bloc的状态变化，根据状态变化来刷新UI</li><li>Bloc中处理业务逻辑</li><li>State中保存数据</li></ol><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><h3 id="Bloc-observer"><a href="#Bloc-observer" class="headerlink" title="Bloc.observer"></a>Bloc.observer</h3><p>全局监听Event事件的变化、bloc的转化、异常回调</p><h3 id="BlocProvider、MultiBlocProvider"><a href="#BlocProvider、MultiBlocProvider" class="headerlink" title="BlocProvider、MultiBlocProvider"></a>BlocProvider、MultiBlocProvider</h3><p>绑定bloc</p><h3 id="BlocBuilder"><a href="#BlocBuilder" class="headerlink" title="BlocBuilder"></a>BlocBuilder</h3><p>视图层监听bloc的状态变化，根据状态变化来刷新UI。buildWhen中判断是否需要刷新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">BlocBuilder&lt;BlocA, StateA&gt;(</span><br><span class="line">  builder: (context, state) &#123;</span><br><span class="line">    return Container();</span><br><span class="line">  &#125;,</span><br><span class="line">  buildWhen: (previous, current) &#123;</span><br><span class="line">    return previous != current;</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="BlocSelector"><a href="#BlocSelector" class="headerlink" title="BlocSelector"></a>BlocSelector</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">BlocSelector&lt;BlocA, StateA, StateB&gt;(</span><br><span class="line">  selector: (state) &#123;</span><br><span class="line">    <span class="comment">//判断是否需要刷新</span></span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">  &#125;,</span><br><span class="line">  builder: (context, state) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container();</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="BlocListener"><a href="#BlocListener" class="headerlink" title="BlocListener"></a>BlocListener</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BlocListener&lt;BlocA, StateA&gt;(</span><br><span class="line">  listener: (context, state) &#123;</span><br><span class="line">    <span class="comment">// do stuff here based on BlocA&#x27;s state</span></span><br><span class="line">  &#125;,</span><br><span class="line">  child: Container(),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><pre><code>### Bloc&lt;Event,State&gt;Bloc、Cubit的基类，bloc中监听Event，处理业务逻辑，emit State### Event实体类，定义成事件类型，区分不同的业务场景### State实体类，存储数据，驱动UI刷新## 注意事项- emit的时候需要重新构造State对象，是否可以优化？- 为了精细化处理，需要使用多个BlocBuilder，每个Builder都要实现自己的buildWhen，避免不必要的刷新- 异步操作完后的emit之前需要判断下isClosed## 参考- [官方文档](https://bloclibrary.dev)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h2&gt;&lt;p&gt;核心概念：将UI和数据分离，数据使用Event、Bloc（Cubit）、State来进行单项流转。&lt;/p&gt;
&lt;p&gt;&lt;img </summary>
      
    
    
    
    <category term="Flutter" scheme="http://airshu.github.io/categories/Flutter/"/>
    
    <category term="开源库" scheme="http://airshu.github.io/categories/Flutter/%E5%BC%80%E6%BA%90%E5%BA%93/"/>
    
    
    <category term="Flutter" scheme="http://airshu.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Widget</title>
    <link href="http://airshu.github.io/wiki/Flutter/UI/Widget/"/>
    <id>http://airshu.github.io/wiki/Flutter/UI/Widget/</id>
    <published>2024-02-12T02:23:36.669Z</published>
    <updated>2024-02-12T02:23:36.669Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Widget"><a href="#Widget" class="headerlink" title="Widget"></a>Widget</h2><p>Flutter中的一切都是Widget。关于Flutter的UI绘制原理可以参考<a href="https://juejin.cn/post/6844903794627575822">纷争再起：Flutter-UI绘制解析</a>。</p><p>简要概括就是，我们写各种widget，Flutter框架帮我们解析成element树，最终转换成renderobject树，再通过底层skia绘制。</p><p><img src="/wiki/Flutter/UI/Widget/widget_1.png"></p><ul><li>Component Widget：组合类Widget，这类Widget都继承StatelessWidget或StatefulWidget；</li><li>Render Widget：渲染类Widget，参与layout、paint流程，有与之对应的Render Object；</li><li>Proxy Widget：代理类Widget，提供一些附加的功能，比如InheritedWidget用于共享信息，ParentDataWidget用于为其他Widget提供信息；</li></ul><h3 id="context"><a href="#context" class="headerlink" title="context"></a>context</h3><p>如果 widget <code>A</code> 拥有子 widget，那么 widget <code>A</code> 的 context 将成为其直接关联子 context 的父 context。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.ancestorWidgetOfExactType(Scaffold) =&gt; 通过从 context 得到树结构来返回第一个 Scaffold</span><br></pre></td></tr></table></figure><p>Widget主要有两种类型：</p><ul><li>StatelessWidget：只有在创建的时候绘制一次</li><li>StatefulWidget：根据状态会发生变化</li></ul><p>感觉这样设计还是处于性能考虑，当某些控件不需要改变UI时，使用StatelessWidget就不会重绘。</p><h2 id="Widget-1"><a href="#Widget-1" class="headerlink" title="Widget"></a>Widget</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Widget</span> <span class="keyword">extends</span> <span class="title">DiagnosticableTree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">final</span> Key? key;<span class="comment">//标识 https://medium.com/flutter/keys-what-are-they-good-for-13cb51742e7d</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">Element</span> createElement();<span class="comment">//每个Widget对应一个Element</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/// <span class="language-markdown">是否需要更新，根据runtimeType和key来判断</span></span></span><br><span class="line">   <span class="keyword">static</span> <span class="built_in">bool</span> canUpdate(Widget oldWidget, Widget newWidget) &#123;</span><br><span class="line">    <span class="keyword">return</span> oldWidget.runtimeType == newWidget.runtimeType</span><br><span class="line">        &amp;&amp; oldWidget.key == newWidget.key;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>为什么widget都是immutable?</code></p><p>@immutable 代表 Widget 是不可变的，这会限制 Widget 中定义的属性（即配置信息）必须是不可变的（final），为什么不允许 Widget 中定义的属性变化呢？这是因为，Flutter 中如果属性发生变化则会重新构建Widget树，即重新创建新的 Widget 实例来替换旧的 Widget 实例，所以允许 Widget 的属性变化是没有意义的，因为一旦 Widget 自己的属性变了自己就会被替换。这也是为什么 Widget 中定义的属性必须是 final 的原因。</p><h2 id="StatelessWidget"><a href="#StatelessWidget" class="headerlink" title="StatelessWidget"></a>StatelessWidget</h2><p>对于StatelessWidget，只需要重写build方法即可。</p><h2 id="StatefulWidget"><a href="#StatefulWidget" class="headerlink" title="StatefulWidget"></a>StatefulWidget</h2><p>StatefulWidget是通过State来管理状态，State的生命周期也就是State的生命周期。参考：<a href="/wiki/Flutter/UI/%E6%A0%87%E5%87%86%E5%BA%93/widgets/framework/State/">State</a></p><h3 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h3><p>在 Fultter 中，每一个 Widget 都是被唯一标识的。这个唯一标识在 build&#x2F;rendering 阶段由框架定义。该唯一标识对应于可选的 Key 参数。如果省略该参数，Flutter 将会为你生成一个。</p><p>参考：<a href="/wiki/Flutter/UI/%E6%A0%87%E5%87%86%E5%BA%93/widgets/framework/Key/">key</a></p><h3 id="访问子Widget"><a href="#访问子Widget" class="headerlink" title="访问子Widget"></a>访问子Widget</h3><p>通过key</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">GlobalKey&lt;MyStatefulWidgetState&gt; myWidgetStateKey = <span class="keyword">new</span> GlobalKey&lt;MyStatefulWidgetState&gt;();</span><br><span class="line">...</span><br><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyStatefulWidget(</span><br><span class="line">        key: myWidgetStateKey,</span><br><span class="line">        color: Colors.blue,</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///<span class="language-markdown">访问子State</span></span></span><br><span class="line">myWidgetStateKey.currentState</span><br></pre></td></tr></table></figure><h3 id="访问父Widget"><a href="#访问父Widget" class="headerlink" title="访问父Widget"></a>访问父Widget</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyExposingWidgetState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyExposingWidget</span>&gt;</span>&#123;</span><br><span class="line">   Color _color;</span><br><span class="line"></span><br><span class="line">   Color <span class="keyword">get</span> color =&gt; _color;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyChildWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">   <span class="meta">@override</span></span><br><span class="line">   Widget build(BuildContext context)&#123;</span><br><span class="line">   <span class="comment">// 通过context的方法</span></span><br><span class="line">      <span class="keyword">final</span> MyExposingWidget widget = context.ancestorWidgetOfExactType(MyExposingWidget);</span><br><span class="line">      <span class="keyword">final</span> MyExposingWidgetState state = widget?.myState;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Container(</span><br><span class="line">         color: state == <span class="keyword">null</span> ? Colors.blue : state.color,</span><br><span class="line">      );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="StatelessWidget、StatefulWidget选择策略："><a href="#StatelessWidget、StatefulWidget选择策略：" class="headerlink" title="StatelessWidget、StatefulWidget选择策略："></a>StatelessWidget、StatefulWidget选择策略：</h3><ul><li>优先使用 StatelessWidget</li><li>含有大量子 Widget（如根布局、次根布局）慎用 StatefulWidget</li><li>尽量在叶子节点使用 StatefulWidget</li><li>将会调用到setState((){}) 的代码尽可能的和要更新的视图封装在一个尽可能小的模块里。</li><li>如果一个Widget需要reBuild，那么它的子节点、兄弟节点、兄弟节点的子节点应该尽可能少</li></ul><h2 id="InheritedWidget"><a href="#InheritedWidget" class="headerlink" title="InheritedWidget"></a>InheritedWidget</h2><p>允许树中较低层次的widget向上查找，获得祖先widget的引用，以及在祖先改变的时候重建自身。Theme.of()和Navigator.of()都是InheritedWidget的例子。</p><p>InheritedWidget 组件的所有子组件都可以直接通过 BuildContext.dependOnInheritedWidgetOfExactType 获取数据。</p><p>updateShouldNotify方法来决定是否通知子树中依赖data的Widget。 如果返回true，则子树中依赖(build函数中有调用)本widget的子widget的<code>state.didChangeDependencies</code>会被调用</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://juejin.cn/post/6844903794627575822">纷争再起：Flutter-UI绘制解析</a></li><li><a href="https://book.flutterchina.club/chapter7/inherited_widget.html">数据共享（InheritedWidget）</a></li><li><a href="https://segmentfault.com/a/1190000039030651">源码分析系列之InheritedWidget</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Widget&quot;&gt;&lt;a href=&quot;#Widget&quot; class=&quot;headerlink&quot; title=&quot;Widget&quot;&gt;&lt;/a&gt;Widget&lt;/h2&gt;&lt;p&gt;Flutter中的一切都是Widget。关于Flutter的UI绘制原理可以参考&lt;a href=&quot;https</summary>
      
    
    
    
    <category term="Flutter" scheme="http://airshu.github.io/categories/Flutter/"/>
    
    <category term="UI" scheme="http://airshu.github.io/categories/Flutter/UI/"/>
    
    
    <category term="Flutter" scheme="http://airshu.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>资料收集</title>
    <link href="http://airshu.github.io/wiki/Flutter/%E5%8A%A8%E6%80%81%E5%8C%96/%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/"/>
    <id>http://airshu.github.io/wiki/Flutter/%E5%8A%A8%E6%80%81%E5%8C%96/%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/</id>
    <published>2024-02-12T02:23:36.669Z</published>
    <updated>2024-02-12T02:23:36.669Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://github.com/openkraken/kraken%EF%BC%9A%E9%98%BF%E9%87%8C%E5%87%BA%E5%93%81%EF%BC%8C%E5%B7%B2%E7%BB%8F%E4%B8%8D%E7%BB%B4%E6%8A%A4">https://github.com/openkraken/kraken：阿里出品，已经不维护</a></li><li><a href="https://github.com/ymm-tech/thresh%EF%BC%9A%E5%9F%BA%E4%BA%8EJS%E7%9A%84Flutter%E5%8A%A8%E6%80%81%E5%8C%96%E6%96%B9%E6%A1%88%EF%BC%8C%E5%B7%B2%E4%B8%8D%E7%BB%B4%E6%8A%A4">https://github.com/ymm-tech/thresh：基于JS的Flutter动态化方案，已不维护</a></li><li><a href="https://github.com/mxflutter/mxflutter%EF%BC%9A%E8%85%BE%E8%AE%AF%E5%87%BA%E5%93%81%EF%BC%8CMXFlutter">https://github.com/mxflutter/mxflutter：腾讯出品，MXFlutter</a> 是一套使用 TypeScript&#x2F;JavaScript 来开发 Flutter 应用的框架。已不维护</li><li><a href="https://hydro-sdk.io/%EF%BC%9A%E4%BD%BF%E7%94%A8JS%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E7%9A%84%E5%8A%A8%E6%80%81%E5%8C%96%E6%8A%80%E6%9C%AF%EF%BC%8C%E5%B7%B2%E4%B8%8D%E7%BB%B4%E6%8A%A4">https://hydro-sdk.io/：使用JS相关技术的动态化技术，已不维护</a></li><li><a href="https://github.com/ChimeraFlutter/Chimera-Flutter-Code-Push%EF%BC%9A%E5%B7%B2%E4%B8%8D%E7%BB%B4%E6%8A%A4%EF%BC%8C%E8%B2%8C%E4%BC%BC%E5%BE%88%E5%BC%BA%E5%A4%A7%E3%80%82%E5%8F%AA%E9%9C%80%E8%A6%81%E5%9F%BA%E4%BA%8Edart">https://github.com/ChimeraFlutter/Chimera-Flutter-Code-Push：已不维护，貌似很强大。只需要基于dart</a></li><li><a href="https://github.com/openwebf/webf%EF%BC%9AKraken%E6%9B%BF%E4%BB%A3%E5%93%81">https://github.com/openwebf/webf：Kraken替代品</a></li><li><a href="https://github.com/wuba/FairPushy%EF%BC%9A58%E5%90%8C%E5%9F%8E%E7%9A%84%E5%BC%80%E6%BA%90%E5%8A%A8%E6%80%81%E5%8C%96%E6%96%B9%E6%A1%88%EF%BC%8C%E7%9B%AE%E5%89%8D%E5%B8%82%E9%9D%A2%E4%B8%8A%E6%AF%94%E8%BE%83%E5%AE%8C%E5%96%84%E7%9A%84%E5%BC%80%E6%BA%90%E6%96%B9%E6%A1%88%E3%80%82">https://github.com/wuba/FairPushy：58同城的开源动态化方案，目前市面上比较完善的开源方案。</a></li><li><a href="https://zhaoshuming.github.io/2020/10/13/flutter-dynamic/">Flutter动态化方案</a></li><li><a href="https://alibaba.github.io/LuaViewSDK/index.html">https://alibaba.github.io/LuaViewSDK/index.html</a></li><li><a href="https://juejin.cn/post/6923060266003333133">UC Flutter技术沙龙分享：Aion - 拥抱 Flutter 生态的动态化方案</a></li><li><a href="https://tech.meituan.com/2020/06/23/meituan-flutter-flap.html">美团外卖Flutter动态化实践</a></li><li><a href="https://www.infoq.cn/article/mia5an2je51uor4jeipg">Flutter 动态化在最右 App 中的实践</a></li><li><a href="https://surface.syr.edu/cgi/viewcontent.cgi?article=1012&context=lcsmith_other">Definitional Interpreters for Higher-Order Programming Languages</a></li><li><a href="https://sites.cs.ucsb.edu/~ckrintz/papers/TCD-CS-2009-37.pdf">Dynamic Interpretation for Dynamic Scripting Languages</a></li><li><a href="https://hetu.dev/docs/zh-Hans/%EF%BC%9A%E6%B2%B3%E5%9B%BE%EF%BC%8C%E4%B8%93%E4%B8%BAFlutter%E6%89%93%E9%80%A0%E7%9A%84%E8%BD%BB%E9%87%8F%E5%9E%8B%E5%B5%8C%E5%85%A5%E5%BC%8F%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80">https://hetu.dev/docs/zh-Hans/：河图，专为Flutter打造的轻量型嵌入式脚本语言</a></li><li><a href="https://github.com/peiffer-innovations/json_dynamic_widget%EF%BC%9A%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BDjson%E6%96%87%E4%BB%B6%E7%9A%84UI">https://github.com/peiffer-innovations/json_dynamic_widget：动态加载json文件的UI</a></li><li><a href="https://cloud.tencent.com/developer/article/1531498">带你不到80行代码搞定Flutter热更新原创</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/openkraken/kraken%EF%BC%9A%E9%98%BF%E9%87%8C%E5%87%BA%E5%93%81%EF%BC%8C%E5%B7%B2%E7%BB%8F%E4%B8%8D%E7%B</summary>
      
    
    
    
    <category term="Flutter" scheme="http://airshu.github.io/categories/Flutter/"/>
    
    <category term="动态化" scheme="http://airshu.github.io/categories/Flutter/%E5%8A%A8%E6%80%81%E5%8C%96/"/>
    
    
    <category term="Flutter 动态化" scheme="http://airshu.github.io/tags/Flutter-%E5%8A%A8%E6%80%81%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Flutter事件分发原理</title>
    <link href="http://airshu.github.io/wiki/Flutter/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Flutter%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E5%8E%9F%E7%90%86/"/>
    <id>http://airshu.github.io/wiki/Flutter/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Flutter%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E5%8E%9F%E7%90%86/</id>
    <published>2024-02-12T02:23:36.669Z</published>
    <updated>2024-02-12T02:23:36.669Z</updated>
    
    <content type="html"><![CDATA[<p>Flutter中，Android设备上的事件分发流程：</p><p>Android的事件响应，通过Engine发送到framework层，Flutter侧的GestureBinding负责接收事件。</p><p>Flutter侧对设备事件定义了touch、mouse、stylus、invertedStylus、trackpad、unknown几种类型</p><p><img src="/wiki/Flutter/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Flutter%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E5%8E%9F%E7%90%86/event_dispatch_0.png"></p><p><img src="/wiki/Flutter/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Flutter%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E5%8E%9F%E7%90%86/event_dispatch_1.png"></p><ol><li>命中测试：当手指按下时，触发 PointerDownEvent 事件，按照深度优先遍历当前渲染（render object）树，对每一个渲染对象进行“命中测试”（hit test），如果命中测试通过，则该渲染对象会被添加到一个 HitTestResult 列表当中。</li><li>事件分发：命中测试完毕后，会遍历 HitTestResult 列表，调用每一个渲染对象的事件处理方法（handleEvent）来处理 PointerDownEvent 事件，该过程称为“事件分发”（event dispatch）。随后当手指移动时，便会分发 PointerMoveEvent 事件。</li><li>事件清理：当手指抬（ PointerUpEvent ）起或事件取消时（PointerCancelEvent），会先对相应的事件进行分发，分发完毕后会清空 HitTestResult 列表。</li></ol><h2 id="Flutter屏幕触发的事件类型"><a href="#Flutter屏幕触发的事件类型" class="headerlink" title="Flutter屏幕触发的事件类型"></a>Flutter屏幕触发的事件类型</h2><ul><li>PointerAddedEvent：接触屏幕</li><li>PointerHoverEvent：悬停事件</li><li>PointerDownEvent：按下事件</li><li>PointerMoveEvent：移动事件</li><li>PointerUpEvent：完全离开屏幕事件</li><li>PointerCancelEvent：取消事件</li><li>PointerRemovedEvent：事件可能已偏离设备的检测范围，或者可能已完全与系统断开连接</li></ul><h2 id="事件流程"><a href="#事件流程" class="headerlink" title="事件流程"></a>事件流程</h2><p>Dart层中手势事件从_dispatchPointerDataPacket开始，之后会执行GestureBinding的_handlePointerEvent方法。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> handlePointerEvent(PointerEvent event) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (resamplingEnabled) &#123;</span><br><span class="line">    _resampler.addOrDispatch(event);</span><br><span class="line">    _resampler.sample(samplingOffset, _samplingClock);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Stop resampler if resampling is not enabled. This is a no-op if</span></span><br><span class="line">  <span class="comment">// resampling was never enabled.</span></span><br><span class="line">  _resampler.stop();</span><br><span class="line">  _handlePointerEventImmediately(event);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _handlePointerEventImmediately(PointerEvent event) &#123;</span><br><span class="line">  HitTestResult? hitTestResult;</span><br><span class="line">  <span class="keyword">if</span> (event <span class="keyword">is</span> PointerDownEvent || event <span class="keyword">is</span> PointerSignalEvent || event <span class="keyword">is</span> PointerHoverEvent || event <span class="keyword">is</span> PointerPanZoomStartEvent) &#123;</span><br><span class="line">    hitTestResult = HitTestResult();</span><br><span class="line">    <span class="comment">//开始碰撞检测 先调用RenderBinding中的 再调用GestureBinding中的</span></span><br><span class="line">    hitTest(hitTestResult, event.position);</span><br><span class="line">    <span class="keyword">if</span> (event <span class="keyword">is</span> PointerDownEvent || event <span class="keyword">is</span> PointerPanZoomStartEvent) &#123;</span><br><span class="line">      _hitTests[event.pointer] = hitTestResult;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">is</span> PointerUpEvent || event <span class="keyword">is</span> PointerCancelEvent || event <span class="keyword">is</span> PointerPanZoomEndEvent) &#123;</span><br><span class="line">    <span class="comment">//复用机制，抬起或取消，不用hitTest，移除</span></span><br><span class="line">    hitTestResult = _hitTests.remove(event.pointer);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.down || event <span class="keyword">is</span> PointerPanZoomUpdateEvent) &#123;</span><br><span class="line">    hitTestResult = _hitTests[event.pointer];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (hitTestResult != <span class="keyword">null</span> ||</span><br><span class="line">      event <span class="keyword">is</span> PointerAddedEvent ||</span><br><span class="line">      event <span class="keyword">is</span> PointerRemovedEvent) &#123;</span><br><span class="line">        <span class="comment">//分发事件</span></span><br><span class="line">    dispatchEvent(event, hitTestResult);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="RenderBinding的hitTest"><a href="#RenderBinding的hitTest" class="headerlink" title="RenderBinding的hitTest"></a>RenderBinding的hitTest</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="keyword">void</span> hitTest(HitTestResult result, Offset position) &#123;</span><br><span class="line">    <span class="comment">//RenderView</span></span><br><span class="line">    renderView.hitTest(result, position: position);</span><br><span class="line">    <span class="keyword">super</span>.hitTest(result, position);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">RenderView中的hitTest</span></span></span><br><span class="line">  <span class="built_in">bool</span> hitTest(HitTestResult result, &#123; <span class="keyword">required</span> Offset position &#125;) &#123;</span><br><span class="line">    <span class="comment">//RenderBox</span></span><br><span class="line">    <span class="keyword">if</span> (child != <span class="keyword">null</span>) &#123;</span><br><span class="line">      child!.hitTest(BoxHitTestResult.wrap(result), position: position);</span><br><span class="line">    &#125;</span><br><span class="line">    result.add(HitTestEntry(<span class="keyword">this</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">RenderObject中的hitTest</span></span></span><br><span class="line">  <span class="built_in">bool</span> hitTest(BoxHitTestResult result, &#123; <span class="keyword">required</span> Offset position &#125;) &#123;</span><br><span class="line">    <span class="keyword">if</span> (_size!.contains(position)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (hitTestChildren(result, position: position) || hitTestSelf(position)) &#123;</span><br><span class="line">        result.add(BoxHitTestEntry(<span class="keyword">this</span>, position));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="GestureBinding的hitTest"><a href="#GestureBinding的hitTest" class="headerlink" title="GestureBinding的hitTest"></a>GestureBinding的hitTest</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> hitTest(HitTestResult result, Offset position) &#123;</span><br><span class="line">  result.add(HitTestEntry(<span class="keyword">this</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分发事件"><a href="#分发事件" class="headerlink" title="分发事件"></a>分发事件</h3><p>dispatchEvent对事件进行分发</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">void</span> dispatchEvent(PointerEvent event, HitTestResult? hitTestResult) &#123;</span><br><span class="line">  <span class="keyword">if</span> (hitTestResult == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">assert</span>(event <span class="keyword">is</span> PointerAddedEvent || event <span class="keyword">is</span> PointerRemovedEvent);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 没有碰撞检测信息</span></span><br><span class="line">      pointerRouter.route(event);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (exception, stack) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">final</span> HitTestEntry entry <span class="keyword">in</span> hitTestResult.path) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 存在碰撞时，每个控件内部调用handleEvent处理，多个控件存在竞争时如何处理？ 使用手势竞技场GestureArenaManager</span></span><br><span class="line">      entry.target.handleEvent(event.transformed(entry.transform), entry);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (exception, stack) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="手势竞技场GestureArenaManager"><a href="#手势竞技场GestureArenaManager" class="headerlink" title="手势竞技场GestureArenaManager"></a>手势竞技场GestureArenaManager</h2><ul><li>GestureRecognizer ：手势识别器基类，基本上 RenderPointerListener 中需要处理的手势事件，都会分发到它对应的 GestureRecognizer，并经过它处理和竞技后再分发出去，常见有 ：<ul><li>OneSequenceGestureRecognizer</li><li>MultiTapGestureRecognizer</li><li>HorizontalDragGestureRecognizer</li><li>VerticalDragGestureRecognizer</li><li>TapGestureRecognizer、</li><li>LongPressGestureRecognizer</li><li>DoubleTapGestureRecognizer</li><li>PanGestureRecognizer</li><li>ScaleGestureRecognizer</li><li>ForcePressGestureRecognizer</li></ul></li><li>GestureArenaManager：手势竞技管理，它管理了整个“战争”的过程，原则上竞技胜出的条件是 ：第一个竞技获胜的成员或最后一个不被拒绝的成员。</li><li>GestureArenaEntry ：提供手势事件竞技信息的实体，内封装参与事件竞技的成员。</li><li>GestureArenaMember：参与竞技的成员抽象对象，内部有 acceptGesture 和 rejectGesture 方法，它代表手势竞技的成员，默认 GestureRecognizer 都实现了它，所有竞技的成员可以理解为就是 GestureRecognizer 之间的竞争。</li><li>_GestureArena：GestureArenaManager 内的竞技场，内部持参与竞技的 members 列表，官方对这个竞技场的解释是： 如果一个手势试图在竞技场开放时(isOpen&#x3D;true)获胜，它将成为一个带有“渴望获胜”的属性的对象。当竞技场关闭(isOpen&#x3D;false)时，竞技场将寻找一个“渴望获胜”的对象成为新的参与者，如果这时候刚好只有一个，那这一个参与者将成为这次竞技场胜利的青睐存在。</li></ul><h3 id="添加到竞技场"><a href="#添加到竞技场" class="headerlink" title="添加到竞技场"></a>添加到竞技场</h3><p><img src="/wiki/Flutter/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Flutter%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E5%8E%9F%E7%90%86/arena_1.webp"></p><p>手势识别器是如何添加到竞技场的呢？</p><ol><li>使用GestureDector，在其build方法中会根据不同的场景注册不同的手势识别器，将其传递给RawGestureDetector</li><li>RawGestureDetector的build方法中创建Listener，并通过_handlePointerDown方法将PointerDownEvent数据添加进来</li><li>GestureBinding的handleEvent中竞技场处理数据</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">void</span> handleEvent(PointerEvent event, HitTestEntry entry) &#123;</span><br><span class="line">  <span class="comment">//使用注册的识别器GestureRecognizer的handleEvent处理</span></span><br><span class="line">  <span class="comment">//比如TapGestureRecognizer中，在其父类PrimaryPointerGestureRecognizer的handleEvent中处理</span></span><br><span class="line">  pointerRouter.route(event);</span><br><span class="line">  <span class="keyword">if</span> (event <span class="keyword">is</span> PointerDownEvent || event <span class="keyword">is</span> PointerPanZoomStartEvent) &#123;</span><br><span class="line">    <span class="comment">//关闭手势竞技场，并尝试解决手势竞技场</span></span><br><span class="line">    gestureArena.close(event.pointer);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">is</span> PointerUpEvent || event <span class="keyword">is</span> PointerPanZoomEndEvent) &#123;</span><br><span class="line">    <span class="comment">//扫描手势竞技场，并调用第一个手势识别器的 acceptGesture 方法</span></span><br><span class="line">    gestureArena.sweep(event.pointer);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">is</span> PointerSignalEvent) &#123;</span><br><span class="line">    pointerSignalResolver.resolve(event);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="竞技场处理"><a href="#竞技场处理" class="headerlink" title="竞技场处理"></a>竞技场处理</h3><p>GestureArenaManager的作用：</p><ol><li>存储所有竞技场及竞技场成员的添加及移除。</li><li>竞技场状态的管理。如竞技场的创建、关闭、生命周期的延长等。</li><li>每个竞技场中成员竞争的具体实现。</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://book.flutterchina.club/chapter8/hittest.html">Flutter事件机制</a></li><li><a href="https://blog.51cto.com/jdsjlzx/5528350">浅谈Flutter核心机制之—事件分发</a></li><li><a href="https://juejin.cn/post/7016621342103437349">Flutter分享：Flutter事件分发原理</a></li><li><a href="https://wizardforcel.gitbooks.io/gsyflutterbook/content/Flutter-13.html">全面深入触摸和滑动原理</a></li><li><a href="https://juejin.cn/post/6874570159768633357">Flutter之竞技场（Arena）原理解析</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Flutter中，Android设备上的事件分发流程：&lt;/p&gt;
&lt;p&gt;Android的事件响应，通过Engine发送到framework层，Flutter侧的GestureBinding负责接收事件。&lt;/p&gt;
&lt;p&gt;Flutter侧对设备事件定义了touch、mouse、s</summary>
      
    
    
    
    <category term="Flutter" scheme="http://airshu.github.io/categories/Flutter/"/>
    
    <category term="源码分析" scheme="http://airshu.github.io/categories/Flutter/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Flutter" scheme="http://airshu.github.io/tags/Flutter/"/>
    
  </entry>
  
</feed>
